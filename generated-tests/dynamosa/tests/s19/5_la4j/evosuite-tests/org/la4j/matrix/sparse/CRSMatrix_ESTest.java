/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 01 07:30:52 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, (double[]) null);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix.zero(443, 443, 3373);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 325;
      doubleArray0[1] = (double) 3414;
      doubleArray0[2] = (double) 3414;
      // Undeclared exception!
      CRSMatrix.from1DArray(3414, 3414, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      double double0 = cRSMatrix0.max();
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "V~-H&O";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("V~-H&O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CRSMatrix.zero(30, 30, 30);
      double double0 = new Integer(30);
      assertEquals(30, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-1435);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 0, (-1435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1435.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextGaussian();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      cRSMatrix0.max();
      Matrix matrix0 = cRSMatrix0.power(0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, matrix0.max(), 0.01);
      
      double double0 = ((CRSMatrix) rowMajorSparseMatrix0).minInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(39, 39, 39);
      cRSMatrix0.nonZeroIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.setRow(6, (double) 39);
      assertEquals(39.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.copyOfRows(0);
      cRSMatrix0.product();
      int int1 = 3878;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(3878, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3878
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      cRSMatrix0.power(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(2, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(8, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      // Undeclared exception!
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 0.0);
      Matrix matrix0 = cRSMatrix0.add(1.0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 9);
      sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1009, 1009);
      CRSMatrix cRSMatrix1 = new CRSMatrix(27, 1009);
      int int0 = 21;
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(21);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1009).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumn(1009, vectorAccumulator0);
      int int1 = 990;
      Matrix matrix0 = cRSMatrix2.power(990);
      cRSMatrix0.minInRow(177);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix2, matrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 19);
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(26);
      cRSMatrix1.setRow(19, (double) 26);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.setAll(26);
      assertEquals(676, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      Matrix matrix0 = cRSMatrix0.copyOfRows(0);
      cRSMatrix0.product();
      int int1 = 3878;
      double double0 = 0.0;
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(3878, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3878
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 1847;
      doubleArray0[2] = (double) 1847;
      doubleArray0[3] = (double) 33;
      doubleArray0[4] = (double) 33;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1847, 7, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(59, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-1854));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 483);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(483, cRSMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(483, cRSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(483, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1847, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1847;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.toBinary();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int2 = (-4017);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-4017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 325;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 325;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(325, 0, doubleArray0);
      cRSMatrix0.nonZeroIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-951));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -951
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.setRow(6, (double) 30);
      Double double0 = new Double(6);
      assertEquals(6.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0, cRSMatrix0.rows());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cRSMatrix1.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      
      cRSMatrix0.rowMajorIterator();
      int int0 = 2387;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2387, 2387);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix1.toMatrixMarket((NumberFormat) decimalFormat0);
      int int1 = 1480;
      int int2 = 878;
      cRSMatrix0.copyOfShape(1480, 878);
      CRSMatrix.zero(2387, 2387);
      int int3 = (-1539);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-1539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1539
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      cRSMatrix0.setRow(0, (double) 17);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(463, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(463, sparseMatrix0.cardinality());
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
      assertEquals(463, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3641, 3641);
      Matrix matrix0 = cRSMatrix0.copyOfShape(13, 13);
      assertEquals(13, matrix0.columns());
      assertEquals(3641, cRSMatrix0.columns());
      assertEquals(13, matrix0.rows());
      assertEquals(3641, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      cRSMatrix0.toBinary();
      cRSMatrix0.nonZeroIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 60;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 60;
      intArray0[2] = 4053;
      intArray0[3] = 9;
      CRSMatrix.identity(2535);
      intArray0[4] = 0;
      intArray0[5] = 60;
      intArray0[6] = 84;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '60' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 5);
      cRSMatrix0.setAll(1303.82413691);
      double double0 = cRSMatrix0.min();
      assertEquals(1303.82413691, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 30;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(30, 30);
      Matrix matrix0 = cRSMatrix0.copyOfRows(30);
      cRSMatrix0.product();
      int int1 = 3878;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '31' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RowMajorSparseMatrix.zero(325, 0, 0);
      CRSMatrix.diagonal(325, 0);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-1), 325, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x325
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      cRSMatrix0.blankOfShape(16, 16);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformColumn(0, vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(998, 998, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2688.6048398444464;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2688.6048398444464;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2688.6048398444464;
      doubleArray2[3] = 2688.6048398444464;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-66);
      CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((byte)59, 1503, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.rotate();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-2541), 9, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2541
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(9, 9, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 998;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      int int1 = 27;
      cRSMatrix0.blankOfShape(27, 27);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = new CRSMatrix(998, 0);
      int int2 = 80;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2868);
      doubleArray0[1] = (double) 998;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(80, (-2868), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 80x-2868
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 983;
      CRSMatrix.diagonal(983, 983);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      int int0 = 3583;
      Matrix matrix0 = cRSMatrix0.blankOfRows(3583);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3583);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3397);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(2.9437739181630853E-4, compressedVector0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.zero(3397, 3397, 3709);
      assertEquals(3397, cRSMatrix1.rows());
      
      double double0 = cRSMatrix0.minInRow(8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.blankOfShape(16, 16);
      int int0 = (-9);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn((-9), vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(998, 998, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 998
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-141);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-141), (double) (-141), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -141x-141
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 2162.1964542565);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(9, vectorAccumulator0);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      int int1 = 386;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(0, 0, 386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(463, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      double double0 = ((CRSMatrix) sparseMatrix0).min();
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(463, sparseMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 2;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(2, vectorAccumulator0);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 463;
      int int1 = 2247;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      int int0 = 27;
      cRSMatrix0.blankOfShape(27, 27);
      CRSMatrix cRSMatrix1 = new CRSMatrix(998, 2350);
      cRSMatrix0.toBinary();
      CRSMatrix.identity(647);
      // Undeclared exception!
      cRSMatrix1.setRow(34, (double) 34);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(8111, 6);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 463;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.random(8, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 2;
      doubleArray0[2] = (double) 2;
      int int0 = 48;
      int[] intArray0 = new int[7];
      intArray0[0] = 48;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 48;
      intArray0[4] = 48;
      intArray0[5] = 48;
      intArray0[6] = 48;
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48, 2, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 989.54674;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix.random(0, 0, mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.matrix.sparse.CRSMatrix$4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2688.6048398444464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2688.6048398444464;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2688.6048398444464;
      doubleArray2[3] = 2688.6048398444464;
      doubleArray2[4] = 2688.6048398444464;
      doubleArray2[5] = 2688.6048398444464;
      doubleArray2[6] = 2688.6048398444464;
      doubleArray2[7] = 2688.6048398444464;
      doubleArray2[8] = 3038.389240334408;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 3038.389240334408;
      doubleArray3[2] = (-1133.1418066527);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2688.6048398444464;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 2688.6048398444464;
      doubleArray4[1] = 3038.389240334408;
      doubleArray4[2] = (-1133.1418066527);
      doubleArray4[3] = (-1133.1418066527);
      doubleArray4[4] = 3921.65841;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 220.8038677768;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 220.8038677768;
      doubleArray6[1] = 3038.389240334408;
      doubleArray6[2] = 220.8038677768;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 2688.6048398444464;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 3921.65841;
      doubleArray6[7] = 220.8038677768;
      doubleArray6[8] = (-1133.1418066527);
      doubleArray0[5] = doubleArray6;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(5, cRSMatrix0.cardinality());
      
      cRSMatrix0.setAll(0.0);
      assertEquals(1, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(386, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2716;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 2716, doubleArray0);
      assertEquals(2716, rowMajorSparseMatrix0.columns());
      
      cRSMatrix0.nonZeroIterator();
      Matrix matrix0 = cRSMatrix0.copyOfShape(0, 386);
      assertEquals(386, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(386, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(0, 0.0);
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints();
      mockRandom0.nextGaussian();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).eachInRow(1420, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1420
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(59, 59, 59);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      cRSMatrix0.setAll((-1843.467743424656));
      assertEquals((-1843.467743424656), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(23, 7);
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-1299), 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1299x23
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      CRSMatrix.zero(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 3058.0;
      doubleArray0[2] = 1303.82413691;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1303.82413691;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        cRSMatrix0.setAll(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 10);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(10, doubleArray0.length);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      assertEquals(10.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).iteratorOfRow(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      int int1 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(483);
      SparseMatrix.diagonal(1, 483);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 963;
      doubleArray0[1] = (-187.64949451);
      doubleArray0[2] = (double) 483;
      doubleArray0[3] = (double) 963;
      int[] intArray0 = new int[7];
      intArray0[0] = 963;
      intArray0[1] = (-1);
      intArray0[2] = 1322;
      intArray0[3] = 483;
      intArray0[4] = 483;
      intArray0[5] = 8;
      intArray0[6] = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 2152, 963, doubleArray0, intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextGaussian();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 6);
      cRSMatrix0.toBinary();
      cRSMatrix1.nonZeroIteratorOfColumn(0);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(6, 5);
      // Undeclared exception!
      try { 
        cRSMatrix2.iteratorOfRow((-2403));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2403
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 483);
      cRSMatrix0.setAll((-52.0));
      assertEquals(483, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-2643);
      int int1 = 0;
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2643), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2643x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.toBinary();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix.identity(17);
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.swapColumns(0, 4409);
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-4017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      double double0 = cRSMatrix0.max();
      assertEquals(998.0, double0, 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 33;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 1847;
      doubleArray0[2] = (double) 1847;
      doubleArray0[3] = (double) 33;
      doubleArray0[4] = (double) 33;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-778), 8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -778x8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      cRSMatrix0.blankOfShape(16, 16);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.getRow(260);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(0, vectorProcedure0);
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 260;
      doubleArray1[1] = (-1044.3652687210067);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 998;
      doubleArray1[4] = (double) 998;
      doubleArray1[5] = (double) 998;
      doubleArray1[6] = 1847.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1044.3652687210067);
      doubleArray2[1] = (double) 998;
      doubleArray2[2] = (double) 16;
      doubleArray2[3] = 1847.0;
      doubleArray2[4] = (-799.330129);
      doubleArray2[5] = (double) 998;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (double) 998;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 16;
      doubleArray4[1] = (-799.330129);
      doubleArray4[2] = (double) 16;
      doubleArray4[3] = (double) 16;
      doubleArray4[4] = (-1044.3652687210067);
      doubleArray4[5] = (-799.330129);
      doubleArray4[6] = (-799.330129);
      doubleArray4[7] = (double) 998;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-799.330129);
      doubleArray5[1] = (-2516.31);
      doubleArray5[2] = 1684.482;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 16;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) 260;
      doubleArray6[1] = (double) 260;
      doubleArray6[2] = (-1044.3652687210067);
      doubleArray6[3] = (-2516.31);
      doubleArray6[4] = (double) 998;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayScript();
      NumberFormat.getPercentInstance(locale0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      int int0 = 3444;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3444, 5068);
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(631);
      cRSMatrix1.toColumnVector();
      // Undeclared exception!
      cRSMatrix0.setRow(10, (double) 631);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      cRSMatrix0.spliterator();
      cRSMatrix0.spliterator();
      int int1 = 1011;
      String string0 = "//Zj,uRMw9`Jk$iw6jh";
      // Undeclared exception!
      try { 
        Matrix.fromCSV("//Zj,uRMw9`Jk$iw6jh");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(332L);
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      int int0 = 286;
      // Undeclared exception!
      CRSMatrix.randomSymmetric(286, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 2;
      doubleArray0[2] = (double) 2;
      byte byte0 = (byte) (-66);
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(2, vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((byte) (-66), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 463;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(463, 463);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 464
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.rows());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 2247;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(463, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2247, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(983, 983, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 483);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(483, cRSMatrix0.columns());
      
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(2631);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2631
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(sparseMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      
      cRSMatrix0.swapColumns(993, 0);
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(993);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 993
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 2162.1964542565);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(9, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(17);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      assertEquals(17, cRSMatrix1.cardinality());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.058823529411764705, cRSMatrix1.density(), 0.01);
      
      cRSMatrix1.setRow(0, (double) 17);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      assertEquals(33, cRSMatrix1.cardinality());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(17.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1536L));
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric(0, 1.0, (Random) mockRandom0);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix2.rotate();
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cCSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.eachNonZeroInRow((-2006), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2006
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.random((-3), 480, 1.1102230246251565E-14, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      double double0 = ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int2 = (-4017);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-4017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(90, (-2205.287358449509));
      assertNotNull(cRSMatrix0);
      assertEquals(0.011111111111111112, cRSMatrix0.density(), 0.01);
      assertEquals(90, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(90, cRSMatrix0.rows());
      assertEquals((-2205.287358449509), cRSMatrix0.min(), 0.01);
      assertEquals(90, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int0 = 32;
      // Undeclared exception!
      try { 
        cRSMatrix0.set(906, 32, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '906' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2688.6048398444464;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2688.6048398444464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2688.6048398444464;
      doubleArray2[1] = 2688.6048398444464;
      doubleArray2[2] = 2688.6048398444464;
      doubleArray2[3] = 2688.6048398444464;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)16;
      byteArray0[0] = (byte) (-91);
      byteArray0[3] = (byte) (-66);
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(2688.6048398444464, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      cRSMatrix0.setAll(2688.6048398444464);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2688.6048398444464, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2688.6048398444464, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(8, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      assertNotNull(sparseMatrix0);
      assertEquals(8, sparseMatrix0.cardinality());
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.7, sparseMatrix0.max(), 0.01);
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(8, sparseMatrix0.cardinality());
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.7, sparseMatrix0.max(), 0.01);
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = cRSMatrix0.fold(matrixAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-843), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -843
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      double double0 = ((CRSMatrix) rowMajorSparseMatrix0).minInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      VectorIterator vectorIterator0 = ((CRSMatrix) rowMajorSparseMatrix0).nonZeroIteratorOfRow(8);
      assertNotNull(vectorIterator0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).getOrElse((-681), 952, (-2483.07295203));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-681' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(0, 0, (double[]) null);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(3, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      int int0 = 48;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 55;
      int[] intArray0 = null;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-1262), (-1262), (-1262), doubleArray0, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1262x-1262
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1584, 5);
      assertNotNull(cRSMatrix0);
      assertEquals(6.313131313131314E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1584, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.0, cRSMatrix0.max(), 0.01);
      assertEquals(1584, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1584, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfColumn(325);
      assertNotNull(vectorIterator0);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(137, byteArray0.length);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      
      double double0 = 2314.4810957187415;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3904, 2314.4810957187415);
      assertNotNull(cRSMatrix0);
      assertEquals(3904, cRSMatrix0.cardinality());
      assertEquals(2.5614754098360657E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2314.4810957187415, cRSMatrix0.max(), 0.01);
      assertEquals(3904, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3904, cRSMatrix0.rows());
      
      // Undeclared exception!
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(30, 30);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfRows(3800);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(3800, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix2, cRSMatrix2);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(3800, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(3800, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero(2, 280, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(424, 424, 424);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(424, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(424, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 424;
      intArray0[1] = 2;
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      assertNotNull(cRSMatrix0);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertNotNull(matrixIterator0);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 60;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 60;
      intArray0[2] = 4053;
      intArray0[3] = 9;
      intArray0[4] = 0;
      intArray0[6] = 84;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '60' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-10);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) (-10);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 37);
      assertNotNull(cRSMatrix0);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZero(matrixAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(37, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 0.0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      Matrix matrix0 = cRSMatrix0.add(1.0);
      assertNotNull(matrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 9);
      assertNotNull(sparseVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(9, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      SparseVector sparseVector1 = SparseVector.zero(9, 9);
      assertTrue(sparseVector1.equals((Object)sparseVector0));
      assertNotNull(sparseVector1);
      assertNotSame(sparseVector1, sparseVector0);
      assertEquals(9, sparseVector1.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(0, sparseVector1.cardinality());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseVector1.toColumnMatrix();
      assertTrue(sparseVector1.equals((Object)sparseVector0));
      assertNotNull(cCSMatrix0);
      assertNotSame(sparseVector1, sparseVector0);
      assertEquals(9, sparseVector1.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cCSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte) (-91);
      doubleArray1[1] = (double) (byte)16;
      doubleArray1[2] = (double) (byte) (-91);
      doubleArray1[3] = (double) 998;
      doubleArray1[4] = (double) (byte)16;
      doubleArray1[5] = 989.54674;
      doubleArray1[6] = (double) (byte) (-91);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-91.0), cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      
      cRSMatrix0.setAll((byte)16);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(16.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cRSMatrix0.foldColumns(vectorAccumulator0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(16.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(16.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(998);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 998;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(16, 16);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(16, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(16, cRSMatrix1.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertSame(cRSMatrix2, cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix2.columns());
      assertEquals(998, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(998, cRSMatrix2.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix2.density(), 0.01);
      assertEquals(998.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-116.74), 1779.0, (-116.74), (double)998, (double)16).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transformColumn(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("j>.QE$OZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 2162.1964542565);
      assertNotNull(cRSMatrix0);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(9, 8);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(8, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(8, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix1.density(), 0.01);
      assertEquals(2162.1964542565, cRSMatrix1.max(), 0.01);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      
      int int0 = 16;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(16, 16);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(16, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(16, cRSMatrix1.columns());
      
      int int1 = 0;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix2.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix2.density(), 0.01);
      assertEquals(998, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(998, cRSMatrix2.columns());
      assertEquals(998.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      int int2 = cRSMatrix1.rank();
      assertEquals(0, int2);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(16, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(16, cRSMatrix1.columns());
      
      int int3 = 4089;
      CRSMatrix cRSMatrix3 = (CRSMatrix)RowMajorSparseMatrix.diagonal(4089, 0);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertEquals(4089, cRSMatrix3.cardinality());
      assertEquals(4089, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(2.4455857177794083E-4, cRSMatrix3.density(), 0.01);
      assertEquals(4089, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)RowMajorSparseMatrix.zero(16, 4089, 4089);
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix4);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(4089, cRSMatrix4.columns());
      assertEquals(0.0, cRSMatrix4.density(), 0.01);
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(16, cRSMatrix4.rows());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2223, 3184, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2223
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(sparseMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)sparseMatrix0.blankOfRows(0);
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)sparseMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV("");
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, sparseMatrix0, cRSMatrix2);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(sparseMatrix0, cRSMatrix3);
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, sparseMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 990;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 3800;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 3800;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 990;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 990;
      doubleArray4[1] = (double) 990;
      doubleArray4[2] = (double) 990;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 3800;
      doubleArray0[3] = doubleArray4;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        CRSMatrix.zero(998, (-969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 998x-969
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(32, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2147483648.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertNotNull(matrixIterator0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(30, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-869), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-162);
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random((-162), 0, 1.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(325, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1375);
      intArray0[1] = 0;
      intArray0[2] = 325;
      intArray0[3] = 0;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(996);
      assertNotNull(cRSMatrix0);
      assertEquals(996, cRSMatrix0.columns());
      assertEquals(996, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(996, cRSMatrix0.rows());
      assertEquals(0.001004016064257028, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertNotNull(compressedVector0);
      assertEquals(996, cRSMatrix0.columns());
      assertEquals(996, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(996, cRSMatrix0.rows());
      assertEquals(0.001004016064257028, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(996, compressedVector0.length());
      assertEquals(0.001004016064257028, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      double double0 = cRSMatrix0.max();
      assertEquals(1.0, double0, 0.01);
      assertEquals(996, cRSMatrix0.columns());
      assertEquals(996, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(996, cRSMatrix0.rows());
      assertEquals(0.001004016064257028, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int int0 = 649;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int int1 = (-329);
      int int2 = 0;
      double[] doubleArray1 = cRSMatrix0.foldRows((VectorAccumulator) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-329), 649, (-329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -329x649
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(792, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(792, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(46);
      assertNotNull(compressedVector0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(792, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(257, 0.0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(257, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(257, cRSMatrix1.cardinality());
      assertEquals(0.0038910505836575876, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(257, cRSMatrix1.rows());
      
      CRSMatrix cRSMatrix2 = new CRSMatrix(0, 260, 0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertEquals(260, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)cRSMatrix2.getColumn(13);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(260, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 30;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(30, 30);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(30);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.03333333333333333, cRSMatrix1.density(), 0.01);
      assertEquals(30, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(30.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(30, cRSMatrix1.columns());
      
      double double0 = cRSMatrix0.product();
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      
      int int1 = 2136;
      double double1 = (-2117.78703847144);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '31' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextDouble();
      assertEquals(0.1, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2688.6048398444464;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 7);
      assertNotNull(cRSMatrix0);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 7);
      assertNotNull(cRSMatrix0);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int0 = 27;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(27, 7);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(27, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(7, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      CRSMatrix cRSMatrix2 = new CRSMatrix(7, 0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertEquals(7, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      
      int int1 = 260;
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      int int2 = 29;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(29, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(27, 27);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(27, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(27, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      int int0 = 0;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix2 = new CRSMatrix(998, 0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertEquals(998, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      int int1 = 2136;
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix2, cRSMatrix2, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2688.6048398444464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2688.6048398444464;
      doubleArray2[1] = 2688.6048398444464;
      doubleArray2[2] = 2688.6048398444464;
      doubleArray2[3] = 2688.6048398444464;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 2502);
      assertNotNull(cRSMatrix0);
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(2502, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 483;
      int int1 = 5;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(483, 5, 985);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(483, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(483, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(483, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(byteArray0);
      assertEquals(1949, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(483, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 985;
      doubleArray2[1] = (double) 985;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertEquals(2, doubleArray0.length);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(2, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      
      CRSMatrix cRSMatrix3 = CRSMatrix.fromBinary(byteArray0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix3);
      assertEquals(1949, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(483, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(483, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(5, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.density(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix1.toColumnMajorSparseMatrix();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cCSMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(483, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(483, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(483, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInRow(985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 985
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.03125, cRSMatrix1.density(), 0.01);
      assertEquals(31, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(31, cRSMatrix1.rows());
      assertEquals(32, cRSMatrix1.columns());
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(28, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(28, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(28, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      VectorIterator vectorIterator0 = cRSMatrix1.nonZeroIteratorOfRow(0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(vectorIterator0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(28, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      
      cRSMatrix0.setAll((-1065.476706081215));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      VectorIterator vectorIterator1 = cRSMatrix1.iteratorOfRow(6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertNotNull(vectorIterator1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(28, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, (-278), (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(998, 998, 998);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(0, 0, (double[]) null);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      cRSMatrix0.eachNonZeroInRow(45, (VectorProcedure) null);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-193));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -193
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertNotNull(compressedVector0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertNotNull(matrixIterator0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '31' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.set(0, 358, (-8));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '358' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(30, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        SparseMatrix.random(30, (-1620), (double) 30, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int int0 = 17;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(17);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(17, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.058823529411764705, cRSMatrix1.density(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      
      cRSMatrix1.setRow(0, (double) 17);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
      assertEquals(17.0, cRSMatrix1.max(), 0.01);
      assertEquals(33, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(17, cRSMatrix1.rows());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix1.nonZeroRowMajorIterator();
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
      assertEquals(17.0, cRSMatrix1.max(), 0.01);
      assertEquals(33, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(17, cRSMatrix1.rows());
      
      int int1 = 13;
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(13, (-1299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 13x-1299
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 14);
      assertNotNull(cRSMatrix0);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(14.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(148, 260, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(148, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(260, cRSMatrix1.columns());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 6;
      int[] intArray0 = new int[5];
      intArray0[0] = 148;
      intArray0[1] = 4;
      intArray0[2] = (-3319);
      intArray0[3] = 32;
      intArray0[4] = 14;
      CRSMatrix cRSMatrix2 = new CRSMatrix(260, 906, 0, doubleArray0, intArray0, intArray0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {4.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {148, 4, (-3319), 32, 14}, intArray0);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(260, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(906, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix2.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).eachNonZeroInRow(0, vectorProcedure0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(985, 325);
      assertNotNull(sparseMatrix0);
      assertEquals(325, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(985, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      
      double double0 = ((CRSMatrix) rowMajorSparseMatrix0).min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).eachInRow(985, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 985
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1528.2507583586;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-3704.0121389032);
      doubleArray1[4] = (-25.815982676209);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1629.789894);
      doubleArray4[3] = 1528.2507583586;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1528.2507583586;
      doubleArray4[6] = 1528.2507583586;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 638.138381;
      doubleArray5[3] = 1442.322349;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = (-3704.0121389032);
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-25.815982676209);
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-681);
      doubleArray0[1] = (double) (-681);
      doubleArray0[2] = (double) (-681);
      doubleArray0[3] = (double) (-681);
      doubleArray0[4] = (double) (-681);
      doubleArray0[5] = (double) (-681);
      int[] intArray0 = new int[5];
      intArray0[0] = (-681);
      intArray0[1] = (-681);
      intArray0[2] = (-681);
      intArray0[3] = (-681);
      intArray0[4] = (-681);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 13;
      intArray1[1] = (-681);
      intArray1[2] = (-681);
      intArray1[3] = (-681);
      intArray1[4] = (-681);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-681), (-681), (-681), doubleArray0, intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -681x-681
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = (-1541);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-1541), (-1541), (-1541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1541x-1541
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 1847;
      doubleArray0[2] = (double) 1847;
      doubleArray0[3] = (double) 33;
      doubleArray0[4] = (double) 33;
      doubleArray0[5] = (double) 33;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(33, 33, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      byte byte0 = (byte) (-66);
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray1.length);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZeroInColumn(1059, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((byte) (-66), (-1135.4511578086797));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 989.54674;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(989.54674, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(989.54674, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.matrix.sparse.CRSMatrix$4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-4434);
      intArray0[4] = (-4434);
      intArray0[5] = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1, doubleArray0, intArray0, intArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 1, 1, (-4434), (-4434), 1}, intArray0);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      
      double double0 = cRSMatrix0.minInRow(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 1, 1, (-4434), (-4434), 1}, intArray0);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1114);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, (-1114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1114
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 325, 325);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(325, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      // Undeclared exception!
      ((CRSMatrix) rowMajorSparseMatrix0).setAll((-631.66551));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 2162.1964542565);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(9);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.1111111111111111, cRSMatrix1.density(), 0.01);
      assertEquals(9, cRSMatrix1.cardinality());
      assertEquals(9, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(9, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1.032895433523124E30, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(2247, cCSMatrix0.columns());
      assertEquals(463, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.maxInRow(463);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2247, (-1881.4));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(2247, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals((-1881.4), cRSMatrix1.min(), 0.01);
      assertEquals(2247, cRSMatrix1.rows());
      assertEquals(2247, cRSMatrix1.cardinality());
      assertEquals(4.450378282153983E-4, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).minInRow(2247);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2247
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(983, 983);
      assertNotNull(cRSMatrix0);
      assertEquals(983, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.swapColumns(4, 474);
      assertEquals(983, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(983, 983);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(983, cRSMatrix1.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix1.density(), 0.01);
      assertEquals(983, cRSMatrix1.rows());
      assertEquals(983, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(983.0, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      int int0 = 325;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 325, 325);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(325, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      
      byte[] byteArray0 = ((CRSMatrix) rowMajorSparseMatrix0).toBinary();
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(byteArray0);
      assertEquals(1317, byteArray0.length);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(325, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(325, 30, 325);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '325' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(0, 0, (double[]) null);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      
      VectorProcedure vectorProcedure0 = null;
      int int0 = 3;
      // Undeclared exception!
      try { 
        cRSMatrix1.copyOfShape(4, (-2976));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-2976
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      int int0 = (-3795);
      int int1 = 2028;
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-3795), 2028);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3795
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(418, 418, 1.1102230246251565E-14, (Random) mockRandom0);
      assertNotNull(sparseMatrix0);
      assertEquals(418, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(418, sparseMatrix0.cardinality());
      assertEquals(418, sparseMatrix0.rows());
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
      assertEquals(0.0023923444976076554, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      ((CRSMatrix) sparseMatrix0).each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 2247;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(463, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2247, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.identity(463);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(463, cRSMatrix1.columns());
      assertEquals(463, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(463, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0021598272138228943, cRSMatrix1.density(), 0.01);
      
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(463, 2247);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(463, cRSMatrix2.cardinality());
      assertEquals(0.0021598272138228943, cRSMatrix2.density(), 0.01);
      assertEquals(463, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(463, cRSMatrix2.columns());
      assertEquals(2247.0, cRSMatrix2.max(), 0.01);
      
      // Undeclared exception!
      cRSMatrix2.setAll(60.0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 983;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(983, 983);
      assertNotNull(cRSMatrix0);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(983, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(11, 11);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(983, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(11, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(11, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertSame(cRSMatrix2, cRSMatrix0);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(983, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(983, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(983, cRSMatrix2.rows());
      assertEquals(983.0, cRSMatrix2.max(), 0.01);
      assertEquals(983, cRSMatrix2.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix2.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)11, (double)0, (double)11, (double)983, 1162.07890852).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transformColumn(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = new CRSMatrix(424, 424);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(424, cRSMatrix0.rows());
      assertEquals(424, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 424;
      intArray0[1] = 424;
      intArray0[2] = 2;
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(2);
      assertNotNull(vectorIterator0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(424, cRSMatrix0.rows());
      assertEquals(424, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int int1 = (-1080);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(424);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(424, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(424, cRSMatrix1.columns());
      assertEquals(424, cRSMatrix1.rows());
      assertEquals(0.0023584905660377358, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Bn_zrx:CaihHACe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(0, 0, 0);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertNotNull(cCSMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-17), (-17));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 2247;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2247, denseMatrix0.rows());
      assertEquals(463, denseMatrix0.columns());
      
      cRSMatrix0.is(matrixPredicate0);
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      assertNotNull(cRSMatrix0);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double double0 = 1.0;
      int int0 = (-1810);
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertNotNull(matrixIterator0);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 60;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(60, 56, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(30);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(30, cRSMatrix1.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(30.0, cRSMatrix1.max(), 0.01);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)RowMajorSparseMatrix.zero(325, 325, 325);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(325, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(325, cRSMatrix2.rows());
      
      double double0 = cRSMatrix1.max();
      assertEquals(30.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(30, cRSMatrix1.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(30.0, cRSMatrix1.max(), 0.01);
      
      int int0 = 0;
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix1.power(0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(30, cRSMatrix1.cardinality());
      assertEquals(0.03333333333333333, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(30.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(30, cRSMatrix3.columns());
      assertEquals(0.03333333333333333, cRSMatrix3.density(), 0.01);
      assertEquals(30, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(1.0, cRSMatrix3.max(), 0.01);
      assertEquals(30, cRSMatrix3.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 483);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(483, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(483, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(483, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      double double0 = ((CRSMatrix) rowMajorSparseMatrix0).minInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).getOrElse(32, 589, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '589' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 463;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(3, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      assertNotNull(sparseMatrix0);
      assertEquals(3, sparseMatrix0.cardinality());
      assertEquals(3, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.2, sparseMatrix0.max(), 0.01);
      assertEquals(463, sparseMatrix0.columns());
      
      // Undeclared exception!
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      Iterator<Integer> iterator0 = cRSMatrix1.iteratorOfNonZeroRows();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(iterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix3);
      assertEquals(0, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertTrue(cRSMatrix3.isRowMajor());
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)RowMajorSparseMatrix.zero(0, 32, 0);
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix4);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertEquals(0, cRSMatrix4.rows());
      assertEquals(Double.NaN, cRSMatrix4.density(), 0.01);
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(32, cRSMatrix4.columns());
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      
      double double1 = cRSMatrix2.max();
      assertEquals(0.0, double1, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix4);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      
      int int0 = 48;
      // Undeclared exception!
      try { 
        cRSMatrix2.getRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(463, 2247);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(463, cRSMatrix0.rows());
      assertEquals(2247, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(463);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 464
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(0, 0, (double[]) null);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(17, vectorProcedure0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(2085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2085
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(27, 27);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(27, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(27, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix2 = new CRSMatrix(998, 0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertEquals(998, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(260);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, compressedVector0.length());
      assertEquals(0.001002004008016032, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachNonZeroInRow(0, vectorProcedure0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(998, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      CRSMatrix cRSMatrix3 = CRSMatrix.diagonal(1, 0.0);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(1.0, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(1, cRSMatrix3.columns());
      assertEquals(1, cRSMatrix3.rows());
      
      CRSMatrix cRSMatrix4 = new CRSMatrix(1, 260, 1);
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix4);
      assertEquals(1, cRSMatrix4.rows());
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(260, cRSMatrix4.columns());
      assertEquals(0.0, cRSMatrix4.density(), 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1855;
      intArray0[2] = (-130);
      CRSMatrix cRSMatrix5 = (CRSMatrix)cRSMatrix3.removeColumn(0);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix4));
      assertNotNull(cRSMatrix5);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix5);
      assertNotSame(cRSMatrix5, cRSMatrix2);
      assertNotSame(cRSMatrix5, cRSMatrix0);
      assertNotSame(cRSMatrix5, cRSMatrix1);
      assertNotSame(cRSMatrix5, cRSMatrix3);
      assertNotSame(cRSMatrix5, cRSMatrix4);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(1.0, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(1, cRSMatrix3.columns());
      assertEquals(1, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix5.columns());
      assertEquals(Double.NaN, cRSMatrix5.density(), 0.01);
      assertEquals(0.0, cRSMatrix5.min(), 0.01);
      assertEquals(1, cRSMatrix5.rows());
      assertEquals(0, cRSMatrix5.cardinality());
      assertEquals(0.0, cRSMatrix5.max(), 0.01);
      assertTrue(cRSMatrix5.isRowMajor());
      
      CompressedVector compressedVector1 = (CompressedVector)cRSMatrix3.getColumn(1875);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix5));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix5);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(1.0, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(1, cRSMatrix3.columns());
      assertEquals(1, cRSMatrix3.rows());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 325, 325);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(325, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      double double0 = cRSMatrix0.max();
      assertEquals(30.0, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(byteArray0);
      assertEquals(497, byteArray0.length);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(30.0, cRSMatrix0.max(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.03333333333333333, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(4009, byteArray0.length);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(998, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '999' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix1.getColumn((-1294));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      
      VectorIterator vectorIterator0 = cRSMatrix1.nonZeroIteratorOfRow(0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(vectorIterator0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(6, cRSMatrix1.columns());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(6, 5);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(5, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(6, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      cRSMatrix2.setAll(1303.82413691);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(5, cRSMatrix2.columns());
      assertEquals(30, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(6, cRSMatrix2.rows());
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(1303.82413691, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      double double1 = cRSMatrix2.min();
      assertEquals(0.0, double1, 0.01);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(5, cRSMatrix2.columns());
      assertEquals(30, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(6, cRSMatrix2.rows());
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(1303.82413691, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2247, denseMatrix0.rows());
      assertEquals(463, denseMatrix0.columns());
      
      boolean boolean0 = cRSMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2247, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      assertNotNull(cRSMatrix0);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 60;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(2);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(8, cRSMatrix1.cardinality());
      assertEquals(0.09876543209876543, cRSMatrix1.density(), 0.01);
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(81.0, cRSMatrix1.max(), 0.01);
      assertEquals(9, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      
      double double0 = cRSMatrix0.minInRow(3);
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, (-7548.0));
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals((-7548.0), cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(148, 260, 148);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(260, cRSMatrix1.columns());
      assertEquals(148, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = (-2671);
      intArray0[2] = 6;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2671' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(8, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      assertNotNull(sparseMatrix0);
      assertEquals(0.7, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.forEach(consumer0);
      assertEquals(0.7, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.7, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      assertNotNull(cRSMatrix0);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.5, cRSMatrix1.density(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(2.0, cRSMatrix1.max(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(10, (double) 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 30;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(631);
      assertNotNull(cRSMatrix0);
      assertEquals(631, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.001584786053882726, cRSMatrix0.density(), 0.01);
      assertEquals(631, cRSMatrix0.columns());
      assertEquals(631, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      cRSMatrix0.setRow(30, (double) 5068);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2688.6048398444464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2688.6048398444464;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2688.6048398444464;
      doubleArray2[3] = 2688.6048398444464;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-91);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)59;
      intArray0[1] = (int) (byte) (-91);
      intArray0[2] = (int) (byte)59;
      intArray0[3] = 55;
      intArray0[4] = (int) (byte) (-91);
      intArray0[5] = (-2194);
      intArray0[6] = (int) (byte)59;
      intArray0[7] = 2;
      intArray0[8] = 4385;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((byte)59, (byte)59, 4385, doubleArray2, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 3481.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = (-684);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-684));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(17);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(17, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.058823529411764705, cRSMatrix1.density(), 0.01);
      
      cRSMatrix1.setRow(0, (double) 17);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(33, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(17.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorIterator vectorIterator0 = cRSMatrix1.iteratorOfRow(0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(vectorIterator0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(33, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(17.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      double double0 = cRSMatrix1.max();
      assertEquals(17.0, double0, 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(33, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.rows());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(17.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(417, 2.0);
      assertNotNull(cRSMatrix0);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.002398081534772182, cRSMatrix0.density(), 0.01);
      assertEquals(417, cRSMatrix0.cardinality());
      assertEquals(417, cRSMatrix0.columns());
      assertEquals(417, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.002398081534772182, cRSMatrix0.density(), 0.01);
      assertEquals(417, cRSMatrix0.cardinality());
      assertEquals(417, cRSMatrix0.columns());
      assertEquals(417, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      int[] intArray0 = new int[0];
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(8, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(8, sparseMatrix0.cardinality());
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.7, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.rows());
      
      // Undeclared exception!
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(996, 1, 1);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(996, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertNotNull(compressedVector0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(996, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(996, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(1, (-2350));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-2350
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 14);
      assertNotNull(cRSMatrix0);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(14.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(148, 220, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(148, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(220, cRSMatrix1.columns());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertEquals(2, intArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(14.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix2.cardinality());
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(2, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(14.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(2, cRSMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.fromBinary(byteArray0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertEquals(17, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix2.toColumnMajorSparseMatrix();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(17, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertEquals(0, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)RowMajorSparseMatrix.zero(0, 0, 0);
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix4);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(0, cRSMatrix4.rows());
      assertEquals(0, cRSMatrix4.columns());
      assertEquals(Double.NaN, cRSMatrix4.density(), 0.01);
      assertEquals(0, cRSMatrix4.cardinality());
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      
      double double1 = cRSMatrix3.max();
      assertEquals(0.0, double1, 0.01);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertEquals(0, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.rows());
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)RowMajorSparseMatrix.zero(0, 0, 0);
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix3));
      assertNotNull(cRSMatrix4);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(0, cRSMatrix4.rows());
      assertEquals(Double.NaN, cRSMatrix4.density(), 0.01);
      assertEquals(0, cRSMatrix4.columns());
      
      double double1 = cRSMatrix3.max();
      assertEquals(0.0, double1, 0.01);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.rows());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(0, 0);
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      
      int int0 = 0;
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 5);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.setAll(1303.82413691);
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(1303.82413691, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double double0 = cRSMatrix0.maxInRow(0);
      assertEquals(1303.82413691, double0, 0.01);
      assertEquals(30, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(1303.82413691, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      double double0 = 2688.6048398444464;
      doubleArray1[0] = 2688.6048398444464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2688.6048398444464;
      doubleArray2[1] = 0.0;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.75, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(2);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(6, doubleArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.75, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(4, cRSMatrix1.cardinality());
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(8.0, cRSMatrix1.max(), 0.01);
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(2, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldColumns(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int int0 = 13;
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(0);
      assertNotNull(vectorIterator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(13, (-2442), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = (-1);
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1), (-1), (-2645.63053714), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(27, 27);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(27, cRSMatrix1.rows());
      assertEquals(27, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix2 = new CRSMatrix(998, 40);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertEquals(998, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(40, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(260);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.001002004008016032, compressedVector0.density(), 0.01);
      assertEquals(998, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix3 = CRSMatrix.diagonal(1, 0.0);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertEquals(1.0, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(1, cRSMatrix3.columns());
      assertEquals(1, cRSMatrix3.rows());
      
      CRSMatrix cRSMatrix4 = new CRSMatrix(1, 260, 1);
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix4.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix4);
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(260, cRSMatrix4.columns());
      assertEquals(1, cRSMatrix4.rows());
      assertEquals(0.0, cRSMatrix4.density(), 0.01);
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(0, cRSMatrix4.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)cRSMatrix3.getColumn((-4421));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix4));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(1, cRSMatrix3.columns());
      assertEquals(1, cRSMatrix3.rows());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(472, 472, 100.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = 998;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(998, 998);
      assertNotNull(cRSMatrix0);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(16, 16);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(998, cRSMatrix0.rows());
      assertEquals(0.001002004008016032, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(998, cRSMatrix0.cardinality());
      assertEquals(998.0, cRSMatrix0.max(), 0.01);
      assertEquals(998, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(16, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(16, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      int int1 = 0;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextDouble();
      assertEquals(0.1, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorOperation<Vector> vectorOperation0 = ooPlaceVectorsSubtraction0.partiallyApply((SparseVector) compressedVector0);
      assertNotNull(vectorOperation0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("i)JUb)e0sXDN~sg;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 1, 1);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double double0 = ((CRSMatrix) rowMajorSparseMatrix0).minInRow(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      cRSMatrix0.setRow(0, (double) 0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-4017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      double[][] doubleArray0 = new double[0][1];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 0, 2881.4522982, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(239, 13, (-1394.1), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 989.54674;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(989.54674, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.5, cRSMatrix1.density(), 0.01);
      assertEquals(989.54674, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      
      double double0 = rowMajorSparseMatrix0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      
      double double1 = ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(325, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll(0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-606.500357948);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (byte) (-66);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = 2407.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-606.500357948), cRSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(2407.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZeroInColumn((-2929), vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-606.500357948), cRSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(2407.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2212, 4347.25);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(2212, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2212, cRSMatrix1.rows());
      assertEquals(4.520795660036166E-4, cRSMatrix1.density(), 0.01);
      assertEquals(2212, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(4347.25, cRSMatrix1.max(), 0.01);
      
      cRSMatrix0.setAll(314.5507759198);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(314.5507759198, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.set(1545, 616, (-606.500357948));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1545' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 260);
      assertNotNull(cRSMatrix0);
      assertEquals(4, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(260.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(148, 260, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(260, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(148, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertEquals(2, intArray0.length);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(260, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(148, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(2, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(30, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3820;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3820;
      doubleArray0[4] = (double) 3820;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3820;
      doubleArray0[7] = (double) 3820;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3820, 0, doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3820.0, 0.0, 3820.0, 3820.0, 0.0, 3820.0, 3820.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3820, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertNotNull(cRSMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 3820.0, 0.0, 3820.0, 3820.0, 0.0, 3820.0, 3820.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3820, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(3820, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertEquals(8, doubleArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertArrayEquals(new double[] {0.0, 3820.0, 0.0, 3820.0, 3820.0, 0.0, 3820.0, 3820.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3820, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(3820, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(7640, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(3806);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertEquals(3806, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(3806, cRSMatrix3.rows());
      assertEquals(1.0, cRSMatrix3.max(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(3806, cRSMatrix3.cardinality());
      assertEquals(2.627430373095113E-4, cRSMatrix3.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      SparseMatrix.random(463, 463, 0.9813501183989392, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-1073741824), 2.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(321, (-2781), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 321x-2781
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(983, 983);
      assertNotNull(cRSMatrix0);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(11, 11);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.rows());
      assertEquals(11, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(11, cRSMatrix1.columns());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(983, cRSMatrix2.rows());
      assertEquals(983.0, cRSMatrix2.max(), 0.01);
      assertEquals(983, cRSMatrix2.columns());
      assertEquals(983, cRSMatrix2.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix2.density(), 0.01);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix1.power(11);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertEquals(983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(983.0, cRSMatrix0.max(), 0.01);
      assertEquals(983, cRSMatrix0.cardinality());
      assertEquals(0.001017293997965412, cRSMatrix0.density(), 0.01);
      assertEquals(983, cRSMatrix0.rows());
      assertEquals(11, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(11, cRSMatrix1.columns());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(11, cRSMatrix3.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0.0, cRSMatrix3.density(), 0.01);
      assertEquals(11, cRSMatrix3.columns());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2247, 463);
      assertNotNull(cRSMatrix0);
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(463, denseMatrix0.columns());
      assertEquals(2247, denseMatrix0.rows());
      
      boolean boolean0 = cRSMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(2247, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(463, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(30, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2703.0656111419);
      doubleArray1[1] = (double) 30;
      doubleArray1[2] = (double) 30;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(3, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(30.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals((-2703.0656111419), cRSMatrix1.min(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2703.0656111419), (-1634.0));
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix0 = Matrix.random(30, 30, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(30, matrix0.rows());
      assertEquals(30, matrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(673, 673, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '673' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      double[][] doubleArray1 = new double[8][2];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray1[5] = doubleArray3;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      assertNotNull(cRSMatrix0);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-3306), (-3306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3306x-3306
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("%B`Q<ZSo=3I/_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1847, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(1847, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 1847;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 14);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(14.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(148, 260, 6);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(260, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(148, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertEquals(2, intArray0.length);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(260, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(148, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(2, cRSMatrix2.columns());
      assertEquals(2, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.setAll(989.54674);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(989.54674, cRSMatrix0.max(), 0.01);
      
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((byte) (-91), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -91
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 2162.1964542565);
      assertNotNull(cRSMatrix0);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(2162.1964542565, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(2162.1964542565, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = 4;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(59, 4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 463;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(463, 463, 1.1102230246251565E-14, (Random) mockRandom0);
      assertNotNull(sparseMatrix0);
      assertEquals(463, sparseMatrix0.cardinality());
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
      assertEquals(0.0021598272138228943, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(463, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(463, sparseMatrix0.rows());
      
      // Undeclared exception!
      sparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      
      double[] doubleArray0 = new double[1];
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)RowMajorSparseMatrix.zero(0, 0, 0);
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix4);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertEquals(Double.NaN, cRSMatrix4.density(), 0.01);
      assertTrue(cRSMatrix4.isRowMajor());
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(0, cRSMatrix4.columns());
      assertEquals(0, cRSMatrix4.rows());
      
      double double1 = cRSMatrix3.max();
      assertEquals(0.0, double1, 0.01);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      
      CRSMatrix cRSMatrix5 = CRSMatrix.from1DArray(0, 5782, doubleArray0);
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix5);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix5, cRSMatrix3);
      assertNotSame(cRSMatrix5, cRSMatrix2);
      assertNotSame(cRSMatrix5, cRSMatrix0);
      assertNotSame(cRSMatrix5, cRSMatrix4);
      assertNotSame(cRSMatrix5, cRSMatrix1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(5782, cRSMatrix5.columns());
      assertEquals(0, cRSMatrix5.rows());
      assertEquals(0.0, cRSMatrix5.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix5.density(), 0.01);
      assertEquals(0, cRSMatrix5.cardinality());
      assertEquals(0.0, cRSMatrix5.max(), 0.01);
      assertTrue(cRSMatrix5.isRowMajor());
      
      String string0 = cRSMatrix5.mkString("l/e}`nDm", "No rows or columns selected.");
      assertEquals("", string0);
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix3));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix5.equals((Object)cRSMatrix1));
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix5, cRSMatrix3);
      assertNotSame(cRSMatrix5, cRSMatrix2);
      assertNotSame(cRSMatrix5, cRSMatrix0);
      assertNotSame(cRSMatrix5, cRSMatrix4);
      assertNotSame(cRSMatrix5, cRSMatrix1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(5782, cRSMatrix5.columns());
      assertEquals(0, cRSMatrix5.rows());
      assertEquals(0.0, cRSMatrix5.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix5.density(), 0.01);
      assertEquals(0, cRSMatrix5.cardinality());
      assertEquals(0.0, cRSMatrix5.max(), 0.01);
      assertTrue(cRSMatrix5.isRowMajor());
      
      VectorProcedure vectorProcedure0 = null;
      CRSMatrix cRSMatrix6 = (CRSMatrix)cRSMatrix0.power(209);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix5));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix6.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix6.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix6.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix6.equals((Object)cRSMatrix5));
      assertTrue(cRSMatrix6.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix6.equals((Object)cRSMatrix4));
      assertNotNull(cRSMatrix6);
      assertNotSame(cRSMatrix0, cRSMatrix6);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix5);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix6, cRSMatrix4);
      assertNotSame(cRSMatrix6, cRSMatrix0);
      assertNotSame(cRSMatrix6, cRSMatrix2);
      assertNotSame(cRSMatrix6, cRSMatrix1);
      assertNotSame(cRSMatrix6, cRSMatrix5);
      assertNotSame(cRSMatrix6, cRSMatrix3);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix6.cardinality());
      assertTrue(cRSMatrix6.isRowMajor());
      assertEquals(0.0, cRSMatrix6.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix6.density(), 0.01);
      assertEquals(0, cRSMatrix6.columns());
      assertEquals(0, cRSMatrix6.rows());
      assertEquals(0.0, cRSMatrix6.min(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix4));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix5));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix6));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix6);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix5);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cRSMatrix3.set((-2535), 2048, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2535' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 2;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(37, 0.0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(500);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(500, compressedVector0.length());
      
      VectorOperation<Vector> vectorOperation0 = ooPlaceVectorsSubtraction0.partiallyApply((SparseVector) compressedVector0);
      assertNotNull(vectorOperation0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(500, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)cRSMatrix0.getRow(32);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(37, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("<A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 4, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 14, (double[]) null, (int[]) null, (int[]) null);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      assertEquals(0.3888888888888889, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(14, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = (-240);
      double double0 = (-2586.3);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byte byte1 = (byte)104;
      byteArray0[1] = (byte)104;
      byte byte2 = (byte)6;
      byteArray0[2] = (byte)6;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte byte3 = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byte byte4 = (byte) (-50);
      byteArray0[4] = (byte) (-50);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      double double1 = mockRandom0.nextGaussian();
      assertEquals(0.2, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, (-240), (-2586.3), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      assertNotNull(cRSMatrix0);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.rows());
      
      double double0 = 1.0;
      int int0 = (-1810);
      int int1 = 0;
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertNotNull(matrixIterator0);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.rows());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1810)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals((-1810.0), cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.rows());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 60;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(60, 56, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 5);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      cRSMatrix0.setAll(6);
      assertEquals(6.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(6.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double double1 = cRSMatrix0.maxInRow(5);
      assertEquals(6.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(30, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(325, 0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      String string0 = rowMajorSparseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n325 0 0\n", string0);
      assertNotNull(string0);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).eachNonZeroInRow(0, vectorProcedure0);
      assertEquals(325, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n325 0 0\n");
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(325, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 951;
      intArray0[3] = 0;
      intArray0[4] = 55;
      intArray0[5] = 325;
      CRSMatrix cRSMatrix0 = new CRSMatrix(951, 951, 11, doubleArray0, intArray0, intArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {11, 11, 951, 0, 55, 325}, intArray0);
      assertEquals(11, cRSMatrix0.cardinality());
      assertEquals(1.2162746392363565E-5, cRSMatrix0.density(), 0.01);
      assertEquals(951, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(951, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(0, (double) 325, (Random) null);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)RowMajorSparseMatrix.diagonal(0, 675.0);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(964, 531.484059377357);
      assertNotNull(cRSMatrix0);
      assertEquals(964, cRSMatrix0.columns());
      assertEquals(531.484059377357, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(964, cRSMatrix0.rows());
      assertEquals(0.001037344398340249, cRSMatrix0.density(), 0.01);
      assertEquals(964, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(964, 964);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(964, cRSMatrix0.columns());
      assertEquals(531.484059377357, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(964, cRSMatrix0.rows());
      assertEquals(0.001037344398340249, cRSMatrix0.density(), 0.01);
      assertEquals(964, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(964, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(964, cRSMatrix1.columns());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(964);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(964, cRSMatrix2.rows());
      assertEquals(964, cRSMatrix2.columns());
      assertEquals(964, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.001037344398340249, cRSMatrix2.density(), 0.01);
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix2.foldNonZeroInColumn(27, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(964, cRSMatrix2.rows());
      assertEquals(964, cRSMatrix2.columns());
      assertEquals(964, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.001037344398340249, cRSMatrix2.density(), 0.01);
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      
      int int0 = (-481);
      // Undeclared exception!
      try { 
        cRSMatrix2.power((-481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -481.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-500), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -500x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 0.0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      Matrix matrix0 = cRSMatrix0.add(1.0);
      assertNotNull(matrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 9);
      assertNotNull(sparseVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(9, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(9, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix1.foldColumns(vectorAccumulator0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-2290), 973);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2290x973
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(30, 30, 30);
      assertNotNull(cRSMatrix0);
      assertEquals(30, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toRowVector();
      assertNotNull(compressedVector0);
      assertEquals(30, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(30, cRSMatrix0.columns());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(30, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(30, 30);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix1.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(30, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(30, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      int int0 = 3904;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3904, 2314.4810957187415);
      assertNotNull(cRSMatrix0);
      assertEquals(3904, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3904, cRSMatrix0.rows());
      assertEquals(3904, cRSMatrix0.cardinality());
      assertEquals(2.5614754098360657E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2314.4810957187415, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[] doubleArray0 = new double[1];
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      assertEquals(1, doubleArray0.length);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorOperation<Vector> vectorOperation0 = ooPlaceVectorsSubtraction0.partiallyApply((SparseVector) compressedVector0);
      assertNotNull(vectorOperation0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        cRSMatrix1.getRow((-375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -374
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
