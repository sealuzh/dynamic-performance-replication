/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:35:28 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.BooleanCodec;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Rpo", parserConfig0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ;, pos 1, json : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(Ljava/lang/Class;)Ljava/util/Collection;");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Class;)Ljava/util/Collection;");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Boolean boolean0 = Boolean.TRUE;
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Apt9W|pDVHO", 4578);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=", parserConfig0, 3809);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : =
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",[acUhaH7");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", 1);
      TimeZone.getTimeZone("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("N/{N,81+D(U4@Pl1`R", false);
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}W;9>v>jR", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(", parserConfig0, 0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "(", (Object) parserConfig0);
      assertNotNull(parseContext0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.parse((Object) parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}!VT*oR53<`q~");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      defaultJSONParser0.getInput();
      List<ExtraProcessor> list0 = new Vector<ExtraProcessor>();
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ;, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      parserConfig0.setDefaultClassLoader(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fstjson.util.ASClass1oader", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : com.alibaba.fstjson.util.ASClass1oader
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j)',l)N>LfN:`P");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "j)',l)N>LfN:`P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : j)',l)N>LfN:`P
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Long> class0 = Long.class;
      JSON.parseArray("", class0);
      BooleanCodec booleanCodec0 = BooleanCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.putDeserializer(class0, booleanCodec0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 124);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, ");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j)',l)N>LfN:`P");
      defaultJSONParser0.setResolveStatus(39);
      assertEquals(39, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u0BIT");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateInstance(0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) mockDateFormat0);
      parseContext0.toString();
      defaultJSONParser0.setContext((ParseContext) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : u0BIT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.}2.46");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.}2.46");
      defaultJSONParser0.getResolveTaskList();
      BigDecimal bigDecimal0 = new BigDecimal(2);
      Hashtable<BigInteger, Rectangle> hashtable0 = new Hashtable<BigInteger, Rectangle>();
      defaultJSONParser0.checkMapResolve(hashtable0, "1.}2.46");
      defaultJSONParser0.getObject("1.}2.46");
      TimeZone timeZone0 = TimeZone.getDefault();
      defaultJSONParser0.handleResovleTask(timeZone0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("wF4tO_-k'Z19CZmpYC", parserConfig0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Class<Object> class0 = Object.class;
      Object object0 = defaultJSONParser0.parseObject(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}!VT*oR53<`q~");
      JSONScanner jSONScanner1 = new JSONScanner("}!VT*oR53<`q~", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner1);
      defaultJSONParser0.setContext((Object) jSONScanner1, (Object) jSONScanner0);
      defaultJSONParser0.resolveReference(", name ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      defaultJSONParser0.getDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) jSONScanner1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual }, pos 0, fieldName com.alibaba.fastjson.parser.JSONScanner@2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "@type";
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getLexer();
      defaultJSONParser0.getDateFormat();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ");
      defaultJSONParser0.getSymbolTable();
      Feature feature0 = Feature.InternFieldNames;
      defaultJSONParser0.config(feature0, true);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getResolveTaskList();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      LinkedHashSet<DateFormatSymbols> linkedHashSet0 = new LinkedHashSet<DateFormatSymbols>();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      assertTrue(dateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("", 20);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Locale locale0 = Locale.TAIWAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      defaultJSONParser0.handleResovleTask(breakIterator0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addAccept("$.org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@4f76f1a0.com.alibaba.fastjson.parser.ParserConfig@97");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}!V*o8R3`", parserConfig0, 1295);
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.getDateFomartPattern();
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.config(feature0, true);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s`,BhM/_oBSR0g>4C{", parserConfig0);
      LinkedList<RuleBasedCollator> linkedList0 = new LinkedList<RuleBasedCollator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone.getTimeZone("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      TimeZone.getTimeZone("fastjson.parser.autoTypeSupport");
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-4763));
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Class<Long> class0 = Long.TYPE;
      Class<Boolean> class1 = Boolean.TYPE;
      BooleanCodec booleanCodec0 = BooleanCodec.instance;
      parserConfig0.putDeserializer(class1, booleanCodec0);
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("C&bg:$/Bi35h8l");
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.isEnabled(feature0);
      Feature feature1 = Feature.InternFieldNames;
      defaultJSONParser0.config(feature1, true);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2QJ3V-kqQ*\"", parserConfig0, 3392903);
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertTrue(dateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[9];
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 7, parserConfig0, 7);
      LinkedList<Collator> linkedList0 = new LinkedList<Collator>();
      defaultJSONParser0.checkListResolve(linkedList0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")B");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6^)5pQ8", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      Class<Object> class0 = Object.class;
      Object object0 = defaultJSONParser0.parseObject(class0);
      assertEquals(6, object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}!VT*oR53<`q~");
      JSONScanner jSONScanner1 = new JSONScanner("}!VT*oR53<`q~", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}!VT*oR53<`q~");
      Locale locale0 = Locale.TAIWAN;
      defaultJSONParser0.setResolveStatus(0);
      Stack<MockMinguoDate> stack0 = new Stack<MockMinguoDate>();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) stack0, (Object) locale0);
      assertNotNull(parseContext0);
      
      LinkedHashMap<MapDeserializer, MockHijrahDate> linkedHashMap0 = new LinkedHashMap<MapDeserializer, MockHijrahDate>();
      Object object0 = defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) jSONScanner0);
      assertNotNull(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      LinkedHashSet<DateFormatSymbols> linkedHashSet0 = new LinkedHashSet<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      int int0 = 13;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 13);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setCurrencySymbol("b-69%`}Sx:q]L-mac");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "unterminated json string, ";
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u0BIT");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.parseKey();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<Date, ParameterizedTypeImpl> treeMap0 = new TreeMap<Date, ParameterizedTypeImpl>();
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect [, actual ", parserConfig0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(false, false);
      Boolean.logicalAnd(true, false);
      Class<Feature> class0 = Feature.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}!VT*oR53<`q~");
      JSONScanner jSONScanner1 = new JSONScanner("}!VT*oR53<`q~", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale0 = Locale.TAIWAN;
      defaultJSONParser0.setResolveStatus(121);
      Stack<MockMinguoDate> stack0 = new Stack<MockMinguoDate>();
      defaultJSONParser0.checkListResolve(stack0);
      defaultJSONParser0.setDateFormat(";C)Ljava/lang/Enum;");
      assertEquals(121, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashMap<Byte, DecimalFormat> linkedHashMap0 = new LinkedHashMap<Byte, DecimalFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("wBv");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getFieldTypeResolver();
      LinkedHashMap<Byte, DecimalFormat> linkedHashMap1 = new LinkedHashMap<Byte, DecimalFormat>();
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        Collator.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.compatibleWithJavaBean = false;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",KiC,KiOk&,{LFlf", (-2064));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getConfig();
      TreeMap<Insets, Object> treeMap0 = new TreeMap<Insets, Object>();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,KiC,KiOk&,{LFlf
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, (-4868));
      Hashtable<JavaBeanDeserializer, Collator> hashtable0 = new Hashtable<JavaBeanDeserializer, Collator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.context;
      Object object1 = new Object();
      ParseContext parseContext1 = new ParseContext((ParseContext) null, object1, parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "yyyy-MM-dd HH:mm:ss");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")B");
      SymbolTable symbolTable0 = null;
      jSONScanner0.token = (-1504);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getLexer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )B
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("a.IK", parserConfig0);
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(false);
      defaultJSONParser0.setContext((ParseContext) null, object1, (Object) jSONObject0);
      defaultJSONParser0.getObject("yyyy-MM-dd HH:mm:ss");
      defaultJSONParser0.setResolveStatus(3089);
      IdentityHashMap<Byte, DecimalFormat> identityHashMap0 = new IdentityHashMap<Byte, DecimalFormat>();
      Object object2 = new Object();
      defaultJSONParser0.popContext();
      defaultJSONParser0.getContext();
      assertEquals(3089, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",[acUaH7");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : ,[acUaH7
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.getExtraProcessors();
      Class<Object> class0 = Object.class;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[xJB%=ytdb", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u0BIT");
      PageAttributes pageAttributes0 = new PageAttributes();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.setResolveStatus((-24));
      MockDateFormat.getDateInstance(0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) mockDateFormat0);
      parseContext0.toString();
      parseContext0.toString();
      defaultJSONParser0.getFieldTypeResolver();
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.getObject("$");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.acceptType("zMMmt?}rOx[KM-@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : u0BIT
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$reCm:\".\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name $reCm:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner1);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("(os5(CA;|m!Tr%");
      Class<Object> class0 = Object.class;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("(os5(CA;|m!Tr%", parserConfig0, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (os5(CA;|m!Tr%
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",$9", parserConfig0);
      HashMap<Byte, DecimalFormat> hashMap0 = new HashMap<Byte, DecimalFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.compatibleWithJavaBean = false;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",$9", parserConfig0);
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      String string0 = "<9~";
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONLexer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : ,$9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}!VT*oR53<`q~");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getContext();
      defaultJSONParser0.resolveReference("}!VT*oR53<`q~");
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.clearDeserializers();
      defaultJSONParser0.getDateFormat();
      Properties properties0 = new Properties();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, (Object) null, properties0);
      Class<Integer> class0 = Integer.TYPE;
      IdentityHashMap<RenderingHints.Key, ParameterizedTypeImpl> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, ParameterizedTypeImpl>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      JSON.DEFAULT_PARSER_FEATURE = 2354;
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      Class<Byte> class1 = Byte.TYPE;
      Stack<String> stack0 = new Stack<String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")B");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = JSON.defaultLocale;
      locale0.toString();
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = '+';
      charArray0[2] = '0';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.getInput();
      Locale locale1 = new Locale("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", "com.alibaba.fastjson.JSONPath$Operator");
      locale1.getUnicodeLocaleKeys();
      LinkedHashSet<DateFormatSymbols> linkedHashSet0 = new LinkedHashSet<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      defaultJSONParser0.getResolveTaskList();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      defaultJSONParser0.getLexer();
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getFieldTypeResolver();
      Class<HttpCookie> class0 = HttpCookie.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Properties properties0 = new Properties();
      properties0.remove((Object) parserConfig0);
      parserConfig0.configFromPropety(properties0);
      classLoader0.setPackageAssertionStatus("N/{N,81+D(U4@Pl1`R", false);
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", false);
      Float float0 = new Float((-990.38104F));
      TreeMap<MockSimpleDateFormat, Feature> treeMap0 = new TreeMap<MockSimpleDateFormat, Feature>();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.parseArrayWithType(class0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"Y");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      ArrayList<DefaultJSONParser.ResolveTask> arrayList0 = new ArrayList<DefaultJSONParser.ResolveTask>();
      defaultJSONParser1.parse();
      boolean boolean0 = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "exepct '[', but ");
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", 2620);
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldFloat(charArray0);
      Locale locale0 = Locale.CHINESE;
      Collator.getInstance(locale0);
      LinkedHashMap<Byte, DecimalFormat> linkedHashMap0 = new LinkedHashMap<Byte, DecimalFormat>();
      System.setCurrentTimeMillis(1);
      Properties properties0 = new Properties();
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig1.configFromPropety(properties0);
      String string0 = "]";
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("]", parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "1.2.46";
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.parse();
      byte byte0 = (byte)15;
      byte[] byteArray0 = new byte[1];
      Hashtable<BigInteger, Rectangle> hashtable0 = new Hashtable<BigInteger, Rectangle>();
      defaultJSONParser0.checkMapResolve(hashtable0, "1.2.46");
      MockDateFormat.getDateInstance();
      defaultJSONParser0.getObject("1.2.46");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      JSONObject jSONObject0 = JSON.parseObject("{\"$ref\":\"..\"}");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      HashMap<Byte, DecimalFormat> hashMap0 = new HashMap<Byte, DecimalFormat>();
      Byte byte0 = new Byte((byte)24);
      hashMap0.put(byte0, decimalFormat0);
      defaultJSONParser0.parseObject((Map) hashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      defaultJSONParser0.config = parserConfig0;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      defaultJSONParser0.setConfig(parserConfig1);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : {\"$ref\":\"..\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = (-2064);
      JSONScanner jSONScanner0 = new JSONScanner(",KiC,KiOk&,{LFlf", (-2064));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getConfig();
      TreeMap<Insets, Object> treeMap0 = new TreeMap<Insets, Object>();
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"Y");
      // Undeclared exception!
      try { 
        JSON.parseObject("{\"$ref\":\"..\"Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name $ref
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      charArray0[1] = 'f';
      charArray0[2] = 'G';
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAsmEnable(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 1);
      defaultJSONParser0.getObject("fastjson.parser.deny");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      BreakIterator.getLineInstance();
      Class<Feature> class0 = Feature.class;
      EnumSet<Feature> enumSet0 = EnumSet.noneOf(class0);
      LinkedList<Feature> linkedList0 = new LinkedList<Feature>(enumSet0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0, (Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      charArray0[2] = 'G';
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAsmEnable(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 1);
      defaultJSONParser0.getObject("fastjson.parser.deny");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      BreakIterator.getLineInstance();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<DefaultJSONParser.ResolveTask> class0 = DefaultJSONParser.ResolveTask.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0, 2484);
      Class<Object> class0 = Object.class;
      defaultJSONParser0.parseObject(class0);
      System.setCurrentTimeMillis(0);
      defaultJSONParser0.getContext();
      Integer integer0 = new Integer(0);
      defaultJSONParser0.getConfig();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.setContext((ParseContext) null, (Object) integer0, (Object) parserConfig0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(":false");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
