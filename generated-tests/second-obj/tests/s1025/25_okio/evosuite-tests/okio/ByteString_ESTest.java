/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:15:24 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-24);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Object object0 = new Object();
      byteString0.equals("Gs^#T}rEDm");
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)36;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((-1452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ByteString.codePointIndexToCharIndex("[v", 1453);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.EMPTY.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)52, 431);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(7)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)119;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byte[] byteArray1 = byteString0.internalArray();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString1.lastIndexOf(byteString0);
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512((Sink) null, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.EMPTY.rangeEquals(77, byteString1, 3220, 3220);
      // Undeclared exception!
      try { 
        byteString0.getByte((-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-32);
      byteArray0[5] = (byte) (-32);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.utf8();
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[6];
      byteString0.sha256();
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      byteArray0[0] = (byte)5;
      byte byte0 = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.asByteBuffer();
      byteStringArray0[0] = byteString0;
      byteString0.EMPTY.startsWith(byteString0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString.decodeBase64(")6Lm6/<M9]:R4}|o");
      byteString0.toByteArray();
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString0.substring(105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      realBufferedSource0.indexOf((byte) (-101));
      ByteString byteString2 = byteString1.substring((int) (byte)16, (int) (byte)16);
      assertEquals(0, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)119;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("ISIZE");
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring(0, 0);
      ByteString byteString2 = byteString1.EMPTY.sha512();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-3);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)50;
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte) (-45));
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString1.equals(byteString2);
      assertEquals(5, byteString0.size());
      assertEquals(0, byteString1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)1;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteString byteString0 = ByteString.decodeBase64("SHA-512");
      assertNotNull(byteString0);
      
      String string0 = byteString0.hex();
      assertEquals("b77b3bb75d", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.lastIndexOf(byteString1, 20);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeHex("");
      byteString1.endsWith(byteString0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((byte)56);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.getByte(3191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("=xE4\",");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      try { 
        ByteString.read(sequenceInputStream0, (byte)116);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 27, 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toByteArray();
      byteString0.indexOf(byteString0, (int) (byte)49);
      String string0 = byteString0.utf8();
      assertEquals("1\u001B\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byteString0.internalArray();
      boolean boolean0 = byteString0.rangeEquals(34, (byte[]) null, (-561), (-561));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)48;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      String string0 = byteString1.base64Url();
      assertEquals("FkJOXC4WFkkw", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)13;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.rangeEquals(110, byteArray0, (int) (byte)13, 2127);
      boolean boolean0 = byteString0.rangeEquals((-1033), byteString1, 4, 9);
      assertSame(byteString1, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      Charset.defaultCharset();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      byteString0.rangeEquals((-4876), byteArray0, (int) (byte)16, (int) (byte)98);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (byte) (-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -126
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(44);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("endIndex > length(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8 = " /j~Kls{";
      byteString0.EMPTY.utf8();
      int int0 = byteString0.size();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.indexOf((byte)100);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString1.base64();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)116, (int) (byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=116 byteCount=116
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toByteArray();
      byteString0.indexOf(byteString0, (int) (byte)49);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      HashingSource hashingSource1 = HashingSource.md5(inflaterSource0);
      ByteString byteString0 = hashingSource1.hash();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-39);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString.decodeBase64("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.encodeString("zSchPnO1<QZX?,w[>1:", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":%");
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      Pipe pipe0 = new Pipe((byte)32);
      Buffer buffer0 = pipe0.buffer;
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(":%", charset0);
      String string0 = byteString0.toString();
      assertEquals("[hex=bb7b7f]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-55);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)113;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.skip(0L);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteString0.lastIndexOf(byteArray0, (-1894));
      Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)116);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteString byteString1 = ByteString.read(pipedInputStream0, (byte)0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ByteString.decodeHex(",/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ,
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)90;
      ByteString byteString1 = buffer0.sha512();
      byteString1.hashCode();
      buffer0.segmentSizes();
      byteString0.compareTo(byteString1);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource1.readByteString();
      byteString0.lastIndexOf(byteString1);
      int int0 = 8;
      ByteString byteString2 = byteString0.substring(0);
      byte byte1 = ObjectStreamConstants.SC_ENUM;
      ByteString byteString3 = byteString2.sha256();
      realBufferedSource0.buffer.segmentSizes();
      byteString1.compareTo(byteString3);
      // Undeclared exception!
      try { 
        byteString2.substring((int) (byte)16, (int) (byte)16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-118L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -118
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString.of(byteBuffer0);
      String string0 = " text=";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\n not found: limit=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 
         //  not found: limit=
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)14;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.sha256();
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      byteString2.indexOf(byteArray0);
      byteString1.startsWith(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.EMPTY.equals(byteString0);
      byteString2.md5();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString1.compareTo(byteString1);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("okio.Okio", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 2996);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " +Zl[|5ijl/ ri");
      ByteString byteString0 = ByteString.encodeUtf8("(Z*pH!-S");
      byteString0.toString();
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[text=(Z*pH!-S]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: [text=(Z*pH!-S]
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("ISIZE");
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring(0, 0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ":%";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString1.EMPTY.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("ISIZE");
      byteString0.hashCode();
      int int0 = 0;
      ByteString byteString1 = byteString0.substring(0, 0);
      String string0 = ":%";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":%");
      byteString0.base64Url();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2Q#!_ceatm.W=n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: Q
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.md5();
      ByteString byteString1 = byteString0.substring(8);
      byteString1.compareTo(byteString1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte byte0 = (byte)51;
      realBufferedSource0.indexOf((byte)51);
      Object object0 = new Object();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      hashingSink1.hash();
      Object object1 = new Object();
      Object object2 = new Object();
      byteString1.equals(object2);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = hashingSource0.hash();
      byteString1.rangeEquals((int) (byte)6, byteArray0, (int) (byte)80, (int) (byte)80);
      byteString1.hex();
      Object object0 = new Object();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      byteString2.startsWith(byteArray0);
      hashingSink0.hash();
      byteString1.equals("d41d8cd98f00b204e9800998ecf8427e");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Object object1 = new Object();
      HashingSink.md5(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Expected leading [0-9a-fA-F] character but was %#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.read(buffer0, 1L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.indexOf((byte)100);
      Object object0 = new Object();
      ByteString byteString1 = realBufferedSource1.readByteString();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString0.toString();
      byteString2.internalArray();
      // Undeclared exception!
      try { 
        byteString1.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.read(buffer0, 1L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.indexOf((byte)100);
      Object object0 = new Object();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      ByteString byteString1 = hashingSink0.hash();
      Object object1 = new Object();
      byteString0.equals(byteString1);
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      byteString2.toString();
      byteString0.toString();
      HashingSink.hmacSha256(realBufferedSource1.buffer, byteString1);
      byteString0.utf8 = "[hex=0c13f71bc63d74c602673435ff5eb61e216275f81d068fd82d0bcb84a159b896]";
      hashingSource0.hash();
      hashingSink0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString3 = ByteString.encodeString("[hex=0c13f71bc63d74c602673435ff5eb61e216275f81d068fd82d0bcb84a159b896]", charset0);
      byteString3.toString();
      Pipe pipe0 = new Pipe((byte)100);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.readByteString((long) (byte)100);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)49;
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString1.hmacSha512(byteString0);
      byteString1.toString();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Deflater deflater0 = new Deflater((byte) (-1), false);
      byteString0.endsWith(byteArray0);
      Charset.defaultCharset();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteString.codePointIndexToCharIndex(" +Zl[|5ijl/ ri", 6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " +Zl[|5ijl/ ri");
      byteArray0[5] = (byte) (-120);
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hex();
      byteString0.toString();
      byteString0.rangeEquals((int) (byte)72, byteArray0, 6, 6);
      byteString0.toAsciiUppercase();
  }
}
