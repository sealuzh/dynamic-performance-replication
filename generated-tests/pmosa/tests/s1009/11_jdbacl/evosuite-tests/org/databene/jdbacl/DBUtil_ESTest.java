/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:45:51 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.ValueRow;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.SessionRemote;
import org.h2.jdbc.JdbcCallableStatement;
import org.h2.jdbc.JdbcConnection;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.junit.runner.RunWith;
import org.postgresql.Driver;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.jdbc4.Jdbc4Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((String) null, (String) null, "");
      // Undeclared exception!
      try { 
        jdbcConnectionPool0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      String string0 = "";
      boolean boolean0 = false;
      DBUtil.checkReadOnly("", false);
      Csv csv0 = Csv.getInstance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "D$";
      csv0.setFieldSeparatorWrite("2[N{[(");
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "D$";
      try { 
        csv0.read("D$", stringArray0, "uri");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // IOException reading D$
         //
         verifyException("org.h2.tools.Csv", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "Error importing sequences", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: Error importing sequences
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      DBUtil.escape("");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.connect("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      DBUtil.available("LogToFile.checkJvmSyncError: Your JVM seems to have a problem with implicit syncing of log files. Will use explicit syncing instead.", "LogToFile.checkJvmSyncError: Your JVM seems to have a problem with implicit syncing of log files. Will use explicit syncing instead.", "", ">Q$nf6WO}>iM");
      Recover recover0 = new Recover();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">Q$nf6WO}>iM";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "LogToFile.checkJvmSyncError: Your JVM seems to have a problem with implicit syncing of log files. Will use explicit syncing instead.";
      stringArray0[4] = "LogToFile.checkJvmSyncError: Your JVM seems to have a problem with implicit syncing of log files. Will use explicit syncing instead.";
      stringArray0[5] = "";
      stringArray0[6] = ">Q$nf6WO}>iM";
      stringArray0[7] = "LogToFile.checkJvmSyncError: Your JVM seems to have a problem with implicit syncing of log files. Will use explicit syncing instead.";
      stringArray0[8] = ">Q$nf6WO}>iM";
      try { 
        Recover.main(stringArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unsupported option: >Q$nf6WO}>iM
         //
         verifyException("org.h2.util.Tool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      String string0 = "^TI<1P0H P)._xFC";
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("^TI<1P0H P)._xFC", "^TI<1P0H P)._xFC", (String) null, "^TI<1P0H P)._xFC", "k<=8.U>I]{1pi%iZ1{", "^TI<1P0H P)._xFC");
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting ^TI<1P0H P)._xFC failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.existsEnvironment(".'uaNUM\"]9Wk,F_Jd");
      String string0 = "";
      // Undeclared exception!
      try { 
        DBUtil.connect("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = SessionRemote.STATUS_OK;
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("org.apache.derby.iapi.sql.dictionary.SchemaDescriptor", level0);
      DBUtil.runScript("", (Connection) null, true, errorHandler0);
      FBArray fBArray0 = new FBArray();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = null;
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("seCatalog", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "SGH4m8O9 ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("3", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "3";
      Connection connection0 = null;
      boolean boolean0 = true;
      try { 
        DBUtil.getMetaData((Connection) null, "vCj", "MjU?fbc>uFWK4", true, false, true, true, "3", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBUtil.resetMonitors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "getLong(String)";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.countRows("getLong(String)", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = SYSTRIGGERSRowFactory.SYSTRIGGERS_TABLEID;
      Connection connection0 = null;
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      DBUtil.runScript("", (Connection) null, false, errorHandler0);
      FBArray fBArray0 = new FBArray();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ValueRow valueRow0 = new ValueRow(9);
      constantActionActivation0.getParentResultSets();
      fBArray0.getResultSet((-193L), 9, (Map) null);
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.query("8v#7o9xp", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("downloading {}", (DBCatalog) null);
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(dBSchema0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.currentLine(simpleResultSet0);
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("bB4HtmC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("F`7!Li>*N|BGW", level0);
      ErrorHandler errorHandler1 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("COMMENT", "5/Rp1Fe", (Connection) null, true, errorHandler1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: COMMENT
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      List<Object[]> list0 = DBUtil.parseResultSet(simpleResultSet0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = SessionRemote.STATUS_OK;
      String string0 = "";
      Connection connection0 = null;
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("org.apache.derby.iapi.sql.dictionary.SchemaDescriptor", level0);
      Level level1 = Level.error;
      ErrorHandler.setDefaultLevel(level1);
      DBUtil.runScript("", (Connection) null, true, errorHandler0);
      FBArray fBArray0 = new FBArray();
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("org.apache.derby.iapi.sql.dictionary.SchemaDescriptor", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "seCatalog";
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) null);
      DBUtil.nextLine(simpleResultSet0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("h, {$DR4H3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((String) null, false, true, true, true, (String) null, false, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
