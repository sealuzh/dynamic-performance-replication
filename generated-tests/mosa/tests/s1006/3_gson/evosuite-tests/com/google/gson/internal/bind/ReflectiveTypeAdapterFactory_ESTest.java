/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:04:57 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import java.io.File;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Class<ReflectiveTypeAdapterFactory.BoundField> class0 = ReflectiveTypeAdapterFactory.BoundField.class;
      TypeToken<ReflectiveTypeAdapterFactory.BoundField> typeToken0 = TypeToken.get(class0);
      TypeAdapter<ReflectiveTypeAdapterFactory.BoundField> typeAdapter0 = gson0.getAdapter(typeToken0);
      gson0.toString();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapter0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<ReflectiveTypeAdapterFactory.BoundField> class0 = ReflectiveTypeAdapterFactory.BoundField.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("\"AsJMw'(~6 E\"#-Kr", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for class com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField. Register an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Type> class0 = Type.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      gson0.fromJson(jsonElement0, (Type) class0);
      String string0 = File.separator;
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      TypeToken<MockFileInputStream> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
