/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:23:28 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Done.";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-Z'&-k03j7SG";
      Class2HTML.main(stringArray0);
      ClassPath classPath0 = new ClassPath("B(=A!");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class2HTML.referenceType("[~Z7vv_");
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class2HTML.toHTML("class");
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Method> class0 = Method.class;
      classLoader0.getParent();
      classLoaderRepository0.loadClass(class0);
      Class2HTML.toHTML("class");
      classLoader0.clearAssertionStatus();
      Class2HTML.toHTML("iWN#4a");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      JavaClass javaClass0 = syntheticRepository0.loadClass("java.lang.reflect.Type");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "-d");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class2HTML.toHTML("O8");
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoader0.setDefaultAssertionStatus(true);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setConstantPool((ConstantPool) null);
      Class2HTML class2HTML0 = null;
      try {
        class2HTML0 = new Class2HTML(javaClass0, "^pm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ConstantHTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class2HTML.toHTML("-zip");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-zip";
      stringArray0[1] = "-zip";
      String string0 = "<H4>Attributes</H4><UL>\n";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<H4>Attributes</H4><UL>\n");
      stringArray0[2] = "<H4>Attributes</H4><UL>\n";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // -zip (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate");
      Pattern.quote("-d");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate";
      stringArray0[1] = "Q-dE";
      stringArray0[2] = "Hbm.cm(r1=A<PO>C";
      stringArray0[3] = "org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate";
      stringArray0[4] = "Q-dE";
      stringArray0[5] = "org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate";
      stringArray0[6] = "Q-dE";
      stringArray0[7] = "-d";
      stringArray0[8] = "-d";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      Class2HTML.toHTML("</TITL></HEAD>\n<FRAMESET BODER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRA*E NAME=\"ConstantPool\" SRC=\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pattern.quote("&lt;/TITL&gt;&lt;/HEAD&gt;\n&lt;FRAMESET BODER=1 cols=\"30%,*\"&gt;\n&lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;\n&lt;FRA*E NAME=\"ConstantPool\" SRC=\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "</TITL></HEAD>\n<FRAMESET BODER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRA*E NAME=\"ConstantPool\" SRC=\"";
      stringArray0[3] = "</TITL></HEAD>\n<FRAMESET BODER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRA*E NAME=\"ConstantPool\" SRC=\"";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader0.setPackageAssertionStatus("...", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"";
      stringArray0[1] = "-d";
      stringArray0[2] = ")\n/";
      stringArray0[3] = "-d";
      stringArray0[4] = "-d";
      stringArray0[5] = "-d";
      classLoaderRepository0.findClass("-d");
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      Class2HTML.toHTML("</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pattern.quote("&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;FRAMESET BORDER=1 cols=\"30%,*\"&gt;\n&lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;\n&lt;FRAME NAME=\"ConstantPool\" SRC=\"");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-d";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"";
      stringArray0[6] = "&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;FRAMESET BORDER=1 cols=\"30%,*\"&gt;\n&lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;\n&lt;FRAME NAME=\"ConstantPool\" SRC=\"";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class2HTML.referenceType("short");
      ClassPath classPath0 = new ClassPath(", handler_pc = ");
      ClassPath classPath1 = new ClassPath(classPath0, "short");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setClassName("<FONT COLOR=\"#00FF00\">short</FONT>");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "java.lang.Void");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ", handler_pc = ";
      stringArray0[1] = ", handler_pc = ";
      stringArray0[2] = "<FONT COLOR=\"#00FF00\">short</FONT>";
      stringArray0[3] = "short";
      stringArray0[4] = "java.lang.Void";
      stringArray0[5] = "java.lang.Void";
      stringArray0[6] = "java.lang.Void";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
