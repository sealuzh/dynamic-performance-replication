/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:57 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(105.8237945409633, 105.8237945409633, 0.5393838235475802, 5.56023190218245E110);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getSafety();
      dormandPrince54Integrator0.clearEventHandlers();
      double double0 = dormandPrince54Integrator0.getMaxGrowth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(105.8237945409633, 105.8237945409633, 186.163007, 186.163007);
      dormandPrince54Integrator0.setMaxGrowth(105.8237945409633);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1528).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getMinReduction();
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 105.8237945409633);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1531.56094701;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1531.56094701, 1531.56094701, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxGrowth();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 0.0, 2521.652925914, (-1.3424576100819801E-291));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.3424576100819801E-291), 1534.5495007568, 2521.652925914, 1534.5495007568);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(193).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.424065351486206, 10.0, (-845.6903563277064), 186.163007);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.setMaxGrowth(5.56023190218245E110);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince54Integrator0.getOrder();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1589.96072593), 5, doubleArray0, doubleArray0);
      // Undeclared exception!
      dormandPrince54Integrator1.integrate(expandableStatefulODE0, 10.0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2938.528681725), 0.9, 1.0, 0.0);
      double double0 = (-1378.0422817285819);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(105.8237945409633, (-1378.0422817285819), 105.8237945409633, 10.0);
      dormandPrince54Integrator1.setMaxGrowth(2094.3537);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(45).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = expandableStatefulODE0.getCompleteState();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0008761540741556E-7, 1.0008761540741556E-7, doubleArray0, doubleArray0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-1378.0422817285819));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(105.8237945409633, 105.8237945409633, 1.2828508114835555, 5.56023190218245E110);
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 1.2828508114835555;
      doubleArray0[1] = 5.56023190218245E110;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-149.4));
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 105.8237945409633);
      doubleArray0[2] = 5.56023190218245E110;
      doubleArray0[3] = 1.2828508114835555;
      doubleArray0[10] = 5.56023190218245E110;
      expandableStatefulODE0.setTime(0.9);
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-2019.675));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      dormandPrince54Integrator0.getOrder();
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 2.3195229636950566E-16);
  }
}
