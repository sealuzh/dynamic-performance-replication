/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:57:32 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.SwitchTo(0);
      Token.newToken(0);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1084), (-1084));
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, (-1084), 45, 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1, 1);
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gO0uxV");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = Token.newToken(1);
      assertEquals(0, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '5';
      charArray0[2] = '%';
      charArray0[3] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2279, 18);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q7A||7oJ0$ o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = '5';
      charArray0[2] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(43);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 82. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = 'e';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = '5';
      charArray0[2] = '6';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = '5';
      charArray0[6] = 'n';
      charArray0[8] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 32;
      javaCharStream0.column = 34;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 35. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2048);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2048. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '<';
      charArray0[2] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(3034);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3034. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      char[] charArray1 = new char[5];
      charArray1[0] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      charArrayReader0.mark((-354));
      javaParserTokenManager0.SwitchTo(1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[1] = '<';
      charArray0[2] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      charArrayReader0.mark((-3578));
      charArrayReader0.mark(2);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-3943));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3943. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      char[] charArray1 = new char[20];
      charArray1[0] = '%';
      charArray1[1] = '<';
      charArray1[2] = '%';
      charArray1[4] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      charArrayReader0.mark(1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4234);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4234. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.adjustBeginLineColumn((-1), (-471));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(";");
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[5] = (byte) (-13);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      StringReader stringReader0 = new StringReader("|=");
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '<';
      charArray0[6] = '%';
      charArray0[7] = '%';
      charArray0[8] = '%';
      StringReader stringReader0 = new StringReader("&=");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      String string0 = "<DIGIT>";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("<DIGIT>", "<DIGIT>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <DIGIT>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '<';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.adjustBeginLineColumn(19, (-463));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      int int1 = 276;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-462));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -462. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = 'e';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = '6';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaCharStream0.readChar();
      charArrayReader0.read(charArray0, 1, 7);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(88);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1774));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1774. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = '%';
      char[] charArray1 = new char[5];
      charArray1[0] = 'n';
      charArray1[1] = 'C';
      charArray1[2] = '8';
      charArray1[3] = 'C';
      charArray1[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endLine = 110;
      javaCharStream0.ReadByte();
      charArrayReader0.mark(2);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      char[] charArray1 = new char[21];
      charArray1[0] = '<';
      charArray1[1] = '8';
      charArray1[4] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4234);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4234. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eBGJZF+0Xp,c[tO~bd");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[5] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 20, 97);
      javaCharStream1.AdjustBuffSize();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      javaParserTokenManager0.getNextToken();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 20, column 100.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'C';
      charArray0[2] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.readChar();
      charArrayReader0.read(charArray0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)0;
      StringReader stringReader0 = new StringReader("#n");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.jjmatchedPos = 47;
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'n';
      charArray1[1] = 'd';
      charArray1[2] = '8';
      charArray1[3] = 'n';
      charArray1[4] = 'e';
      charArray1[5] = '8';
      charArray1[6] = 'n';
      charArray1[7] = 'e';
      charArray1[8] = 'R';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(1598);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = 'e';
      charArray0[2] = '/';
      charArray0[3] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      Token token1 = javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(46);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"^=\"");
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[6] = '/';
      charArray0[2] = 's';
      charArray0[4] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eBGJZF+0Xp,c[tO~bd");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 20, 97);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaCharStream1.Done();
      // Undeclared exception!
      try { 
        javaCharStream1.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("finally");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-582), (-1491));
      byte byte0 = (byte)34;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      StringReader stringReader1 = new StringReader("finally");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      charArray0[1] = 'e';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = '/';
      charArray0[3] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      charArrayReader0.mark(0);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(6823);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6823. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("f\"@_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 26, (-1398));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 26, column -1394.  Encountered: <EOF> after : \"\\\"@_\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("\"/*\"");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 73. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '[';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("su", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*=");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      javaParserTokenManager0.MoreLexicalActions();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("ou,Q");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = null;
      try {
        charArrayReader1 = new CharArrayReader(charArray0, 74, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = '%';
      char[] charArray1 = new char[5];
      charArray1[0] = 'n';
      charArray1[1] = 'C';
      charArray1[2] = '8';
      charArray1[3] = '<';
      charArray1[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(2);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = '%';
      char[] charArray1 = new char[5];
      charArray1[0] = '%';
      charArray1[1] = 'C';
      charArray1[2] = '3';
      charArray1[3] = '<';
      charArray1[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      charArrayReader1.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      charArrayReader1.mark(1);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MoI");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MoI");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MoI");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("MoI");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.AdjustBuffSize();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">t5EYMDD7JV)>Q");
      StringReader stringReader1 = new StringReader("switch");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-582), 82);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 82. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[19];
      charArray0[0] = '<';
      charArray0[1] = '[';
      charArray0[2] = '<';
      charArray0[5] = '[';
      charArray0[4] = '<';
      charArray0[5] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      charArrayReader0.mark(2);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q7A||7oJ0$ o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.specialToken;
      token0.image = "Q7A||7oJ0$ o";
      token0.specialToken = null;
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'W';
      charArray0[2] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'W';
      charArray1[1] = '0';
      charArray1[2] = '0';
      charArray1[3] = '0';
      charArray1[4] = '0';
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 58. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      StringReader stringReader0 = new StringReader("#n");
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'u';
      charArray0[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.baseWireHandle;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedPos = 47;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("finally");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-582), (-582));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.read();
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endLine = 5;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("{@XGA41QklCaK5q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1398), 38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 655, 86, 118);
      javaParserTokenManager0.ReInit(javaCharStream1);
      javaCharStream1.backup(30);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("{", "@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)34;
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      charArrayReader1.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.jjimageLen = 2145388542;
      javaParserTokenManager0.jjimageLen = 0;
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 71. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)44;
      byteArray0[1] = (byte)34;
      StringReader stringReader0 = new StringReader("PT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)34, (byte)34);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 44. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("super");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2935), (-1527));
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q7A||7oJ0$ o");
      StringReader stringReader1 = new StringReader("{@XGA41QklCaK5q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 92, 83);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      MockFile mockFile0 = new MockFile("\"interface\"");
      MockFile mockFile1 = new MockFile(mockFile0, "A");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "A", 74, 85);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("this");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2838));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2838. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'M';
      charArray0[2] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[8];
      charArray1[0] = 'N';
      charArray1[1] = '0';
      charArray1[2] = 'M';
      charArray1[3] = 'M';
      charArray1[4] = '0';
      charArray1[5] = 'M';
      charArray1[6] = 'r';
      charArray1[7] = '/';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SwitchTo(1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(1);
      javaParserTokenManager0.SwitchTo(1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      StringReader stringReader0 = new StringReader("j5FA~#R{)z");
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = 'u';
      charArray0[2] = ' ';
      charArray0[3] = ']';
      int int0 = ObjectStreamConstants.baseWireHandle;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedPos = 47;
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'T';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[5] = 'L';
      charArray0[6] = 'T';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.line = 8;
      javaParserTokenManager0.MoreLexicalActions();
      charArrayReader0.reset();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")", "<DIGIT>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <DIGIT>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ou,Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0090';
      charArray0[1] = '\u0090';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0090\" (144), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"false\"");
      StringReader stringReader0 = new StringReader("\"false\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[23];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[19] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader1.read();
      char char0 = File.pathSeparatorChar;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0^_&?:|9e'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedReader pipedReader0 = new PipedReader();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '0';
      charArray0[2] = 'X';
      charArray0[3] = '@';
      charArray0[4] = '2';
      charArray0[5] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '0';
      charArray0[2] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      StringReader stringReader0 = new StringReader("\"<<\"");
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      char[] charArray0 = new char[9];
      charArray0[2] = '-';
      charArray0[7] = '-';
      char[] charArray1 = new char[6];
      charArray1[0] = '-';
      charArray1[1] = '-';
      charArray1[2] = 'P';
      charArray1[3] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("m%9uZKf=Ayf3)");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}kl[=O}_sa5o:/j-6D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[10];
      charArray0[3] = '<';
      char[] charArray1 = new char[5];
      charArray1[0] = '}';
      charArray1[2] = '/';
      charArray1[3] = '/';
      charArray1[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0090';
      charArray0[1] = '\u0090';
      charArray0[2] = '\u0090';
      charArray0[3] = '/';
      charArray0[4] = '\u0090';
      charArray0[5] = '%';
      charArray0[1] = '%';
      charArray0[8] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      char char0 = File.separatorChar;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer(28);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 66. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("igk$`oIp&F.4J");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2935), (-1527));
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = 'B';
      char[] charArray1 = new char[18];
      charArray1[0] = 'B';
      charArray1[1] = 'B';
      charArray1[4] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.buffer = charArray1;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[12] = '?';
      charArray0[1] = 'e';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      String string0 = "jUi!r/";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false, "jUi!r/");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jUi!r/
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("\"odouble\"");
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      Token.newToken(667);
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-423));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -423. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      charArray0[2] = 'X';
      charArray0[3] = '@';
      charArray0[4] = '2';
      charArray0[5] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.SwitchTo(1);
      javaParserTokenManager1.getNextToken();
      charArrayReader0.mark(1303);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.SwitchTo(1);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.SwitchTo(1369);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1369. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = '<';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = ']';
      charArray0[5] = 'G';
      charArray0[6] = '}';
      charArray0[7] = ']';
      charArray0[8] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.ReInit(javaCharStream0);
      javaParserTokenManager1.SkipLexicalActions(token1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1, 2);
      javaParserTokenManager3.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("im=)<eBent^");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2934), 18);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      stringReader0.ready();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 81. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("pLY&\"\"p&S*W*+");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '^';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "after : \"");
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      javaCharStream1.AdjustBuffSize();
      charArrayReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)18;
      charArrayReader0.close();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        charArrayReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      char[] charArray1 = new char[5];
      charArray1[0] = 'Z';
      charArray1[1] = 'x';
      charArray1[2] = 'P';
      charArray1[3] = 'Z';
      charArray1[4] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3725));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3725. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)44;
      StringReader stringReader0 = new StringReader("PT");
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      charArray0[3] = '\\';
      charArray0[4] = 'k';
      charArray0[5] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"false\"");
      StringReader stringReader0 = new StringReader("\"false\"");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("+zmTRiL42W");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjFillToken();
      int int0 = 380;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken('h');
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      Token token0 = javaParserTokenManager2.jjFillToken();
      javaParserTokenManager2.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(45);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 45. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("assert");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 2758);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2758. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"^=\"");
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = ')';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      charArray0[7] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("im=l<egents");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-582), (-582));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream1, 1);
      javaParserTokenManager4.getNextToken();
      javaParserTokenManager2.getNextToken();
      JavaParserTokenManager javaParserTokenManager5 = null;
      try {
        javaParserTokenManager5 = new JavaParserTokenManager(javaCharStream1, 90);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 90. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("double");
      boolean boolean0 = JavaCharStream.staticFlag;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "double");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 0, 2327, (-5));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[16];
      char[] charArray1 = new char[9];
      charArray1[0] = '<';
      charArray1[1] = '<';
      charArray1[2] = '8';
      charArray1[3] = '<';
      charArray1[5] = '<';
      charArray1[6] = '8';
      charArray1[8] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#n");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedPos = 47;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '^';
      charArray0[0] = 'x';
      charArray0[3] = 'x';
      charArray0[6] = 'u';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<D`CUwxU),n1OIF");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 46, 61);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '^';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'u';
      charArray0[5] = 'L';
      charArray0[6] = '^';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      charArrayReader0.close();
      javaCharStream0.line = 8;
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 11. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)44;
      byteArray0[1] = (byte)34;
      StringReader stringReader0 = new StringReader("I$C),pSJ!pySq");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`]5hmd");
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream1);
      javaParserTokenManager0.TokenLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'q';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hey2");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("+TRiL'2W");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\'2W\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("+=");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.jjFillToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = new Token();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager1.SwitchTo(1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(912);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 912. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)44;
      byteArray0[1] = (byte)34;
      StringReader stringReader0 = new StringReader("I$C,pSJ!pySq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)34, 745);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'e';
      charArray0[2] = 'j';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer(1260);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(6375);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6375. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hey2");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("Hey2");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      stringReader0.read(charBuffer0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader1 = new StringReader("implements");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      pushbackReader0.unread(33);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 89);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 89. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      String string0 = "=b#cf6+zS?PT";
      StringReader stringReader0 = new StringReader("=b#cf6+zS?PT");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-715));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -715. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)48;
      byte byte0 = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1027), 1344, (byte)48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)3);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1027, column 1347.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("5D&:N~qv#2g~dK");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("5D");
      MockFile mockFile1 = new MockFile(mockFile0, "5D&:N~qv#2g~dK");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "\"interface\"", 2575, (-3658));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'I';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hey2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hey2");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":");
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream1.readChar();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      char[] charArray0 = new char[9];
      charArray0[2] = '-';
      charArray0[3] = '-';
      char[] charArray1 = new char[6];
      charArray1[0] = '-';
      charArray1[1] = '-';
      charArray1[2] = 'P';
      charArray1[3] = '.';
      charArray1[4] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-2835));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2835. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'Z';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hey2");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false, "au_i0IN%Xr6q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // au_i0IN%Xr6q
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader(".YkjXRtcN");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".YkjXRtcN");
      StringReader stringReader1 = new StringReader(".YkjXRtcN");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 997, 86);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("{@XGA41QklCaK5q");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "{@XGA41QklCaK5q", 997, 997);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MoI");
      charArray0[1] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.AdjustBuffSize();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.readChar();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        charArrayReader0.read(charArray0, (-795), 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'U';
      StringReader stringReader0 = new StringReader("super");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      charArrayReader1.close();
      javaParserTokenManager0.MoreLexicalActions();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("U", "<DIGIT>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <DIGIT>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("finaly");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "finaly");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("finaly", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '8';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '8';
      charArray0[6] = '8';
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("");
      StringReader stringReader0 = new StringReader("?u('\"ucxt;OIt{y7(w");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      javaCharStream0.AdjustBuffSize();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '4';
      charArray0[2] = 'X';
      charArray0[3] = '@';
      charArray0[4] = 'X';
      charArray0[5] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.bufpos = 1;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      Token.newToken(1);
      token_GTToken0.image = "{";
      javaParserTokenManager1.getNextToken();
      token_GTToken0.beginLine = 1;
      javaCharStream0.line = 1650;
      Token.newToken(1);
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.MoreLexicalActions();
      javaCharStream0.readChar();
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArrayReader0.close();
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 79. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '^';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'u';
      charArray0[5] = 'L';
      charArray0[6] = '^';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      charArrayReader0.close();
      javaCharStream0.line = 8;
      javaParserTokenManager0.MoreLexicalActions();
      MockFile mockFile0 = new MockFile(")", ",");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ^
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("finally");
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("J?7 d<`8tiL]@`Ue\"z");
      MockFile mockFile0 = new MockFile("\"abstract\"");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockFile0, "strictfp");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // strictfp
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '/';
      charArray0[2] = 'L';
      charArray0[3] = 'u';
      charArray0[4] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      charArrayReader1.close();
      javaParserTokenManager0.MoreLexicalActions();
      MockFile mockFile0 = new MockFile("]`fN?iC", "interface");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xa^-O^;4:g:&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-582), (-582));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.jjmatchedKind = 74;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 51);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 51. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MoI");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MoI");
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.AdjustBuffSize();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.readChar();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        charArrayReader0.read(charArray0, (-797), 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[2] = '/';
      charArray0[3] = '^';
      charArray0[5] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream1.ReadByte();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, (-1890));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1890. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-3567), (-3567));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      charArrayReader0.markSupported();
      Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1683), 1, 99);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      JavaCharStream javaCharStream3 = new JavaCharStream(charArrayReader0, 4, 66);
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream3, (-1150));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1150. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader0 = new StringReader("im=)<eBent^");
      int int0 = (-2934);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2934), 18);
      Charset.defaultCharset();
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(bufferedReader0);
      try { 
        charArrayReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implem1nts");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2251, 2251);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile("\"try\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      char[] charArray0 = new char[9];
      charArray0[2] = '-';
      charArray0[7] = '-';
      char[] charArray1 = new char[6];
      charArray1[0] = '-';
      charArray1[1] = '-';
      charArray1[2] = 'P';
      charArray1[3] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager3.setDebugStream(javaParserTokenManager1.debugStream);
      Token token0 = javaParserTokenManager2.getNextToken();
      javaParserTokenManager3.TokenLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager4.getNextToken();
      JavaParserTokenManager javaParserTokenManager5 = null;
      try {
        javaParserTokenManager5 = new JavaParserTokenManager(javaCharStream0, Integer.MAX_VALUE);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2147483647. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[27];
      StringReader stringReader0 = new StringReader("eDwEC(W~x??YH");
      stringReader0.ready();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      PipedReader pipedReader0 = new PipedReader();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (byte)34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 34. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'M';
      charArray0[5] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (int) '9';
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      token0.specialToken = (Token) token_GTToken0;
      token_GTToken0.kind = 142;
      javaParserTokenManager1.curLexState = 2;
      javaParserTokenManager0.getNextToken();
      token_GTToken0.image = "900";
      MockPrintStream mockPrintStream0 = new MockPrintStream("900");
      Token.GTToken token_GTToken1 = new Token.GTToken();
      Token token1 = token_GTToken1.specialToken;
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("\"[\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      stringReader0.skip((byte) (-105));
      javaCharStream0.tokenBegin = (-656);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = (-656);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.jjround = 100;
      Token token0 = javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.next;
      token0.next = null;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xa^-O^;4:g:&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-582), (-582));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("com.soops.CEN4010.JMCA.JParser.JavaParserConstants", "\"char\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"char\"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("im=)<eBent^");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2917), 18);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      stringReader0.skip((-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      MockFile mockFile0 = new MockFile("ajq4x4=YRUk");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      stringReader0.ready();
      javaParserTokenManager1.SkipLexicalActions(token0);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader1 = new StringReader("<");
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(1568);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1568. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      PipedReader pipedReader0 = new PipedReader();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.curChar = 'D';
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2736);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2736. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A.bim=)<eBent^");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2917), 27);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      stringReader0.skip((-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      MockFile mockFile0 = new MockFile("ajq4x4=YRUk");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      stringReader0.ready();
      javaParserTokenManager1.SkipLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      boolean boolean0 = JavaCharStream.staticFlag;
      StringReader stringReader1 = new StringReader("=");
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(45);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 45. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
