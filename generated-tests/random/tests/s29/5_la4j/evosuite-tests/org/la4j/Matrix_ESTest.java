/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:30:24 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      Matrix matrix1 = matrix0.transpose();
      assertNotSame(matrix1, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(239L);
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      double double0 = matrix0.trace();
      assertEquals(2.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(8);
      Vector vector0 = matrix0.toColumnVector();
      assertEquals(8, vector0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(16, 16);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(16, columnMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      String string0 = columnMajorSparseMatrix0.toCSV(numberFormat0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-774.4202571770973);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.sum();
      assertEquals((-774.4202571770973), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.removeLastRow();
      assertEquals(0, matrix1.rows());
      assertEquals(1, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.removeLastColumn();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.zero(328);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1854.96068);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.min();
      assertEquals((-1854.96068), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(17, mockRandom0);
      double double0 = matrix0.max();
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      double double0 = matrix0.infinityNorm();
      assertEquals(9, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.zero(328);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix1 = matrix0.copy();
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 48);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(48);
      assertTrue(matrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 48);
      rowMajorSparseMatrix0.updateColumn(1260, (VectorFunction) null);
      assertEquals(48, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = rowMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n5 5 5\n1 1 \u00A4 1.00\n2 2 \u00A4 1.00\n3 3 \u00A4 1.00\n4 4 \u00A4 1.00\n5 5 \u00A4 1.00\n", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, 0.0);
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      String string0 = columnMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n13 13 13\n1 1 0\n2 2 0\n3 3 0\n4 4 0\n5 5 0\n6 6 0\n7 7 0\n8 8 0\n9 9 0\n10 10 0\n11 11 0\n12 12 0\n13 13 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 9);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      String string0 = denseMatrix0.toCSV(numberFormat0);
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.swapRows((-68), (-68));
      assertEquals(2, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 13, doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.subtract((-1974.119745));
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(8);
      CCSMatrix cCSMatrix0 = (CCSMatrix)matrix0.transpose();
      cCSMatrix0.setAll(8);
      assertEquals(64, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((-836.5566251291698));
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn((-1585));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(3264, (-525.9227882654869));
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 3264, (-2387), 9, (-1616), 587, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 9, -1616
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.hadamardProduct(columnMajorSparseMatrix0);
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(17, mockRandom0);
      Vector vector0 = matrix0.getRow(16);
      assertEquals(17, vector0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Vector vector0 = rowMajorSparseMatrix0.getColumn(0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(8);
      Vector vector0 = matrix0.getColumn(9);
      assertEquals(8, vector0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-4009), 6, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4009x6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(37, 37);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).ensureIndexesAreInBounds(37, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.zero(328);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      ((Matrix)cRSMatrix0).ensureDimensionsAreCorrect(1031, 107);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(441, 441, (-454.87));
      assertEquals(441, matrix0.columns());
      assertEquals(441, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.blankOfShape(1599, 1599);
      assertEquals(1599, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(37, 37);
      Matrix matrix1 = matrix0.add(0.0);
      assertEquals(0.0, matrix0.min(), 0.01);
      assertEquals(37, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateAt(0, 1135, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.unit(2041, (-3070));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      DenseVector denseVector0 = DenseVector.unit(1);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 48);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(17, 554, 17);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(17, 17);
      // Undeclared exception!
      try { 
        matrix0.swapColumns((-1646), (-2087831323));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1646' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(32, 32, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(32, (double) 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      // Undeclared exception!
      try { 
        matrix0.setColumn(9, (double) 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(238, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("D-+YykWx7](?fE7");
      // Undeclared exception!
      try { 
        matrix0.mkString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(702, 702);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.minInRow(702);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '702' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, 0.0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInRow(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn(1864);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1922, 1922, doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(1922, 4);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV("V#b*v|]|:H_`[r[\"}v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(749, (-3189.364045));
      // Undeclared exception!
      matrix0.divide((-2218.831693));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2672), (-2672));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.constant((-340), 5, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(3);
      // Undeclared exception!
      try { 
        matrix0.apply((MatrixOperation<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 10);
      Matrix matrix1 = matrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.add(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 9x10 does not equal to 10x9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        Matrix.from1DArray(9, (-3136), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 9x-3136
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(536, (-360), 1598, 1598);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '536' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2109);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeRow((-2660));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2108
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, (-1974.119745));
      Matrix matrix0 = denseMatrix0.multiply(1.0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.zero(328);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      double double0 = matrix0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(8);
      matrix0.iteratorOfColumn(8);
      assertEquals(8, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(9);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      String string0 = denseMatrix0.toCSV(numberFormat0);
      assertEquals("1, 0, 0, 0, 0, 0, 0, 0, 0\n0, 1, 0, 0, 0, 0, 0, 0, 0\n0, 0, 1, 0, 0, 0, 0, 0, 0\n0, 0, 0, 1, 0, 0, 0, 0, 0\n0, 0, 0, 0, 1, 0, 0, 0, 0\n0, 0, 0, 0, 0, 1, 0, 0, 0\n0, 0, 0, 0, 0, 0, 1, 0, 0\n0, 0, 0, 0, 0, 0, 0, 1, 0\n0, 0, 0, 0, 0, 0, 0, 0, 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      Matrix matrix0 = denseMatrix0.copy();
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      matrix0.rowMajorIterator();
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(364, 364, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 364;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '364' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(3273, 3273);
      // Undeclared exception!
      try { 
        ((Matrix)cCSMatrix0).ensureIndexesAreInBounds((-43), 3273);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-43' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero(37, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero(Integer.MAX_VALUE, 2646);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.copyOfColumns((-357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 7x-357
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      boolean boolean0 = matrix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 9);
      Object object0 = new Object();
      boolean boolean0 = denseMatrix0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(3);
      matrix0.hashCode();
      assertEquals(3, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(45, (-536.67756));
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      String string0 = sparseMatrix0.mkString(numberFormat0, "Q&4j", "Column '");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, (-1974.119745));
      boolean boolean0 = denseMatrix0.equals((Matrix) denseMatrix0, 228.8765233861416);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, 13);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.removeFirstColumn();
      boolean boolean0 = cRSMatrix0.equals((Matrix) columnMajorSparseMatrix0, 0.0);
      assertFalse(boolean0);
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, 13);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      boolean boolean0 = matrix0.equals((Matrix) columnMajorSparseMatrix0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      columnMajorSparseMatrix0.multiply((double) 7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(45, (-536.67756));
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      LinearSystemSolver linearSystemSolver0 = sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(45, linearSystemSolver0.equations());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = sparseMatrix0.foldRows(vectorAccumulator0);
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn((-2454), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2454' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateRow(2, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(7, 7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(6, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(5, 5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(2027, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2027' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2109);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transformRow(1919, vectorFunction0);
      assertEquals(2108, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.constant(37, 0.0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      double double0 = matrix0.maxInColumn(37);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(364, 364, doubleArray0);
      int[] intArray0 = new int[9];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      MatrixDecompositor matrixDecompositor0 = columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(32, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceTopLeft((-1), 1365);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..1365].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(58, 58);
      // Undeclared exception!
      columnMajorSparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      assertNotSame(matrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(13, 13);
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn((-125));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..12
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(2);
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 2);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1314, 1314, 1314);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn((-2147101736), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1313
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1769, 455);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 1769);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(455, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..454
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1018L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(4, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow((-2194), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1025, 1025);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(7, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(792L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(8, 8, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(10, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(293);
      double[] doubleArray0 = new double[3];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(3137, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 3. Should be: 293.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.zero(328);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.setRow(3372, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 328.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(8, 6);
      int int0 = denseMatrix0.rank();
      assertEquals(0, int0);
      assertEquals(8, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(3);
      double double0 = cRSMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(7, 7);
      double double0 = matrix0.determinant();
      assertEquals(823543.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      double double0 = matrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      double double0 = matrix0.diagonalProduct();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      double double0 = matrix0.trace();
      assertEquals(9, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.blankOfColumns(5);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 5 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom(549);
      DenseVector denseVector0 = DenseVector.random(549, mockRandom0);
      double[] doubleArray0 = new double[3];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, 549, 549, 5, 3565);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 549, 549
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(6);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 1552, (-546), 1552, 1705, 6, 1705);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1552, 1705
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix0, (-68), (-68), (-68), (-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -68x-68
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 9);
      Matrix matrix0 = denseMatrix0.add((double) 9);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      Matrix matrix0 = columnMajorSparseMatrix0.power(4);
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.power((-4659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -4659.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 304, 304);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapColumns((-2040109464), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2040109463
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(5, 5);
      matrix0.swapColumns(1, 1);
      assertEquals(5.0, matrix0.max(), 0.01);
      assertEquals(5, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.constant(37, 0.0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.swapRows(17, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 304, 304);
      columnMajorSparseMatrix0.setColumn(81, (double) 304);
      assertEquals(0.003289473684210526, columnMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("r0.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("          ");
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("0");
      Matrix matrix0 = denseMatrix0.rotate();
      assertEquals(1, denseMatrix0.rows());
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(4);
      denseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 10);
      matrix0.setRow(3, (double) 9);
      assertEquals(9, matrix0.rows());
      assertEquals(10, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1161, (-1974.119745));
      // Undeclared exception!
      matrix0.mkString(">", "R");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      String string0 = denseMatrix0.mkString(numberFormat0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(7, 7);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(660, 1);
      double double0 = matrix0.minInRow(1);
      assertEquals(1, matrix0.columns());
      assertEquals(1.0, double0, 0.01);
      assertEquals(660, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(17, 17);
      Matrix matrix1 = matrix0.sliceBottomRight(17, 17);
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(7, 7);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(5, 5, 5);
      // Undeclared exception!
      try { 
        matrix0.transformRow(5, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(17, mockRandom0);
      SparseVector sparseVector0 = SparseVector.random(17, 0.0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.add(0.9);
      Vector vector1 = matrix0.multiply(vector0);
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[8];
      Matrix matrix1 = Matrix.from1DArray(1, 7, doubleArray1);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 546, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 546 rows and 7 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 9);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      assertEquals(9, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, 0.0);
      columnMajorSparseMatrix0.toSparseMatrix();
      assertEquals(13, columnMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      double double0 = matrix0.maxInRow(1599);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(16, 16);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn((-213));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-213' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(7, 7);
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.removeLastRow();
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(8);
      Vector vector0 = matrix0.toRowVector();
      assertEquals(8, vector0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(0, matrix0.columns());
      
      Matrix matrix1 = Matrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(6, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      Vector vector0 = denseMatrix0.toColumnVector();
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 9);
      String string0 = denseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix array real general\n9 9\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(9);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(2619, (-1982292597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..2619][0..-1982292597].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(16, 16);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.removeLastColumn();
      assertEquals(0.0625, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(6, 6);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      matrix0.kroneckerProduct(rowMajorSparseMatrix0);
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      Matrix matrix1 = matrix0.subtract(matrix0);
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix1.columns());
      assertEquals(9, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.hadamardProduct(columnMajorSparseMatrix0);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      double double0 = denseMatrix0.norm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      matrix0.iteratorOfRow(9);
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom(549);
      DenseVector denseVector0 = DenseVector.random(549, mockRandom0);
      double[] doubleArray0 = new double[3];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, (-32), 549, 5, 3565);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -32, 549
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3288, 3288);
      // Undeclared exception!
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.blankOfRows(1475);
      assertEquals(6, matrix1.columns());
      assertEquals(1475, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1424L));
      // Undeclared exception!
      Matrix.random(1298, 1298, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(7, 7);
      Matrix matrix1 = matrix0.subtract((double) 7);
      Matrix matrix2 = matrix1.add(matrix0);
      assertEquals(7, matrix2.columns());
      assertEquals(7, matrix2.rows());
      assertEquals(0.0, matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.insert(matrix0);
      assertEquals(1, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(9);
      Matrix matrix0 = denseMatrix0.copyOfColumns(9);
      assertTrue(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-2040109464), (-2040109464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2040109464x-2040109464
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      double double0 = matrix0.max();
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(7, 7);
      cRSMatrix0.infinityNorm();
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.sum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(37, 37);
      Matrix matrix1 = matrix0.copyOfRows(37);
      assertEquals(37, matrix1.columns());
      assertEquals(0.0, matrix1.min(), 0.01);
      assertEquals(37, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(9, 9);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      assertEquals(9, columnMajorSparseMatrix0.columns());
      assertEquals(9, columnMajorSparseMatrix0.rows());
      assertEquals(9, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(37, 37);
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(0.02702702702702703, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1369.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(7, 7);
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.multiplyByItsTranspose();
      assertEquals(7, matrix0.rows());
      assertEquals(7.0, matrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      String string0 = denseMatrix0.toCSV();
      assertEquals("", string0);
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(17, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(660, 1);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(660);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      assertEquals(0, denseMatrix0.rows());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformColumn(0, vectorFunction0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
  }
}
