/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:26:45 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserConstants;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader1 = new StringReader("name");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-195), 39);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals((-195), simpleCharStream0.getEndLine());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals((-195), simpleCharStream0.getBeginLine());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals((-195), simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals("name", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(42, token0.endColumn);
      assertEquals((-195), token0.beginLine);
      assertEquals(55, token0.kind);
      assertEquals(39, token0.beginColumn);
      assertEquals((-195), token0.endLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("62;.\"QPX");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 810, 2955);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      simpleCharStream0.ReInit((Reader) stringReader1, 82, 810, 2955);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      xPathParserTokenManager0.jjmatchedPos = 107;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(810, simpleCharStream0.getBeginColumn());
      assertEquals(811, simpleCharStream0.getEndColumn());
      assertEquals(82, simpleCharStream0.getLine());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(811, simpleCharStream0.getColumn());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals("62", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(811, token0.endColumn);
      assertEquals(82, token0.endLine);
      assertEquals(82, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(810, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 82, column 812.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'n';
      charArray0[2] = 'Q';
      charArray0[3] = '%';
      charArray0[4] = 'u';
      charArray0[5] = 's';
      charArray0[6] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', '4', 'U', '>', 'n', '['}, charArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-783), (-783));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-783), simpleCharStream0.getBeginLine());
      assertEquals((-782), simpleCharStream0.getEndColumn());
      assertEquals((-783), simpleCharStream0.getLine());
      assertEquals((-783), simpleCharStream0.getBeginColumn());
      assertEquals((-782), simpleCharStream0.getColumn());
      assertEquals((-783), simpleCharStream0.getEndLine());
      assertEquals("U8", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-783), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-783), token0.beginLine);
      assertEquals((-783), token0.endLine);
      assertEquals((-782), token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'n';
      charArray0[2] = 'Q';
      charArray0[3] = '%';
      charArray0[4] = 'n';
      charArray0[5] = 's';
      charArray0[6] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', '4', 'U', '>', 'n', '['}, charArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-783), (-783));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-783), simpleCharStream0.getLine());
      assertEquals((-783), simpleCharStream0.getBeginLine());
      assertEquals((-782), simpleCharStream0.getColumn());
      assertEquals((-782), simpleCharStream0.getEndColumn());
      assertEquals((-783), simpleCharStream0.getEndLine());
      assertEquals((-783), simpleCharStream0.getBeginColumn());
      assertEquals("U8", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals((-783), token0.beginLine);
      assertEquals((-783), token0.endLine);
      assertEquals((-782), token0.endColumn);
      assertEquals((-783), token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals((-780), simpleCharStream0.getEndColumn());
      assertEquals((-783), simpleCharStream0.getLine());
      assertEquals((-783), simpleCharStream0.getBeginLine());
      assertEquals((-780), simpleCharStream0.getColumn());
      assertEquals((-780), simpleCharStream0.getBeginColumn());
      assertEquals((-783), simpleCharStream0.getEndLine());
      assertEquals("1", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-780), token1.endColumn);
      assertEquals((-783), token1.endLine);
      assertEquals(20, token1.kind);
      assertEquals((-780), token1.beginColumn);
      assertEquals((-783), token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Digit>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager2);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager2.getNextToken();
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("<", token0.toString());
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(13, token0.kind);
      assertNotNull(token0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      
      Token token1 = xPathParserTokenManager2.getNextToken();
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(6, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(6, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("Digit", token1.toString());
      assertEquals(5, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream1, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'ywZG84ba%S.+9y");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("cp\"*JrGk(I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(Integer.MIN_VALUE, simpleCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginColumn());
      assertEquals(Integer.MIN_VALUE, simpleCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginLine());
      assertEquals("cp", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(Integer.MIN_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("um", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      StringReader stringReader1 = new StringReader("null");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 57, 57);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(60, simpleCharStream0.getColumn());
      assertEquals(57, simpleCharStream0.getLine());
      assertEquals(57, simpleCharStream0.getBeginColumn());
      assertEquals(57, simpleCharStream0.getEndLine());
      assertEquals(57, simpleCharStream0.getBeginLine());
      assertEquals(60, simpleCharStream0.getEndColumn());
      assertEquals("null", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(70, token0.kind);
      assertEquals(60, token0.endColumn);
      assertEquals(57, token0.endLine);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_Za=P$@\":aKa j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(95, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Za", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("=", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(11, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("mod");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("mod", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(29, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",f6>A.D^Hv@X <E");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(44, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("f6", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'ywZG84ba%S.+9y");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals("ywZG84ba", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 66, 27);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(66, simpleCharStream0.getLine());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertEquals(66, simpleCharStream0.getBeginLine());
      assertEquals(66, simpleCharStream0.getEndLine());
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals("f8F", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(66, token0.endLine);
      assertEquals(29, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(66, token0.beginLine);
      assertEquals(27, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JZ+XyH,Ur^aD*A");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      int int1 = stringReader0.read();
      assertEquals(90, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4, 74);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('+', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(77, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(75, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(77, simpleCharStream0.getEndColumn());
      assertEquals("XyH", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(75, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(4, token0.endLine);
      assertEquals(77, token0.endColumn);
      assertEquals(4, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(78, simpleCharStream0.getEndColumn());
      assertEquals(78, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getBeginColumn());
      assertEquals(",", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(4, token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(78, token1.endColumn);
      assertEquals(4, token1.beginLine);
      assertEquals(78, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[5] = 's';
      charArray0[6] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', '4', 'U', '>', 'n', '['}, charArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 20, 17, 7);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("U8", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(18, token0.endColumn);
      assertEquals(20, token0.beginLine);
      assertEquals(17, token0.beginColumn);
      assertEquals(20, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(20, simpleCharStream0.getColumn());
      assertEquals(20, simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getEndColumn());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("1", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token1.endLine);
      assertEquals(20, token1.endColumn);
      assertEquals(20, token1.kind);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("j", token2.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token2.endLine);
      assertEquals(21, token2.endColumn);
      assertEquals(21, token2.beginColumn);
      assertEquals(20, token2.beginLine);
      assertEquals(78, token2.kind);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(21, token3.endColumn);
      assertEquals(21, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(20, token3.beginLine);
      assertEquals(20, token3.endLine);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader2 = new StringReader("postion");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 39, 39);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(45, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(45, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals("postion", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(45, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.endLine);
      assertEquals(39, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hiv");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_PRECEDING_SIBLING;
      assertEquals(46, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 46, 46);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(48, simpleCharStream0.getEndColumn());
      assertEquals(48, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals("Hiv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(48, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ePXTsP{K");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      charArray0[1] = 'u';
      charArray0[2] = 'm';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'e', 'P', 'X'}, charArray0);
      assertEquals(3, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2389, 919);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(919, simpleCharStream0.getBeginColumn());
      assertEquals(921, simpleCharStream0.getEndColumn());
      assertEquals(2389, simpleCharStream0.getBeginLine());
      assertEquals(921, simpleCharStream0.getColumn());
      assertEquals(2389, simpleCharStream0.getEndLine());
      assertEquals(2389, simpleCharStream0.getLine());
      assertEquals("TsP", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(2389, token0.beginLine);
      assertEquals(2389, token0.endLine);
      assertEquals(921, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(919, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      int int1 = stringReader0.read();
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2103, 88);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(88, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals("4", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(89, token0.endColumn);
      assertEquals(2103, token0.endLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(2103, token0.beginLine);
      assertEquals(20, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(2927);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2927. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("parent::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("parent::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(37, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("G", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      StringReader stringReader1 = new StringReader("'ywZG84ba%S.+9y");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-596), (-216));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -596, column -201.  Encountered: <EOF> after : \"\\'ywZG84ba%S.+9y\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader(":o/<`cD.-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 801, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(71, simpleCharStream0.getColumn());
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(71, simpleCharStream0.getEndColumn());
      assertEquals(71, simpleCharStream0.getBeginColumn());
      assertEquals(":", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(79, token0.kind);
      assertEquals(71, token0.endColumn);
      assertEquals(71, token0.beginColumn);
      assertEquals(801, token0.endLine);
      assertEquals(801, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(71, simpleCharStream0.getColumn());
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(71, simpleCharStream0.getEndColumn());
      assertEquals(71, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals("o", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(72, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(72, token1.beginColumn);
      assertEquals(801, token1.endLine);
      assertEquals(801, token1.beginLine);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager1.jjFillToken();
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals("o", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(72, token2.beginColumn);
      assertEquals(72, token2.endColumn);
      assertEquals(78, token2.kind);
      assertEquals(801, token2.endLine);
      assertEquals(801, token2.beginLine);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      xPathParserTokenManager1.ReInit(simpleCharStream0);
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R_$R@>8G@");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(82, int0);
      
      int int1 = stringReader0.read();
      assertEquals(95, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringReader0.read();
      assertEquals(36, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      StringReader stringReader1 = new StringReader("\")\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 41, 2926);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2926, simpleCharStream0.getBeginColumn());
      assertEquals(41, simpleCharStream0.getBeginLine());
      assertEquals(41, simpleCharStream0.getLine());
      assertEquals(2926, simpleCharStream0.getColumn());
      assertEquals(41, simpleCharStream0.getEndLine());
      assertEquals(2926, simpleCharStream0.getEndColumn());
      assertEquals("R", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(41, token0.endLine);
      assertEquals(2926, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(2926, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      int int1 = stringReader0.read();
      assertEquals(101, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringReader0.read();
      assertEquals(108, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      StringReader stringReader1 = new StringReader("EV>J19S(%WT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 115, 115);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals("EV", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(115, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(116, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(117, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(">", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(115, token1.beginLine);
      assertEquals(117, token1.beginColumn);
      assertEquals(115, token1.endLine);
      assertEquals(117, token1.endColumn);
      assertEquals(15, token1.kind);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(117, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(121, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(121, simpleCharStream0.getColumn());
      assertEquals(118, simpleCharStream0.getBeginColumn());
      assertEquals("J19S", token2.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(118, token2.beginColumn);
      assertEquals(121, token2.endColumn);
      assertEquals(78, token2.kind);
      assertEquals(115, token2.endLine);
      assertEquals(115, token2.beginLine);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(122, simpleCharStream0.getBeginColumn());
      assertEquals(122, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(122, simpleCharStream0.getColumn());
      assertEquals("(", token3.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(115, token3.beginLine);
      assertEquals(80, token3.kind);
      assertEquals(122, token3.beginColumn);
      assertEquals(122, token3.endColumn);
      assertEquals(115, token3.endLine);
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EOF>");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 28, 92);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('E', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("OF", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("62C;.\"9PX");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 2955, 2955);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("KWCmDOD.U3r3c");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      simpleCharStream0.ReInit((Reader) stringReader2, 2955, 1024, 4313);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1036, simpleCharStream0.getColumn());
      assertEquals(2955, simpleCharStream0.getLine());
      assertEquals(2955, simpleCharStream0.getBeginLine());
      assertEquals(1024, simpleCharStream0.getBeginColumn());
      assertEquals(2955, simpleCharStream0.getEndLine());
      assertEquals(1036, simpleCharStream0.getEndColumn());
      assertEquals("KWCmDOD.U3r3c", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2955, token0.endLine);
      assertEquals(2955, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1024, token0.beginColumn);
      assertEquals(1036, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1036, simpleCharStream0.getColumn());
      assertEquals(2955, simpleCharStream0.getLine());
      assertEquals(1036, simpleCharStream0.getBeginColumn());
      assertEquals(2955, simpleCharStream0.getBeginLine());
      assertEquals(2955, simpleCharStream0.getEndLine());
      assertEquals(1036, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(2955, token1.beginLine);
      assertEquals(1036, token1.beginColumn);
      assertEquals(1036, token1.endColumn);
      assertEquals(2955, token1.endLine);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(1036, simpleCharStream0.getColumn());
      assertEquals(2955, simpleCharStream0.getLine());
      assertEquals(1036, simpleCharStream0.getBeginColumn());
      assertEquals(2955, simpleCharStream0.getBeginLine());
      assertEquals(2955, simpleCharStream0.getEndLine());
      assertEquals(1036, simpleCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1036, token2.beginColumn);
      assertEquals(1036, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(2955, token2.endLine);
      assertEquals(2955, token2.beginLine);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PA7L");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('P', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("A7L", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 953);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 953. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int[] intArray0 = new int[0];
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 57, 57);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int1 = stringReader0.read();
      assertEquals(36, int1);
      assertFalse(int1 == int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(57, simpleCharStream0.getLine());
      assertEquals(57, simpleCharStream0.getBeginLine());
      assertEquals(62, simpleCharStream0.getEndColumn());
      assertEquals(57, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getColumn());
      assertEquals(57, simpleCharStream0.getBeginColumn());
      assertEquals("ozBugd", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(62, token0.endColumn);
      assertEquals(57, token0.endLine);
      assertEquals(57, token0.beginLine);
      assertEquals(57, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 57, column 63.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nume");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("nume", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JZ+yH,Ur^aD*A");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1308, (-1053));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1308, simpleCharStream0.getEndLine());
      assertEquals(1308, simpleCharStream0.getLine());
      assertEquals(1308, simpleCharStream0.getBeginLine());
      assertEquals((-1053), simpleCharStream0.getColumn());
      assertEquals((-1053), simpleCharStream0.getBeginColumn());
      assertEquals((-1053), simpleCharStream0.getEndColumn());
      assertEquals("Z", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1053), token0.endColumn);
      assertEquals((-1053), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1308, token0.beginLine);
      assertEquals(1308, token0.endLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = 44;
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(44, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getEndLine());
      assertEquals(0, xPathParserTokenManager0.input_stream.getColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getLine());
      assertEquals(0, xPathParserTokenManager0.input_stream.getEndColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JK[CnT-?U");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("JK", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(`2E2]O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjmatchedKind = 115;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("(", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$@\":aKa j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(95, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("a", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1121), 4, 4);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1121), simpleCharStream0.getEndLine());
      assertEquals((-1121), simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals((-1121), simpleCharStream0.getLine());
      assertEquals("[", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1121), token0.endLine);
      assertEquals((-1121), token0.beginLine);
      assertEquals(84, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(",", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(87, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$@\":aXKa j");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      int int1 = stringReader0.read();
      assertEquals(95, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("a", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("=", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(11, token1.kind);
      assertEquals(2, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("P", token2.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 60. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      int int1 = stringReader0.read();
      assertEquals(34, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("4)~R~$&gM<R+]i)vu(y");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 39, 4288);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      int int2 = stringReader0.read();
      assertEquals(89, int2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(stringReader0, stringReader1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(4288, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(4288, simpleCharStream0.getBeginColumn());
      assertEquals(4288, simpleCharStream0.getEndColumn());
      assertEquals("C", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(39, token0.endLine);
      assertEquals(39, token0.beginLine);
      assertEquals(4288, token0.endColumn);
      assertEquals(4288, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, 9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 9. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("9", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader0 = new StringReader(".?olRv0-9C");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 39, 39);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(39, token0.endLine);
      assertEquals(39, token0.endColumn);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(82, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 39, column 40.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F^m7&\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      StringReader stringReader1 = new StringReader("F^m7&\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("F", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-867L));
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1795), 8);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals((-1795), simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals((-1795), simpleCharStream0.getLine());
      assertEquals((-1795), simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals("self::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals((-1795), token0.endLine);
      assertEquals(35, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(8, token0.beginColumn);
      assertEquals((-1795), token0.beginLine);
      assertNotNull(token0);
      
      int int0 = 12;
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 50. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      int int1 = stringReader0.read();
      assertEquals(89, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2103, 34);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(34, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(34, simpleCharStream0.getColumn());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('C', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(35, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(35, simpleCharStream0.getBeginColumn());
      assertEquals(35, simpleCharStream0.getColumn());
      assertEquals("@", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(35, token0.endColumn);
      assertEquals(86, token0.kind);
      assertEquals(2103, token0.beginLine);
      assertEquals(35, token0.beginColumn);
      assertEquals(2103, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals("U", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(2103, token1.endLine);
      assertEquals(37, token1.beginColumn);
      assertEquals(2103, token1.beginLine);
      assertEquals(37, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      xPathParserTokenManager1.debugStream = xPathParserTokenManager0.debugStream;
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(2103, token2.endLine);
      assertEquals(37, token2.endColumn);
      assertEquals(37, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(2103, token2.beginLine);
      assertNotNull(token2);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = xPathParserTokenManager1.jjFillToken();
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(37, token3.beginColumn);
      assertEquals(2103, token3.beginLine);
      assertEquals(37, token3.endColumn);
      assertEquals(2103, token3.endLine);
      assertEquals(0, token3.kind);
      assertNotNull(token3);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader0 = new StringReader(".?olRv0-9C");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 39, 39);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(".", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.endColumn);
      assertEquals(39, token0.endLine);
      assertEquals(39, token0.beginLine);
      assertEquals(82, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("number");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals("number", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(72, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gCp_Mn:tVWO4+2akV!");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("gCp_Mn", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(7, token1.endColumn);
      assertEquals(7, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(79, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      stringReader0.mark(92);
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'X';
      charArray0[2] = 'w';
      charArray0[3] = 'K';
      int int1 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'$', 'o', 'z', 'B'}, charArray0);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-184), 57);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals((-184), simpleCharStream0.getEndLine());
      assertEquals(57, simpleCharStream0.getBeginColumn());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals((-184), simpleCharStream0.getLine());
      assertEquals((-184), simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('u', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-184), simpleCharStream0.getEndLine());
      assertEquals(58, simpleCharStream0.getBeginColumn());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals((-184), simpleCharStream0.getLine());
      assertEquals((-184), simpleCharStream0.getBeginLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals("gd", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(59, token0.endColumn);
      assertEquals(58, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-184), token0.endLine);
      assertEquals((-184), token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -184, column 60.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|%h=C0I");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 17, 17);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader2 = new StringReader("position");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 39, 39);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals("position", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.endLine);
      assertEquals(46, token0.endColumn);
      assertEquals(49, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'n';
      charArray0[2] = 'Q';
      charArray0[3] = '3';
      charArray0[4] = 'n';
      charArray0[5] = 's';
      charArray0[6] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', '4', 'U', '>', 'n', '['}, charArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-783), (-783));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-783), simpleCharStream0.getBeginColumn());
      assertEquals((-783), simpleCharStream0.getLine());
      assertEquals((-783), simpleCharStream0.getBeginLine());
      assertEquals((-782), simpleCharStream0.getColumn());
      assertEquals((-782), simpleCharStream0.getEndColumn());
      assertEquals((-783), simpleCharStream0.getEndLine());
      assertEquals("U8", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-783), token0.beginColumn);
      assertEquals((-782), token0.endColumn);
      assertEquals((-783), token0.endLine);
      assertEquals((-783), token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals((-783), simpleCharStream0.getLine());
      assertEquals((-783), simpleCharStream0.getBeginLine());
      assertEquals((-780), simpleCharStream0.getBeginColumn());
      assertEquals((-780), simpleCharStream0.getColumn());
      assertEquals((-780), simpleCharStream0.getEndColumn());
      assertEquals((-783), simpleCharStream0.getEndLine());
      assertEquals("1", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-783), token1.beginLine);
      assertEquals((-783), token1.endLine);
      assertEquals(20, token1.kind);
      assertEquals((-780), token1.beginColumn);
      assertEquals((-780), token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 1375);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1375. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eL)]O|Nz*T@/2f'v}");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("eL", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0016';
      StringReader stringReader1 = new StringReader("\"[\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-40)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-40)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read();
      assertEquals(100, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader(".?olRv0-9C");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 39, 8);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(".", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, token0.endColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(8, token0.beginColumn);
      assertEquals(39, token0.endLine);
      assertEquals(82, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginColumn());
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-85));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -85. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R_$R@>8G@");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(82, int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 82, 82);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(82, simpleCharStream0.getLine());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals(82, simpleCharStream0.getColumn());
      assertEquals(82, simpleCharStream0.getBeginColumn());
      assertEquals(82, simpleCharStream0.getEndColumn());
      assertEquals("_", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(82, token0.beginLine);
      assertEquals(82, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(82, token0.endColumn);
      assertEquals(82, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.SwitchTo((-1673));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1673. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      StringReader stringReader1 = new StringReader("`0");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 57, 57);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 57, column 57.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4TU>n[U8 1j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("GX", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("parent::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(112, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)82, (byte)41, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)82, (byte)41, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 117);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)82, (byte)41, (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0, 26);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)82, (byte)41, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream1);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(bufferedInputStream1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)82, (byte)41, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)82, (byte)41, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"P\\ufffdR)\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("numbeW");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, (-736), 1872);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-736), simpleCharStream0.getLine());
      assertEquals(1872, simpleCharStream0.getBeginColumn());
      assertEquals(1877, simpleCharStream0.getColumn());
      assertEquals((-736), simpleCharStream0.getEndLine());
      assertEquals((-736), simpleCharStream0.getBeginLine());
      assertEquals(1877, simpleCharStream0.getEndColumn());
      assertEquals("numbeW", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1877, token0.endColumn);
      assertEquals(1872, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-736), token0.endLine);
      assertEquals((-736), token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-736), simpleCharStream0.getLine());
      assertEquals(1872, simpleCharStream0.getBeginColumn());
      assertEquals(1877, simpleCharStream0.getColumn());
      assertEquals((-736), simpleCharStream0.getEndLine());
      assertEquals((-736), simpleCharStream0.getBeginLine());
      assertEquals(1877, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 75, (-1518));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      long long0 = stringReader0.skip(75);
      assertEquals(13L, long0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GX4U>n[U8 1j");
      assertFalse(boolean0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader(":o/<`cD.-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-548), 84);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      StringReader stringReader2 = new StringReader("substring-before");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-1), 84);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(99, simpleCharStream1.getColumn());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals(99, simpleCharStream1.getEndColumn());
      assertEquals(84, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals("substring-before", token0.toString());
      assertEquals(15, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(60, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals(99, token0.endColumn);
      assertEquals(84, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(99, simpleCharStream1.getColumn());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals(99, simpleCharStream1.getEndColumn());
      assertEquals(84, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals("substring-before", token1.toString());
      assertEquals(15, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), token1.endLine);
      assertEquals((-1), token1.beginLine);
      assertEquals(84, token1.beginColumn);
      assertEquals(99, token1.endColumn);
      assertEquals(60, token1.kind);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-Dame");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("local-Dame");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 810, 2950);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 100, (-1366), 1807);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(810, simpleCharStream0.getEndLine());
      assertEquals(2959, simpleCharStream0.getEndColumn());
      assertEquals(2959, simpleCharStream0.getColumn());
      assertEquals(810, simpleCharStream0.getLine());
      assertEquals(2950, simpleCharStream0.getBeginColumn());
      assertEquals(810, simpleCharStream0.getBeginLine());
      assertEquals("local-Dame", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, simpleCharStream0.bufpos);
      assertEquals(2950, token0.beginColumn);
      assertEquals(810, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(810, token0.endLine);
      assertEquals(2959, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("62C;.\"9PX");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("62", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("C", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.CombiningChar;
      assertEquals(24, int0);
      
      StringReader stringReader1 = new StringReader("postion");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 24, 24);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(30, simpleCharStream0.getColumn());
      assertEquals(30, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals("postion", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(24, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(30, token0.endColumn);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0016';
      StringReader stringReader1 = new StringReader("\"[\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("G", token0.toString());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("$", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(17, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      int int1 = stringReader0.read();
      assertEquals(101, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringReader0.read();
      assertEquals(108, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      StringReader stringReader1 = new StringReader("EV>J19S(%WT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 115, 115);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals("EV", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(116, token0.endColumn);
      assertEquals(115, token0.beginLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(115, token0.endLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("G", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null, 117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 117. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"preceding::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('p', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("receding", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(":", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, simpleCharStream0.bufpos);
      assertEquals(10, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(10, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JZ+yH,Ur^aD*A");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1308, (-1053));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals((-1053), simpleCharStream0.getBeginColumn());
      assertEquals(1308, simpleCharStream0.getLine());
      assertEquals(1308, simpleCharStream0.getBeginLine());
      assertEquals(1308, simpleCharStream0.getEndLine());
      assertEquals((-1053), simpleCharStream0.getColumn());
      assertEquals((-1053), simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('Z', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1053), simpleCharStream0.getBeginColumn());
      assertEquals(1308, simpleCharStream0.getLine());
      assertEquals(1308, simpleCharStream0.getBeginLine());
      assertEquals(1308, simpleCharStream0.getEndLine());
      assertEquals((-1053), simpleCharStream0.getColumn());
      assertEquals((-1053), simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1052), simpleCharStream0.getBeginColumn());
      assertEquals(1308, simpleCharStream0.getLine());
      assertEquals(1308, simpleCharStream0.getBeginLine());
      assertEquals(1308, simpleCharStream0.getEndLine());
      assertEquals((-1052), simpleCharStream0.getColumn());
      assertEquals((-1052), simpleCharStream0.getEndColumn());
      assertEquals("+", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(9, token0.kind);
      assertEquals(1308, token0.beginLine);
      assertEquals((-1052), token0.beginColumn);
      assertEquals((-1052), token0.endColumn);
      assertEquals(1308, token0.endLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'ywZG84ba%S.+9y");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 39, 28);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('y', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("wZG84ba", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0016';
      StringReader stringReader1 = new StringReader("\"[\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("G", token0.toString());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-40)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JZ+XyH,Ur^aD*A");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      StringReader stringReader1 = new StringReader("JZ+XyH,Ur^aD*A");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("5Z;s>f:dYO9UY3Op8U");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 74, 74);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(74, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals(74, simpleCharStream0.getBeginColumn());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(74, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getBeginLine());
      assertEquals("5", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(74, token0.endLine);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(74, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      XPathParserTokenManager xPathParserTokenManager1 = null;
      try {
        xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("62C;.\"9PX");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(54, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instrction");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("processing-instrction");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("processing-instr", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, simpleCharStream0.bufpos);
      assertEquals(16, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GXeTU>n[U8 j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("GX", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y:+Yf4~x1Fc37l16");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader1 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = stringReader1.read();
      assertEquals(95, int1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      assertNotSame(stringReader1, stringReader0);
      
      StringReader stringReader2 = new StringReader("Y:+Yf4~x1Fc37l16");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Y", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals("iv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(100, token0.beginColumn);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(101, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Digit>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('<', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Digit", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(">", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(15, token1.kind);
      assertEquals(7, token1.beginColumn);
      assertEquals(7, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(">", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(7, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.endColumn);
      assertEquals(15, token2.kind);
      assertEquals(1, token2.beginLine);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m#v");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("m", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R_$R@>8G@");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(82, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 116, 116);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(116, simpleCharStream0.getLine());
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals(116, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals(116, simpleCharStream0.getEndLine());
      assertEquals(116, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('_', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(116, simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(117, simpleCharStream0.getBeginColumn());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(116, simpleCharStream0.getEndLine());
      assertEquals(116, simpleCharStream0.getBeginLine());
      assertEquals("$", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(17, token0.kind);
      assertEquals(116, token0.beginLine);
      assertEquals(116, token0.endLine);
      assertEquals(117, token0.beginColumn);
      assertEquals(117, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 117. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader("node");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(71, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals(71, simpleCharStream0.getBeginLine());
      assertEquals(71, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(71, simpleCharStream0.getBeginColumn());
      assertEquals("node", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(74, token0.endColumn);
      assertEquals(71, token0.endLine);
      assertEquals(71, token0.beginColumn);
      assertEquals(71, token0.beginLine);
      assertEquals(31, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-783), (-783));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-783), simpleCharStream0.getColumn());
      assertEquals((-783), simpleCharStream0.getLine());
      assertEquals((-783), simpleCharStream0.getBeginColumn());
      assertEquals((-783), simpleCharStream0.getEndColumn());
      assertEquals((-783), simpleCharStream0.getBeginLine());
      assertEquals((-783), simpleCharStream0.getEndLine());
      assertEquals("X", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-783), token0.endColumn);
      assertEquals((-783), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-783), token0.endLine);
      assertEquals((-783), token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = 510;
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(510, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-184), (-1053));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals((-1053), simpleCharStream0.getColumn());
      assertEquals((-184), simpleCharStream0.getBeginLine());
      assertEquals((-1053), simpleCharStream0.getEndColumn());
      assertEquals((-184), simpleCharStream0.getLine());
      assertEquals((-1053), simpleCharStream0.getBeginColumn());
      assertEquals((-184), simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('$', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1053), simpleCharStream0.getColumn());
      assertEquals((-184), simpleCharStream0.getBeginLine());
      assertEquals((-1053), simpleCharStream0.getEndColumn());
      assertEquals((-184), simpleCharStream0.getLine());
      assertEquals((-1053), simpleCharStream0.getBeginColumn());
      assertEquals((-184), simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals((-1047), simpleCharStream0.getEndColumn());
      assertEquals((-184), simpleCharStream0.getBeginLine());
      assertEquals((-184), simpleCharStream0.getLine());
      assertEquals((-1052), simpleCharStream0.getBeginColumn());
      assertEquals((-1047), simpleCharStream0.getColumn());
      assertEquals((-184), simpleCharStream0.getEndLine());
      assertEquals("ozBugd", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-1047), token0.endColumn);
      assertEquals((-184), token0.beginLine);
      assertEquals((-184), token0.endLine);
      assertEquals((-1052), token0.beginColumn);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 52, 947);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(947, simpleCharStream0.getBeginColumn());
      assertEquals(52, simpleCharStream0.getLine());
      assertEquals(968, simpleCharStream0.getEndColumn());
      assertEquals(52, simpleCharStream0.getBeginLine());
      assertEquals(968, simpleCharStream0.getColumn());
      assertEquals(52, simpleCharStream0.getEndLine());
      assertEquals("processing-instruction", token0.toString());
      assertEquals(21, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(968, token0.endColumn);
      assertEquals(52, token0.endLine);
      assertEquals(34, token0.kind);
      assertEquals(52, token0.beginLine);
      assertEquals(947, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-280), (-280));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      simpleCharStream0.UpdateLineColumn('1');
      assertEquals((-280), simpleCharStream0.getEndLine());
      assertEquals((-280), simpleCharStream0.getColumn());
      assertEquals((-280), simpleCharStream0.getBeginColumn());
      assertEquals((-280), simpleCharStream0.getEndColumn());
      assertEquals((-280), simpleCharStream0.getLine());
      assertEquals((-280), simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.jjmatchedKind = 0;
      assertEquals((-280), simpleCharStream0.getEndLine());
      assertEquals((-280), simpleCharStream0.getColumn());
      assertEquals((-280), simpleCharStream0.getBeginColumn());
      assertEquals((-280), simpleCharStream0.getEndColumn());
      assertEquals((-280), simpleCharStream0.getLine());
      assertEquals((-280), simpleCharStream0.getBeginLine());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-280), simpleCharStream0.getEndLine());
      assertEquals((-280), simpleCharStream0.getColumn());
      assertEquals((-280), simpleCharStream0.getBeginColumn());
      assertEquals((-280), simpleCharStream0.getEndColumn());
      assertEquals((-280), simpleCharStream0.getLine());
      assertEquals((-280), simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 117);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0, 26);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream1);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\"P\uFFFD\"", token0.toString());
      assertArrayEquals(new byte[] {(byte)34, (byte)80, (byte) (-29), (byte)34, (byte) (-29), (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(18, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals("iv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(100, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(100, token0.endLine);
      assertEquals(101, token0.endColumn);
      assertEquals(100, token0.beginColumn);
      assertNotNull(token0);
      
      simpleCharStream0.UpdateLineColumn('[');
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(102, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals(102, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(102, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals(102, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader0 = new StringReader("<Letter>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Letter", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(7, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("parent::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 86, 86);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(86, simpleCharStream0.getEndLine());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(86, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(86, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getBeginLine());
      assertEquals("parent::", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(93, token0.endColumn);
      assertEquals(86, token0.endLine);
      assertEquals(86, token0.beginColumn);
      assertEquals(86, token0.beginLine);
      assertEquals(37, token0.kind);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(86, simpleCharStream0.getEndLine());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(86, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(86, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(86, simpleCharStream0.getEndLine());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(86, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(86, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!Mw~Y0QCB");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(33, int0);
      
      int int1 = stringReader0.read();
      assertEquals(77, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 77, 100);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(77, simpleCharStream0.getLine());
      assertEquals(77, simpleCharStream0.getBeginLine());
      assertEquals(100, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getColumn());
      assertEquals(77, simpleCharStream0.getEndLine());
      assertEquals("w", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(77, token0.beginLine);
      assertEquals(77, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(100, token0.beginColumn);
      assertEquals(100, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[5] = 's';
      charArray0[6] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', '4', 'U', '>', 'n', '['}, charArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 20, 17, 7);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("U8", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, token0.endColumn);
      assertEquals(20, token0.beginLine);
      assertEquals(20, token0.endLine);
      assertEquals(17, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(20, simpleCharStream0.getEndColumn());
      assertEquals(20, simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getColumn());
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("1", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(20, token1.endLine);
      assertEquals(20, token1.endColumn);
      assertEquals(20, token1.beginLine);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("j", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(78, token2.kind);
      assertEquals(20, token2.endLine);
      assertEquals(20, token2.beginLine);
      assertEquals(21, token2.beginColumn);
      assertEquals(21, token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertEquals("", token3.toString());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals(0, token3.kind);
      assertEquals(21, token3.endColumn);
      assertEquals(21, token3.beginColumn);
      assertEquals(20, token3.endLine);
      assertEquals(20, token3.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("di");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("di", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, (-1140), (-2741));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K<H%EzS");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(75, int0);
      
      StringReader stringReader1 = new StringReader("K<H%EzS");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1787), (-1787));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1787), simpleCharStream0.getColumn());
      assertEquals((-1787), simpleCharStream0.getBeginLine());
      assertEquals((-1787), simpleCharStream0.getBeginColumn());
      assertEquals((-1787), simpleCharStream0.getEndLine());
      assertEquals((-1787), simpleCharStream0.getEndColumn());
      assertEquals((-1787), simpleCharStream0.getLine());
      assertEquals("K", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals((-1787), token0.beginLine);
      assertEquals((-1787), token0.endLine);
      assertEquals((-1787), token0.beginColumn);
      assertEquals((-1787), token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("numbN;");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("numbN;");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals("numbN", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("YC", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("@", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F^m7&\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-512), (-2829));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -512, column -2829.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.FUNCTION_SUBSTRING;
      assertEquals(62, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 27, 62);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(64, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals("sum", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(64, token0.endColumn);
      assertEquals(62, token0.beginColumn);
      assertEquals(73, token0.kind);
      assertEquals(27, token0.endLine);
      assertEquals(27, token0.beginLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(64, simpleCharStream0.getColumn());
      assertEquals(64, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(64, token1.endColumn);
      assertEquals(27, token1.endLine);
      assertEquals(27, token1.beginLine);
      assertEquals(64, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("V_YX_GR`=@;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 111, 9);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(111, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(111, simpleCharStream0.getLine());
      assertEquals(111, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getBeginColumn());
      assertEquals("V_YX_GR", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token0.endColumn);
      assertEquals(9, token0.beginColumn);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      int int1 = stringReader0.read();
      assertEquals(102, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader(">%18,[i[)LLh7M");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 102, 2147418113);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2147418113, simpleCharStream0.getBeginColumn());
      assertEquals(102, simpleCharStream0.getBeginLine());
      assertEquals(102, simpleCharStream0.getLine());
      assertEquals(2147418113, simpleCharStream0.getColumn());
      assertEquals(2147418113, simpleCharStream0.getEndColumn());
      assertEquals(102, simpleCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(15, token0.kind);
      assertEquals(2147418113, token0.endColumn);
      assertEquals(2147418113, token0.beginColumn);
      assertEquals(102, token0.endLine);
      assertEquals(102, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Digit>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('<', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Digit", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 16, (-1924));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 691, 41);
      assertEquals(3, byteArray0.length);
      assertEquals((-688), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)5, (byte) (-59), (byte)46}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals((-688), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)5, (byte) (-59), (byte)46}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(3, byteArray0.length);
      assertEquals((-688), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)5, (byte) (-59), (byte)46}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1924), simpleCharStream0.getBeginColumn());
      assertEquals((-1924), simpleCharStream0.getColumn());
      assertEquals((-1924), simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getLine());
      assertEquals(16, simpleCharStream0.getEndLine());
      assertEquals(16, simpleCharStream0.getBeginLine());
      assertEquals("9", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1924), token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(16, token0.beginLine);
      assertEquals((-1924), token0.endColumn);
      assertNotNull(token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      int int1 = stringReader0.read();
      assertEquals(89, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 89, 34);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(89, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getLine());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertEquals(34, simpleCharStream0.getColumn());
      assertEquals(34, simpleCharStream0.getEndColumn());
      assertEquals(89, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('C', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(89, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getLine());
      assertEquals(35, simpleCharStream0.getColumn());
      assertEquals(35, simpleCharStream0.getBeginColumn());
      assertEquals(89, simpleCharStream0.getEndLine());
      assertEquals(35, simpleCharStream0.getEndColumn());
      assertEquals("@", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(89, token0.endLine);
      assertEquals(35, token0.beginColumn);
      assertEquals(35, token0.endColumn);
      assertEquals(89, token0.beginLine);
      assertEquals(86, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(89, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(89, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals("U", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(89, token1.beginLine);
      assertEquals(37, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(89, token1.endLine);
      assertEquals(37, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"translate\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("translate", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(65, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mod");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("mod", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(29, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processin}-instrction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("processin", token0.toString());
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VH^pGzUDuTZ{5Bx\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("VH", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Digit>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(71, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      StringReader stringReader2 = new StringReader("*ckvvld#V<#LS");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 10, 13);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(10, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(10, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(10, simpleCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(10, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(10, token0.endLine);
      assertEquals(13, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(10, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getLine());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(10, simpleCharStream0.getEndLine());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals("ckvvld", token1.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, token1.endLine);
      assertEquals(10, token1.beginLine);
      assertEquals(19, token1.endColumn);
      assertEquals(14, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format-number");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AND;
      assertEquals(28, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals("format-number", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(13, token0.endColumn);
      assertEquals(77, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"preceding::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("preceding::", token0.toString());
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(12, token0.endColumn);
      assertEquals(41, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 65, 65);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      SimpleCharStream simpleCharStream1 = null;
      xPathParserTokenManager0.ReInit((SimpleCharStream) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F^m7&\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-512), (-2829));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      int int1 = stringReader0.read();
      assertEquals(94, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-2829), (-2829));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-2828), simpleCharStream0.getColumn());
      assertEquals((-512), simpleCharStream0.getEndLine());
      assertEquals((-512), simpleCharStream0.getBeginLine());
      assertEquals((-2828), simpleCharStream0.getEndColumn());
      assertEquals((-2829), simpleCharStream0.getBeginColumn());
      assertEquals((-512), simpleCharStream0.getLine());
      assertEquals("m7", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-2828), token0.endColumn);
      assertEquals((-512), token0.endLine);
      assertEquals((-2829), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-512), token0.beginLine);
      assertNotNull(token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -512, column -2827.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("and", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(28, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.FUNCTION_SUBSTRING;
      assertEquals(62, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 62, 62);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(62, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getEndColumn());
      assertEquals(64, simpleCharStream0.getColumn());
      assertEquals(62, simpleCharStream0.getLine());
      assertEquals("sum", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(62, token0.beginColumn);
      assertEquals(62, token0.beginLine);
      assertEquals(64, token0.endColumn);
      assertEquals(62, token0.endLine);
      assertEquals(73, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      int int1 = stringReader0.read();
      assertEquals(89, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("\"preceding-sibling::\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 89, (-978));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals((-978), simpleCharStream0.getEndColumn());
      assertEquals(89, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getLine());
      assertEquals((-978), simpleCharStream0.getBeginColumn());
      assertEquals(89, simpleCharStream0.getEndLine());
      assertEquals((-978), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-977), simpleCharStream0.getBeginColumn());
      assertEquals(89, simpleCharStream0.getBeginLine());
      assertEquals((-959), simpleCharStream0.getEndColumn());
      assertEquals(89, simpleCharStream0.getLine());
      assertEquals((-959), simpleCharStream0.getColumn());
      assertEquals(89, simpleCharStream0.getEndLine());
      assertEquals("preceding-sibling::", token0.toString());
      assertEquals(19, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(46, token0.kind);
      assertEquals((-977), token0.beginColumn);
      assertEquals(89, token0.endLine);
      assertEquals((-959), token0.endColumn);
      assertEquals(89, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 89, column -957.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 103, 103);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, 103, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 103. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PA7L");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("PA7L", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, (-1518));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1518. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+R]8ll4puJ(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(43, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 43, 121);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(121, simpleCharStream0.getEndColumn());
      assertEquals(43, simpleCharStream0.getLine());
      assertEquals(121, simpleCharStream0.getColumn());
      assertEquals(121, simpleCharStream0.getBeginColumn());
      assertEquals(43, simpleCharStream0.getEndLine());
      assertEquals(43, simpleCharStream0.getBeginLine());
      assertEquals("R", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(43, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(121, token0.beginColumn);
      assertEquals(121, token0.endColumn);
      assertEquals(43, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(121, simpleCharStream0.getEndColumn());
      assertEquals(43, simpleCharStream0.getLine());
      assertEquals(121, simpleCharStream0.getColumn());
      assertEquals(121, simpleCharStream0.getBeginColumn());
      assertEquals(43, simpleCharStream0.getEndLine());
      assertEquals(43, simpleCharStream0.getBeginLine());
      assertEquals("R", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(121, token1.beginColumn);
      assertEquals(43, token1.endLine);
      assertEquals(43, token1.beginLine);
      assertEquals(121, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader2 = new StringReader("position");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 2519, 2519);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2526, simpleCharStream0.getEndColumn());
      assertEquals(2526, simpleCharStream0.getColumn());
      assertEquals(2519, simpleCharStream0.getEndLine());
      assertEquals(2519, simpleCharStream0.getBeginColumn());
      assertEquals(2519, simpleCharStream0.getBeginLine());
      assertEquals(2519, simpleCharStream0.getLine());
      assertEquals("position", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2519, token0.beginLine);
      assertEquals(2519, token0.beginColumn);
      assertEquals(2519, token0.endLine);
      assertEquals(2526, token0.endColumn);
      assertEquals(49, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2526, simpleCharStream0.getEndColumn());
      assertEquals(2526, simpleCharStream0.getColumn());
      assertEquals(2526, simpleCharStream0.getBeginColumn());
      assertEquals(2519, simpleCharStream0.getEndLine());
      assertEquals(2519, simpleCharStream0.getBeginLine());
      assertEquals(2519, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2519, token1.endLine);
      assertEquals(2519, token1.beginLine);
      assertEquals(2526, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(2526, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      int int1 = stringReader0.read();
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("Nq~=JOL{q\"tSH9tzA");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-570), 27);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      simpleCharStream0.column = (-570);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals((-570), simpleCharStream0.getEndLine());
      assertEquals((-569), simpleCharStream0.getBeginColumn());
      assertEquals((-568), simpleCharStream0.getColumn());
      assertEquals((-568), simpleCharStream0.getEndColumn());
      assertEquals((-570), simpleCharStream0.getLine());
      assertEquals((-570), simpleCharStream0.getBeginLine());
      assertEquals("Nq", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-570), token0.beginLine);
      assertEquals((-569), token0.beginColumn);
      assertEquals((-570), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-568), token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I%y");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(73, int0);
      
      int int1 = 80;
      int int2 = 121;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 121, 73);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.defaultLexState = 80;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 121, column 73.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      int int1 = stringReader0.read();
      assertEquals(102, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("<=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 50, 45);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(50, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(50, simpleCharStream0.getEndLine());
      assertEquals(45, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(50, simpleCharStream0.getLine());
      assertEquals("<=", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals(14, token0.kind);
      assertEquals(45, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      int int1 = stringReader0.read();
      assertEquals(36, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 120, 120);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(120, simpleCharStream0.getEndLine());
      assertEquals(120, simpleCharStream0.getBeginLine());
      assertEquals(120, simpleCharStream0.getLine());
      assertEquals(120, simpleCharStream0.getEndColumn());
      assertEquals(120, simpleCharStream0.getColumn());
      assertEquals(120, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('o', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(120, simpleCharStream0.getEndLine());
      assertEquals(120, simpleCharStream0.getBeginLine());
      assertEquals(120, simpleCharStream0.getLine());
      assertEquals(120, simpleCharStream0.getEndColumn());
      assertEquals(120, simpleCharStream0.getColumn());
      assertEquals(120, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(125, simpleCharStream0.getEndColumn());
      assertEquals(120, simpleCharStream0.getEndLine());
      assertEquals(125, simpleCharStream0.getColumn());
      assertEquals(120, simpleCharStream0.getBeginLine());
      assertEquals(121, simpleCharStream0.getBeginColumn());
      assertEquals(120, simpleCharStream0.getLine());
      assertEquals("zBugd", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(125, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(120, token0.beginLine);
      assertEquals(121, token0.beginColumn);
      assertEquals(120, token0.endLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!Mw~Y0QCB");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(33, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 33, 100);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(33, simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getBeginLine());
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals(33, simpleCharStream0.getEndLine());
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals("Mw", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(101, token0.endColumn);
      assertEquals(100, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(33, token0.endLine);
      assertEquals(33, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X0m=w$]V[H1Pxe");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      int int1 = stringReader0.read();
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("](VZ)cY|&$%A<(W1_");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 37, 37);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager2.getNextToken();
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals("]", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTUm>n[U8 b");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 75, (-1518));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(75, simpleCharStream0.getLine());
      assertEquals((-1518), simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getBeginLine());
      assertEquals(75, simpleCharStream0.getEndLine());
      assertEquals((-1517), simpleCharStream0.getColumn());
      assertEquals((-1517), simpleCharStream0.getEndColumn());
      assertEquals("GX", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(75, token0.beginLine);
      assertEquals((-1517), token0.endColumn);
      assertEquals((-1518), token0.beginColumn);
      assertEquals(75, token0.endLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(75, simpleCharStream0.getLine());
      assertEquals((-1518), simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getBeginLine());
      assertEquals(75, simpleCharStream0.getEndLine());
      assertEquals((-1517), simpleCharStream0.getColumn());
      assertEquals((-1517), simpleCharStream0.getEndColumn());
      assertEquals("GX", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1517), token1.endColumn);
      assertEquals((-1518), token1.beginColumn);
      assertEquals(75, token1.beginLine);
      assertEquals(75, token1.endLine);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("GX", "GX");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // GX
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I%y");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.Ideographic;
      assertEquals(23, int0);
      
      int int1 = 80;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 184, 23);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(23, simpleCharStream0.getBeginColumn());
      assertEquals(23, simpleCharStream0.getColumn());
      assertEquals(184, simpleCharStream0.getLine());
      assertEquals(184, simpleCharStream0.getBeginLine());
      assertEquals(23, simpleCharStream0.getEndColumn());
      assertEquals(184, simpleCharStream0.getEndLine());
      assertEquals("I", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(184, token0.beginLine);
      assertEquals(23, token0.beginColumn);
      assertEquals(23, token0.endColumn);
      assertEquals(184, token0.endLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(184);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 184. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1863), (-1863));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("X", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("or");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("or", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(27, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("self::", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token0.endColumn);
      assertEquals(35, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F^m7&\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-512), (-2829));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -512, column -2829.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oQ9EzeWWi_DBf~0EX");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(111, int0);
      
      StringReader stringReader1 = new StringReader("i0ANNj3-0");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.mark(111);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      int int1 = stringReader1.read();
      assertEquals(105, int1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      assertNotSame(stringReader1, stringReader0);
      
      StringReader stringReader2 = new StringReader("i0ANNj3-0");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("r IoVFmM(");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader3.markSupported();
      assertTrue(boolean0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader3, 2444, 101);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(2444, simpleCharStream0.getLine());
      assertEquals(101, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals(2444, simpleCharStream0.getEndLine());
      assertEquals(2444, simpleCharStream0.getBeginLine());
      assertEquals("r", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(101, token0.endColumn);
      assertEquals(101, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(2444, token0.endLine);
      assertEquals(2444, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(2444, simpleCharStream0.getLine());
      assertEquals(101, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals(2444, simpleCharStream0.getEndLine());
      assertEquals(2444, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token1 = xPathParserTokenManager1.jjFillToken();
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(2444, simpleCharStream0.getLine());
      assertEquals(101, simpleCharStream0.getBeginColumn());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals(2444, simpleCharStream0.getEndLine());
      assertEquals(2444, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(101, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(2444, token1.beginLine);
      assertEquals(2444, token1.endLine);
      assertEquals(101, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader("namespace::");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 71, 47);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(71, simpleCharStream0.getEndLine());
      assertEquals(71, simpleCharStream0.getLine());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.getBeginColumn());
      assertEquals(71, simpleCharStream0.getBeginLine());
      assertEquals("namespace::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(40, token0.kind);
      assertEquals(57, token0.endColumn);
      assertEquals(71, token0.endLine);
      assertEquals(71, token0.beginLine);
      assertEquals(47, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(71, simpleCharStream0.getEndLine());
      assertEquals(71, simpleCharStream0.getLine());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.getBeginColumn());
      assertEquals(71, simpleCharStream0.getBeginLine());
      assertEquals("namespace::", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(40, token1.kind);
      assertEquals(71, token1.beginLine);
      assertEquals(57, token1.endColumn);
      assertEquals(71, token1.endLine);
      assertEquals(47, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dIv");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      int int1 = stringReader0.read();
      assertEquals(73, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 73);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals("v", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(73, token0.endColumn);
      assertEquals(73, token0.beginColumn);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$FBsCTDV:");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(36, int0);
      
      StringReader stringReader1 = new StringReader("`ZOB&]b>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 36, 2567);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 36, column 2567.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("processing-instruction");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(112, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1688), (-1760));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1760), simpleCharStream0.getBeginColumn());
      assertEquals((-1688), simpleCharStream0.getLine());
      assertEquals((-1688), simpleCharStream0.getEndLine());
      assertEquals((-1740), simpleCharStream0.getEndColumn());
      assertEquals((-1688), simpleCharStream0.getBeginLine());
      assertEquals((-1740), simpleCharStream0.getColumn());
      assertEquals("rocessing-instruction", token0.toString());
      assertEquals(20, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1688), token0.endLine);
      assertEquals((-1688), token0.beginLine);
      assertEquals((-1740), token0.endColumn);
      assertEquals((-1760), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dn{5");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 92, 78);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(92, simpleCharStream0.getLine());
      assertEquals(92, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getEndColumn());
      assertEquals(78, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getBeginColumn());
      assertEquals(92, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('n', char0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 92, column 79.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(95, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 25, 25);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      xPathParserTokenManager1.debugStream = xPathParserTokenManager0.debugStream;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(25, simpleCharStream0.getBeginLine());
      assertEquals(25, simpleCharStream0.getColumn());
      assertEquals(25, simpleCharStream0.getEndLine());
      assertEquals(25, simpleCharStream0.getLine());
      assertEquals(25, simpleCharStream0.getEndColumn());
      assertEquals("a", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(25, token0.endColumn);
      assertEquals(25, token0.beginColumn);
      assertEquals(25, token0.endLine);
      assertEquals(25, token0.beginLine);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instrction");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(112, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals("rocessing-instr", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dIv");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      int int1 = stringReader0.read();
      assertEquals(73, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 97, 73);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals(97, simpleCharStream0.getBeginLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(97, simpleCharStream0.getEndLine());
      assertEquals(97, simpleCharStream0.getLine());
      assertEquals("v", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(97, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(97, token0.beginLine);
      assertEquals(73, token0.beginColumn);
      assertEquals(73, token0.endColumn);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals(97, simpleCharStream0.getBeginLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(97, simpleCharStream0.getEndLine());
      assertEquals(97, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(73, token1.endColumn);
      assertEquals(73, token1.beginColumn);
      assertEquals(97, token1.endLine);
      assertEquals(97, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      int int1 = XPathParserConstants.NODE;
      assertEquals(31, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader(".?olRv0-9C");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 39, 31);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(31, simpleCharStream0.getBeginColumn());
      assertEquals(31, simpleCharStream0.getColumn());
      assertEquals(31, simpleCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(31, token0.endColumn);
      assertEquals(82, token0.kind);
      assertEquals(31, token0.beginColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.endLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 39, column 32.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      int int1 = stringReader0.read();
      assertEquals(102, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2004), 102);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(102, simpleCharStream0.getEndColumn());
      assertEquals((-2004), simpleCharStream0.getEndLine());
      assertEquals(102, simpleCharStream0.getBeginColumn());
      assertEquals(102, simpleCharStream0.getColumn());
      assertEquals((-2004), simpleCharStream0.getBeginLine());
      assertEquals((-2004), simpleCharStream0.getLine());
      assertEquals("8", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-2004), token0.endLine);
      assertEquals(102, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals((-2004), token0.beginLine);
      assertEquals(102, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1v");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("1", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tm");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.FUNCTION_SUBSTRING;
      assertEquals(62, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 62);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(63, simpleCharStream0.getEndColumn());
      assertEquals(63, simpleCharStream0.getColumn());
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals("Tm", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.endLine);
      assertEquals(63, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(62, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(63, simpleCharStream0.getEndColumn());
      assertEquals(63, simpleCharStream0.getColumn());
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(63, simpleCharStream0.getBeginColumn());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(105, token1.beginLine);
      assertEquals(105, token1.endLine);
      assertEquals(63, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(63, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"d[\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("\"d[\"", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(18, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processin}-instrction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|B?,!eJ=?A;m-l~Y|9");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(124, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("B", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginLine());
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("div", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(30, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("div", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(30, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 957, 957);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(957, simpleCharStream0.getEndLine());
      assertEquals(957, simpleCharStream0.getBeginColumn());
      assertEquals(957, simpleCharStream0.getEndColumn());
      assertEquals(957, simpleCharStream0.getBeginLine());
      assertEquals(957, simpleCharStream0.getLine());
      assertEquals(957, simpleCharStream0.getColumn());
      assertEquals(")", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(957, token0.beginLine);
      assertEquals(957, token0.endLine);
      assertEquals(957, token0.beginColumn);
      assertEquals(957, token0.endColumn);
      assertEquals(81, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o^0QDZJt.bK");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(111, int0);
      
      int int1 = stringReader0.read();
      assertEquals(94, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 94, 111);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(111, simpleCharStream0.getBeginColumn());
      assertEquals(94, simpleCharStream0.getBeginLine());
      assertEquals(94, simpleCharStream0.getLine());
      assertEquals(111, simpleCharStream0.getColumn());
      assertEquals(111, simpleCharStream0.getEndColumn());
      assertEquals(94, simpleCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(111, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(94, token0.endLine);
      assertEquals(111, token0.beginColumn);
      assertEquals(94, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(111, simpleCharStream0.getBeginColumn());
      assertEquals(94, simpleCharStream0.getBeginLine());
      assertEquals(94, simpleCharStream0.getLine());
      assertEquals(111, simpleCharStream0.getColumn());
      assertEquals(111, simpleCharStream0.getEndColumn());
      assertEquals(94, simpleCharStream0.getEndLine());
      assertEquals("0", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(111, token1.beginColumn);
      assertEquals(94, token1.endLine);
      assertEquals(94, token1.beginLine);
      assertEquals(20, token1.kind);
      assertEquals(111, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 115);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals("elf", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(117, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(118, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(118, simpleCharStream0.getBeginColumn());
      assertEquals(118, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(115, token1.endLine);
      assertEquals(118, token1.beginColumn);
      assertEquals(115, token1.beginLine);
      assertEquals(79, token1.kind);
      assertEquals(118, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nume");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-736), 1872);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-736), simpleCharStream0.getBeginLine());
      assertEquals(1875, simpleCharStream0.getEndColumn());
      assertEquals((-736), simpleCharStream0.getLine());
      assertEquals(1872, simpleCharStream0.getBeginColumn());
      assertEquals(1875, simpleCharStream0.getColumn());
      assertEquals((-736), simpleCharStream0.getEndLine());
      assertEquals("nume", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1872, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-736), token0.endLine);
      assertEquals((-736), token0.beginLine);
      assertEquals(1875, token0.endColumn);
      assertNotNull(token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a`r~;R#; 3p!2i~u");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("a", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 78, 109);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(109, simpleCharStream0.getEndColumn());
      assertEquals(109, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals(109, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('f', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(110, simpleCharStream0.getBeginColumn());
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("8", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.beginLine);
      assertEquals(78, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(110, token0.endColumn);
      assertEquals(110, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(111, simpleCharStream0.getEndColumn());
      assertEquals(111, simpleCharStream0.getBeginColumn());
      assertEquals(111, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("F", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(111, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(78, token1.endLine);
      assertEquals(78, token1.beginLine);
      assertEquals(111, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(111, simpleCharStream0.getEndColumn());
      assertEquals(111, simpleCharStream0.getBeginColumn());
      assertEquals(111, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 78, column 112.  Encountered: \"~\" (126), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I%y");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(73, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 121, 73);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('%', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("y", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 39, (byte)6);
      assertEquals(6, byteArray0.length);
      assertEquals((-33), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-2), 2727);
      assertEquals(6, byteArray0.length);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(6, byteArray0.length);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$@\":aXKa j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("uqkg<a3Jk`P");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(117, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 2103, 1411);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1411, simpleCharStream0.getColumn());
      assertEquals(1411, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(1411, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('q', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1413, simpleCharStream0.getColumn());
      assertEquals(1412, simpleCharStream0.getBeginColumn());
      assertEquals(1413, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals("kg", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1413, token0.endColumn);
      assertEquals(1412, token0.beginColumn);
      assertEquals(2103, token0.endLine);
      assertEquals(2103, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1414, simpleCharStream0.getColumn());
      assertEquals(1414, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(1414, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals("<", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2103, token1.beginLine);
      assertEquals(2103, token1.endLine);
      assertEquals(13, token1.kind);
      assertEquals(1414, token1.beginColumn);
      assertEquals(1414, token1.endColumn);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4TU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      int int1 = stringReader0.read();
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2103, 88);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals("4", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2103, token0.endLine);
      assertEquals(89, token0.endColumn);
      assertEquals(89, token0.beginColumn);
      assertEquals(2103, token0.beginLine);
      assertEquals(20, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(90, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals("TU", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(91, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(90, token1.beginColumn);
      assertEquals(2103, token1.endLine);
      assertEquals(2103, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(90, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals(92, simpleCharStream0.getBeginColumn());
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(">", token2.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token2.kind);
      assertEquals(92, token2.endColumn);
      assertEquals(92, token2.beginColumn);
      assertEquals(2103, token2.endLine);
      assertEquals(2103, token2.beginLine);
      assertNotNull(token2);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals("n", token3.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2103, token3.beginLine);
      assertEquals(93, token3.endColumn);
      assertEquals(93, token3.beginColumn);
      assertEquals(2103, token3.endLine);
      assertEquals(78, token3.kind);
      assertNotNull(token3);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JZ+XyH,Ur^aD*A");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      int int0 = XPathParserConstants.FUNCTION_FALSE;
      assertEquals(69, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("JZ", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("+", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null, 0);
      assertNotNull(xPathParserTokenManager0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      pushbackInputStream0.mark(31);
      assertFalse(fileDescriptor0.valid());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, (-4237), (-4237), 0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      xPathParserTokenManager0.ReInit(simpleCharStream1);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.defaultLexState = 7;
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.CombiningChar;
      assertEquals(24, int0);
      
      StringReader stringReader1 = new StringReader("AU_<>[7hXKo[ nKPW");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 1882, 1882);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1882, simpleCharStream0.getBeginColumn());
      assertEquals(1882, simpleCharStream0.getBeginLine());
      assertEquals(1882, simpleCharStream0.getEndLine());
      assertEquals(1884, simpleCharStream0.getEndColumn());
      assertEquals(1884, simpleCharStream0.getColumn());
      assertEquals(1882, simpleCharStream0.getLine());
      assertEquals("AU_", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1884, token0.endColumn);
      assertEquals(1882, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1882, token0.beginColumn);
      assertEquals(1882, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1882, simpleCharStream0.getBeginLine());
      assertEquals(1882, simpleCharStream0.getEndLine());
      assertEquals(1885, simpleCharStream0.getBeginColumn());
      assertEquals(1885, simpleCharStream0.getEndColumn());
      assertEquals(1885, simpleCharStream0.getColumn());
      assertEquals(1882, simpleCharStream0.getLine());
      assertEquals("<", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1882, token1.endLine);
      assertEquals(1882, token1.beginLine);
      assertEquals(1885, token1.endColumn);
      assertEquals(13, token1.kind);
      assertEquals(1885, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\t\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-name");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("local-name");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 13, 1945);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(1945, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(1954, simpleCharStream0.getColumn());
      assertEquals(1954, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals("local-name", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1954, token0.endColumn);
      assertEquals(53, token0.kind);
      assertEquals(13, token0.beginLine);
      assertEquals(1945, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      int int1 = stringReader0.read();
      assertEquals(102, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringReader0.read();
      assertEquals(56, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      StringReader stringReader1 = new StringReader("\"self::\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-463), 66);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, (-463), 105);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals((-463), simpleCharStream0.getEndLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals((-463), simpleCharStream0.getBeginLine());
      assertEquals(66, simpleCharStream0.getBeginColumn());
      assertEquals((-463), simpleCharStream0.getLine());
      assertEquals("\"self::\"", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(73, token0.endColumn);
      assertEquals((-463), token0.beginLine);
      assertEquals(66, token0.beginColumn);
      assertEquals((-463), token0.endLine);
      assertEquals(18, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals((-463), simpleCharStream0.getEndLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals((-463), simpleCharStream0.getBeginLine());
      assertEquals((-463), simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(73, token1.endColumn);
      assertEquals(73, token1.beginColumn);
      assertEquals((-463), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-463), token1.endLine);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals((-463), simpleCharStream0.getEndLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals((-463), simpleCharStream0.getBeginLine());
      assertEquals((-463), simpleCharStream0.getLine());
      assertEquals("", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals((-463), token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(73, token2.beginColumn);
      assertEquals(73, token2.endColumn);
      assertEquals((-463), token2.endLine);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 115);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('e', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(116, simpleCharStream0.getBeginColumn());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals("lf", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(117, token0.endColumn);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      int int1 = stringReader0.read();
      assertEquals(101, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("processing-instruction");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 52, 947);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(968, simpleCharStream0.getEndColumn());
      assertEquals(968, simpleCharStream0.getColumn());
      assertEquals(52, simpleCharStream0.getEndLine());
      assertEquals(947, simpleCharStream0.getBeginColumn());
      assertEquals(52, simpleCharStream0.getBeginLine());
      assertEquals(52, simpleCharStream0.getLine());
      assertEquals("processing-instruction", token0.toString());
      assertEquals(21, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(968, token0.endColumn);
      assertEquals(52, token0.beginLine);
      assertEquals(947, token0.beginColumn);
      assertEquals(52, token0.endLine);
      assertEquals(34, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("LebJD/tb}V#y_4<+ZB");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 13, 13);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals("LebJD", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(17, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ydhUZeMp");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(121, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-123), (-123));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-123), simpleCharStream0.getBeginColumn());
      assertEquals((-123), simpleCharStream0.getLine());
      assertEquals((-117), simpleCharStream0.getEndColumn());
      assertEquals((-123), simpleCharStream0.getBeginLine());
      assertEquals((-123), simpleCharStream0.getEndLine());
      assertEquals((-117), simpleCharStream0.getColumn());
      assertEquals("dhUZeMp", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-117), token0.endColumn);
      assertEquals((-123), token0.endLine);
      assertEquals((-123), token0.beginLine);
      assertEquals((-123), token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      int int1 = stringReader0.read();
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2103, 88);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals("4", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2103, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(2103, token0.beginLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(89, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(90, simpleCharStream0.getEndColumn());
      assertEquals(90, simpleCharStream0.getColumn());
      assertEquals(90, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals("U", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(90, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(90, token1.endColumn);
      assertEquals(2103, token1.endLine);
      assertEquals(2103, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      int int2 = (-2489);
      int int3 = (-704);
      xPathParserTokenManager0.jjmatchedKind = int3;
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(90, simpleCharStream0.getEndColumn());
      assertEquals(90, simpleCharStream0.getColumn());
      assertEquals(90, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(int2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2489. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-Dame");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("local-Dame", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F~8QV");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 78, 109);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '~';
      stringReader0.reset();
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'B', 'f', '8', 'F', '~', '8'}, charArray0);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 1, (-1162));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals("QV", token0.toString());
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(109, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(110, token0.endColumn);
      assertEquals(109, token0.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotNull(token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(110, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals(110, token1.beginColumn);
      assertEquals(78, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(78, token1.endLine);
      assertEquals(110, token1.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(token1, token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(110, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token2.endLine);
      assertEquals(78, token2.beginLine);
      assertEquals(110, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(110, token2.beginColumn);
      assertNotNull(token2);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":qj2$5,dhnl@;$");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(58, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("qj2", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9$ozBugd{DRb9h(");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      int int1 = stringReader0.read();
      assertEquals(36, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("true", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(68, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("number");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, (-736), 1872);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1877, simpleCharStream0.getEndColumn());
      assertEquals((-736), simpleCharStream0.getLine());
      assertEquals((-736), simpleCharStream0.getEndLine());
      assertEquals(1877, simpleCharStream0.getColumn());
      assertEquals(1872, simpleCharStream0.getBeginColumn());
      assertEquals((-736), simpleCharStream0.getBeginLine());
      assertEquals("number", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(1872, token0.beginColumn);
      assertEquals(72, token0.kind);
      assertEquals(1877, token0.endColumn);
      assertEquals((-736), token0.endLine);
      assertEquals((-736), token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      StringReader stringReader1 = new StringReader("SS");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 167, 115);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals(167, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals(167, simpleCharStream0.getBeginLine());
      assertEquals(167, simpleCharStream0.getEndLine());
      assertEquals("SS", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(167, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(115, token0.beginColumn);
      assertEquals(116, token0.endColumn);
      assertEquals(167, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(95, int0);
      
      StringReader stringReader1 = new StringReader("-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-2004), 95);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(95, simpleCharStream0.getBeginColumn());
      assertEquals((-2004), simpleCharStream0.getLine());
      assertEquals(95, simpleCharStream0.getColumn());
      assertEquals((-2004), simpleCharStream0.getEndLine());
      assertEquals((-2004), simpleCharStream0.getBeginLine());
      assertEquals(95, simpleCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2004), token0.beginLine);
      assertEquals(10, token0.kind);
      assertEquals((-2004), token0.endLine);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(95, simpleCharStream0.getBeginColumn());
      assertEquals((-2004), simpleCharStream0.getLine());
      assertEquals(95, simpleCharStream0.getColumn());
      assertEquals((-2004), simpleCharStream0.getEndLine());
      assertEquals((-2004), simpleCharStream0.getBeginLine());
      assertEquals(95, simpleCharStream0.getEndColumn());
      assertEquals("-", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2004), token1.endLine);
      assertEquals((-2004), token1.beginLine);
      assertEquals(10, token1.kind);
      assertEquals(95, token1.beginColumn);
      assertEquals(95, token1.endColumn);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-name");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals("local-name", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(53, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader0 = new StringReader(")n{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(")", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(81, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("nd", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$@\":aKa j");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.NCName;
      assertEquals(78, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("_a", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1959), (-1959));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1959), simpleCharStream0.getBeginLine());
      assertEquals((-1959), simpleCharStream0.getColumn());
      assertEquals((-1959), simpleCharStream0.getEndLine());
      assertEquals((-1959), simpleCharStream0.getLine());
      assertEquals((-1959), simpleCharStream0.getEndColumn());
      assertEquals((-1959), simpleCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1959), token0.beginLine);
      assertEquals((-1959), token0.endColumn);
      assertEquals(10, token0.kind);
      assertEquals((-1959), token0.beginColumn);
      assertEquals((-1959), token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("di");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1074, (-1515));
      assertEquals(0, byteArray0.length);
      assertEquals((-1515), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("di", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("xa13v\"^6GEw");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("xa13v", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 12.  Encountered: <EOF> after : \"\\\"^6GEw\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!Mw~Y0QCB");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(33, int0);
      
      StringReader stringReader1 = new StringReader("!Mw~Y0QCB");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 33, 645);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 33, column 646.  Encountered: \"M\" (77), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1296), (-1296), 2702);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      mockFileInputStream0.mark(53);
      assertFalse(fileDescriptor0.valid());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 129, 73, 20);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("62;.\"QPX");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 810, 2955);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(2955, simpleCharStream0.getColumn());
      assertEquals(2955, simpleCharStream0.getEndColumn());
      assertEquals(810, simpleCharStream0.getEndLine());
      assertEquals(2955, simpleCharStream0.getBeginColumn());
      assertEquals(810, simpleCharStream0.getBeginLine());
      assertEquals(810, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('6', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2956, simpleCharStream0.getColumn());
      assertEquals(2956, simpleCharStream0.getEndColumn());
      assertEquals(810, simpleCharStream0.getEndLine());
      assertEquals(2956, simpleCharStream0.getBeginColumn());
      assertEquals(810, simpleCharStream0.getBeginLine());
      assertEquals(810, simpleCharStream0.getLine());
      assertEquals("2", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2956, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(810, token0.beginLine);
      assertEquals(2956, token0.beginColumn);
      assertEquals(810, token0.endLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 810, column 2957.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&sXeTU>n[U8 b");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      StringReader stringReader1 = new StringReader(":o/<`cD.-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 801, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(71, simpleCharStream0.getBeginColumn());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(71, simpleCharStream0.getEndColumn());
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals(71, simpleCharStream0.getColumn());
      assertEquals(":", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(71, token0.beginColumn);
      assertEquals(71, token0.endColumn);
      assertEquals(79, token0.kind);
      assertEquals(801, token0.endLine);
      assertEquals(801, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals("o", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(72, token1.endColumn);
      assertEquals(801, token1.endLine);
      assertEquals(801, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(72, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mod");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I!-OW|:v}");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(73, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"-\" (45), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dIv");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals("Iv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(100, token0.beginColumn);
      assertEquals(101, token0.endColumn);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'ywZG84ba%S.+9y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\'ywZG84ba%S.+9y\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fVE3#wP%_,");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      int int1 = stringReader0.read();
      assertEquals(86, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 46, 86);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(86, simpleCharStream0.getEndColumn());
      assertEquals(86, simpleCharStream0.getColumn());
      assertEquals(86, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('E', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(87, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(87, simpleCharStream0.getBeginColumn());
      assertEquals(87, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals("3", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(46, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(87, token0.beginColumn);
      assertEquals(46, token0.endLine);
      assertEquals(87, token0.endColumn);
      assertNotNull(token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(87, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(87, simpleCharStream0.getBeginColumn());
      assertEquals(87, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 46, column 88.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JZ+XyH,Ur^aD*A");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      StringReader stringReader1 = new StringReader("JZ+XyH,Ur^aD*A");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("5Z;s>f:dYO9UY3Op8U");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 74, 74);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(74, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getBeginColumn());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals(74, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getBeginLine());
      assertEquals("5", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(74, token0.endLine);
      assertEquals(74, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(74, simpleCharStream0.getEndLine());
      assertEquals(75, simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getColumn());
      assertEquals(75, simpleCharStream0.getEndColumn());
      assertEquals(74, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getBeginLine());
      assertEquals("Z", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(75, token1.beginColumn);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertEquals(75, token1.endColumn);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 74, column 76.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instrction");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("processing-instrction");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = XPathParserConstants.VARIABLE;
      assertEquals(17, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals("processing-instr", token0.toString());
      assertEquals(15, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(95, int0);
      
      int int1 = stringReader0.read();
      assertEquals(97, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 78, 2103);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(2103, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('=', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2104, simpleCharStream0.getEndColumn());
      assertEquals(2104, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(2104, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("P", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(78, token0.beginLine);
      assertEquals(2104, token0.endColumn);
      assertEquals(2104, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2105, simpleCharStream0.getEndColumn());
      assertEquals(2105, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(2105, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("$", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(17, token1.kind);
      assertEquals(2105, token1.beginColumn);
      assertEquals(2105, token1.endColumn);
      assertEquals(78, token1.endLine);
      assertEquals(78, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(2105, simpleCharStream0.getEndColumn());
      assertEquals(2105, simpleCharStream0.getColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(2105, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token2 = xPathParserTokenManager1.getNextToken();
      assertEquals(2106, simpleCharStream0.getEndColumn());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(2106, simpleCharStream0.getColumn());
      assertEquals(2106, simpleCharStream0.getBeginColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("1", token2.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token2.endLine);
      assertEquals(20, token2.kind);
      assertEquals(2106, token2.beginColumn);
      assertEquals(78, token2.beginLine);
      assertEquals(2106, token2.endColumn);
      assertNotNull(token2);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals(2107, simpleCharStream0.getColumn());
      assertEquals(2107, simpleCharStream0.getBeginColumn());
      assertEquals(2107, simpleCharStream0.getEndColumn());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals("Z", token3.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2107, token3.beginColumn);
      assertEquals(2107, token3.endColumn);
      assertEquals(78, token3.endLine);
      assertEquals(78, token3.kind);
      assertEquals(78, token3.beginLine);
      assertNotNull(token3);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hmp]/HE{BS)9");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(72, int0);
      
      StringReader stringReader1 = new StringReader("null");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("3y_9");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-1), 123);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals(123, simpleCharStream1.getEndColumn());
      assertEquals(123, simpleCharStream1.getColumn());
      assertEquals(123, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals("3", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertEquals(123, token0.beginColumn);
      assertEquals(123, token0.endColumn);
      assertEquals(20, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)64;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)64}, byteArray0);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(",?/IEfRYO1");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(44, int0);
      
      StringReader stringReader1 = new StringReader("and");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("and", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(28, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.FUNCTION_SUBSTRING;
      assertEquals(62, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 62, 62);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      long long0 = stringReader0.skip(2L);
      assertEquals(2L, long0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 62, (-1));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(62, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(62, simpleCharStream0.getColumn());
      assertEquals(62, simpleCharStream0.getLine());
      assertEquals(62, simpleCharStream0.getBeginLine());
      assertEquals(62, simpleCharStream0.getEndColumn());
      assertEquals("m", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(62, token0.endColumn);
      assertEquals(62, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(62, token0.beginColumn);
      assertEquals(62, token0.endLine);
      assertNotNull(token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(62, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(62, simpleCharStream0.getColumn());
      assertEquals(62, simpleCharStream0.getLine());
      assertEquals(62, simpleCharStream0.getBeginLine());
      assertEquals(62, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(62, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(62, token1.beginColumn);
      assertEquals(62, token1.endColumn);
      assertEquals(62, token1.endLine);
      assertNotNull(token1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-name");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(108, int0);
      
      int int1 = stringReader0.read();
      assertEquals(111, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1001, 2103);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(2103, simpleCharStream0.getColumn());
      assertEquals(1001, simpleCharStream0.getBeginLine());
      assertEquals(2103, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getBeginColumn());
      assertEquals(1001, simpleCharStream0.getEndLine());
      assertEquals(1001, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('c', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2110, simpleCharStream0.getEndColumn());
      assertEquals(1001, simpleCharStream0.getBeginLine());
      assertEquals(2104, simpleCharStream0.getBeginColumn());
      assertEquals(1001, simpleCharStream0.getEndLine());
      assertEquals(1001, simpleCharStream0.getLine());
      assertEquals(2110, simpleCharStream0.getColumn());
      assertEquals("al-name", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2104, token0.beginColumn);
      assertEquals(1001, token0.endLine);
      assertEquals(1001, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2110, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2110, simpleCharStream0.getEndColumn());
      assertEquals(2110, simpleCharStream0.getBeginColumn());
      assertEquals(1001, simpleCharStream0.getBeginLine());
      assertEquals(1001, simpleCharStream0.getEndLine());
      assertEquals(1001, simpleCharStream0.getLine());
      assertEquals(2110, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2110, token1.endColumn);
      assertEquals(2110, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1001, token1.beginLine);
      assertEquals(1001, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!/`i3J{Q,3QH@7_!");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("7V; fM^EPvpTf&{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("!/`i3J{Q,3QH@7_!");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      int int0 = stringReader2.read();
      assertEquals(33, int0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      long long0 = stringReader2.skip((-1078L));
      assertEquals((-1L), long0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 7, (-1760));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, (-1760), 122);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("7V; fM^EPvpTf&{");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringReader2;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) simpleCharStream0;
      objectArray0[3] = (Object) xPathParserTokenManager0;
      objectArray0[4] = (Object) stringReader0;
      objectArray0[5] = (Object) simpleCharStream0;
      objectArray0[6] = (Object) "!/`i3J{Q,3QH@7_!";
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "!/`i3J{Q,3QH@7_!";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      xPathParserTokenManager0.setDebugStream(printStream0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertSame(mockPrintStream0, printStream0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals("7", token0.toString());
      assertEquals((-1760), simpleCharStream1.getLine());
      assertEquals((-1760), simpleCharStream1.getBeginLine());
      assertEquals(122, simpleCharStream1.getColumn());
      assertEquals(122, simpleCharStream1.getBeginColumn());
      assertEquals(122, simpleCharStream1.getEndColumn());
      assertEquals((-1760), simpleCharStream1.getEndLine());
      assertEquals((-1760), token0.beginLine);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.beginColumn);
      assertEquals((-1760), token0.endLine);
      assertEquals(20, token0.kind);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals((-1760), simpleCharStream1.getLine());
      assertEquals((-1760), simpleCharStream1.getBeginLine());
      assertEquals(122, simpleCharStream1.getColumn());
      assertEquals(122, simpleCharStream1.getBeginColumn());
      assertEquals(122, simpleCharStream1.getEndColumn());
      assertEquals((-1760), simpleCharStream1.getEndLine());
      assertEquals("7", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-1760), token1.endLine);
      assertEquals(20, token1.kind);
      assertEquals(122, token1.endColumn);
      assertEquals(122, token1.beginColumn);
      assertEquals((-1760), token1.beginLine);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(58, int0);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("0\"ri<ZEqN\"Xi~z5+F");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 430, (-1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1), simpleCharStream0.getColumn());
      assertEquals(430, simpleCharStream0.getLine());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals(430, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals(430, simpleCharStream0.getBeginLine());
      assertEquals("0", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(430, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(430, token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(20, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.FUNCTION_SUBSTRING;
      assertEquals(62, int0);
      
      int int1 = stringReader0.read();
      assertEquals(115, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 27, 62);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(63, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(63, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals("um", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(27, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(62, token0.beginColumn);
      assertEquals(27, token0.beginLine);
      assertEquals(63, token0.endColumn);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(63, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(63, simpleCharStream0.getColumn());
      assertEquals(63, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(63, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(27, token1.endLine);
      assertEquals(27, token1.beginLine);
      assertEquals(63, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"YC@ U");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"YC@ U\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dQc");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 27, 7);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals("Qc", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(27, token0.endLine);
      assertEquals(7, token0.beginColumn);
      assertEquals(27, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(27, token1.beginLine);
      assertEquals(27, token1.endLine);
      assertEquals(7, token1.beginColumn);
      assertEquals(8, token1.endColumn);
      assertNotNull(token1);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preTt::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("preTt", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("zC7@4aby0");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1760), (-1760));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1758), simpleCharStream0.getEndColumn());
      assertEquals((-1760), simpleCharStream0.getBeginLine());
      assertEquals((-1760), simpleCharStream0.getEndLine());
      assertEquals((-1758), simpleCharStream0.getColumn());
      assertEquals((-1760), simpleCharStream0.getBeginColumn());
      assertEquals((-1760), simpleCharStream0.getLine());
      assertEquals("zC7", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-1760), token0.endLine);
      assertEquals((-1760), token0.beginLine);
      assertEquals((-1760), token0.beginColumn);
      assertEquals((-1758), token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bf8F.p\"8QV");
      assertNotNull(stringReader0);
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      StringReader stringReader1 = new StringReader("/");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1688), (-1688));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-1688), simpleCharStream0.getEndLine());
      assertEquals((-1688), simpleCharStream0.getBeginLine());
      assertEquals((-1688), simpleCharStream0.getLine());
      assertEquals((-1688), simpleCharStream0.getEndColumn());
      assertEquals((-1688), simpleCharStream0.getBeginColumn());
      assertEquals((-1688), simpleCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1688), token0.endLine);
      assertEquals(6, token0.kind);
      assertEquals((-1688), token0.beginLine);
      assertEquals((-1688), token0.beginColumn);
      assertEquals((-1688), token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-1148));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1148. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("slB");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 80);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(80, simpleCharStream0.getColumn());
      assertEquals(80, simpleCharStream0.getEndColumn());
      assertEquals(80, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('l', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(81, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(81, simpleCharStream0.getBeginColumn());
      assertEquals(81, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals("B", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(115, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(81, token0.beginColumn);
      assertEquals(81, token0.endColumn);
      assertEquals(115, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(81, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(81, simpleCharStream0.getBeginColumn());
      assertEquals(81, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(81, token1.endColumn);
      assertEquals(115, token1.beginLine);
      assertEquals(81, token1.beginColumn);
      assertEquals(115, token1.endLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(81, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(81, simpleCharStream0.getBeginColumn());
      assertEquals(81, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals("", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(81, token2.endColumn);
      assertEquals(115, token2.beginLine);
      assertEquals(81, token2.beginColumn);
      assertEquals(115, token2.endLine);
      assertEquals(0, token2.kind);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 80);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(82, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(80, simpleCharStream0.getBeginColumn());
      assertEquals(82, simpleCharStream0.getEndColumn());
      assertEquals("elf", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(82, token0.endColumn);
      assertEquals(115, token0.beginLine);
      assertEquals(115, token0.endLine);
      assertEquals(80, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 80. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mod");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("mod", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(29, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namze");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("true", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(68, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 75, (-1518));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(75, simpleCharStream0.getEndLine());
      assertEquals(75, simpleCharStream0.getLine());
      assertEquals((-1517), simpleCharStream0.getEndColumn());
      assertEquals((-1518), simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getBeginLine());
      assertEquals((-1517), simpleCharStream0.getColumn());
      assertEquals("GX", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(75, token0.endLine);
      assertEquals(75, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals((-1517), token0.endColumn);
      assertEquals((-1518), token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(75, simpleCharStream0.getEndLine());
      assertEquals(75, simpleCharStream0.getLine());
      assertEquals((-1517), simpleCharStream0.getEndColumn());
      assertEquals((-1518), simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getBeginLine());
      assertEquals((-1517), simpleCharStream0.getColumn());
      assertEquals("GX", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1517), token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(75, token1.endLine);
      assertEquals(75, token1.beginLine);
      assertEquals((-1518), token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 75, column -1516.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 810, 810);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(810, simpleCharStream0.getBeginColumn());
      assertEquals(810, simpleCharStream0.getEndLine());
      assertEquals(810, simpleCharStream0.getBeginLine());
      assertEquals(811, simpleCharStream0.getColumn());
      assertEquals(811, simpleCharStream0.getEndColumn());
      assertEquals(810, simpleCharStream0.getLine());
      assertEquals("nd", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(810, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(811, token0.endColumn);
      assertEquals(810, token0.beginColumn);
      assertEquals(810, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(811, simpleCharStream0.getBeginColumn());
      assertEquals(810, simpleCharStream0.getEndLine());
      assertEquals(810, simpleCharStream0.getBeginLine());
      assertEquals(811, simpleCharStream0.getColumn());
      assertEquals(811, simpleCharStream0.getEndColumn());
      assertEquals(810, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(811, token1.beginColumn);
      assertEquals(811, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(810, token1.endLine);
      assertEquals(810, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(811, simpleCharStream0.getBeginColumn());
      assertEquals(810, simpleCharStream0.getEndLine());
      assertEquals(810, simpleCharStream0.getBeginLine());
      assertEquals(811, simpleCharStream0.getColumn());
      assertEquals(811, simpleCharStream0.getEndColumn());
      assertEquals(810, simpleCharStream0.getLine());
      assertEquals("", token2.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(810, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(811, token2.endColumn);
      assertEquals(810, token2.beginLine);
      assertEquals(811, token2.beginColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      int int1 = stringReader0.read();
      assertEquals(101, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringReader0.read();
      assertEquals(108, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      StringReader stringReader1 = new StringReader("EV>J19S(%WT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 115, 115);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, 101, 101);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals("EV", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(115, token0.beginColumn);
      assertEquals(116, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(117, simpleCharStream0.getBeginColumn());
      assertEquals(">", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(15, token1.kind);
      assertEquals(115, token1.beginLine);
      assertEquals(117, token1.beginColumn);
      assertEquals(117, token1.endColumn);
      assertEquals(115, token1.endLine);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(118, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(121, simpleCharStream0.getEndColumn());
      assertEquals(121, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals("J19S", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(121, token2.endColumn);
      assertEquals(118, token2.beginColumn);
      assertEquals(115, token2.beginLine);
      assertEquals(115, token2.endLine);
      assertEquals(78, token2.kind);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*H#b(6g");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(42, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 104, 104);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(104, simpleCharStream0.getBeginLine());
      assertEquals(104, simpleCharStream0.getEndLine());
      assertEquals(104, simpleCharStream0.getLine());
      assertEquals(104, simpleCharStream0.getEndColumn());
      assertEquals(104, simpleCharStream0.getColumn());
      assertEquals(104, simpleCharStream0.getBeginColumn());
      assertEquals("H", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(104, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(104, token0.beginLine);
      assertEquals(104, token0.endColumn);
      assertEquals(104, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$@\":aKa j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("_a", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("=", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(11, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.maxNextCharInd = 40;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginLine());
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = XPathParserConstants.AXIS_ATTRIBUTE;
      assertEquals(39, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(56, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(56, simpleCharStream0.getEndColumn());
      assertEquals("org.apache.commons.jxpath.ri.parser.XPathParserConstants", token0.toString());
      assertEquals(55, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(56, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_a=P$1Z\":a9Kka j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(95, int0);
      
      int int1 = stringReader0.read();
      assertEquals(97, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("SS");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 2103, 13);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals("SS", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2103, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(13, token0.beginColumn);
      assertEquals(2103, token0.beginLine);
      assertEquals(14, token0.endColumn);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 80);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(80, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(80, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(80, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('e', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(82, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(81, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(82, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals("lf", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(82, token0.endColumn);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      assertEquals(81, token0.beginColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N1!kHL,kSz%vd )O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader1 = new StringReader("numbN;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("numbN;");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("N1", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namze");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 9, 9);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals("namze", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(9, token0.beginColumn);
      assertEquals(9, token0.endLine);
      assertEquals(9, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(13, token1.beginColumn);
      assertEquals(13, token1.endColumn);
      assertEquals(9, token1.beginLine);
      assertEquals(9, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("div", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(30, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      int int0 = pipedInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int1 = 2371;
      int int2 = stringReader0.read();
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      pipedOutputStream0.write(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 2371, 2048);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      xPathParserTokenManager0.jjmatchedKind = 0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 37. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(101, simpleCharStream0.getColumn());
      assertEquals(101, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals("iv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(100, token0.beginColumn);
      assertEquals(100, token0.beginLine);
      assertEquals(100, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(101, token0.endColumn);
      assertNotNull(token0);
      
      simpleCharStream0.UpdateLineColumn('[');
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(102, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(102, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      simpleCharStream0.UpdateLineColumn('n');
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(103, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(103, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(103, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(103, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(103, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(103, simpleCharStream0.getEndColumn());
      assertEquals(103, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(103, token1.endColumn);
      assertEquals(100, token1.endLine);
      assertEquals(103, token1.beginColumn);
      assertEquals(100, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, 1892, 1892);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-59);
      int int0 = mockFileInputStream0.read(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertFalse(fileDescriptor0.valid());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)66, (byte)0, (byte)114, (byte)89, (byte) (-59)}, byteArray0);
      assertEquals(0, int0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-664));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -664. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader("name");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 21, 21);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(21, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getColumn());
      assertEquals(21, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getEndColumn());
      assertEquals(21, simpleCharStream0.getBeginLine());
      assertEquals(21, simpleCharStream0.getLine());
      assertEquals("name", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(24, token0.endColumn);
      assertEquals(55, token0.kind);
      assertEquals(21, token0.beginColumn);
      assertEquals(21, token0.endLine);
      assertEquals(21, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Amx_'7)MWYP)K");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(65, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 106, 88);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(106, simpleCharStream0.getEndLine());
      assertEquals(106, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(106, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('m', char0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(106, simpleCharStream0.getEndLine());
      assertEquals(106, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(106, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(106, simpleCharStream0.getEndLine());
      assertEquals(106, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(106, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager2);
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      
      Token token0 = xPathParserTokenManager2.getNextToken();
      assertEquals(106, simpleCharStream0.getEndLine());
      assertEquals(90, simpleCharStream0.getEndColumn());
      assertEquals(106, simpleCharStream0.getLine());
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(90, simpleCharStream0.getColumn());
      assertEquals(106, simpleCharStream0.getBeginLine());
      assertEquals("x_", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(106, token0.endLine);
      assertEquals(106, token0.beginLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(90, token0.endColumn);
      assertNotNull(token0);
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D/HHEaT=5K\"9 ");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(68, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("/", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(6, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4OU>n[U8 1j");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("numbec");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("numbec", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4TU>n[U8 1j");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      int int1 = stringReader0.read();
      assertEquals(88, int1);
      assertFalse(int1 == int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2103, 88);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(2103, simpleCharStream0.getLine());
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals(2103, simpleCharStream0.getEndLine());
      assertEquals(2103, simpleCharStream0.getBeginLine());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals("4", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(89, token0.endColumn);
      assertEquals(2103, token0.endLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(2103, token0.beginLine);
      assertEquals(20, token0.kind);
      assertNotNull(token0);
  }
}
