/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:08:09 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.Image;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.Reader;
import java.util.Random;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.RandomForest;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.useNoPriors();
      evaluation0.fMeasure((-2743));
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{u!+M'A!}DF~f+<C}Ju";
      stringArray0[1] = ".arff";
      stringArray0[2] = " ";
      testInstances0.setOptions(stringArray0);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.useNoPriors();
      evaluation0.fMeasure(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "olv";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "1^)");
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      testInstances0.setSeed(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{u!+M'A!}DF~f+<C}Ju";
      OneR oneR0 = new OneR();
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      testInstances0.getWords();
      testInstances0.setSeed(0);
      testInstances0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      ZeroR zeroR0 = new ZeroR();
      String string0 = ScrollPaneConstants.UPPER_LEFT_CORNER;
      evaluation0.getDiscardPredictions();
      double double0 = evaluation0.m_ConfLevel;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.trueNegativeRate(0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.getClassPriors();
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      testInstances0.setSeed((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegression0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(classificationViaRegression0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFMeasure();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      evaluation0.makeDistribution(Double.NaN);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.listOptions();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(2);
      testInstances0.setNumNominalValues((-1457654536));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(7, charArray0, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed((-2));
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.KBMeanInformation();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed(0);
      testInstances0.setSeed(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setOptions((String[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      testInstances0.setNumNominal(2);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      inputMappedClassifier0.setOptions(stringArray0);
      Capabilities capabilities0 = new Capabilities(inputMappedClassifier0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      textDirectoryLoader0.getDirectory();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFMeasure();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctIncorrect();
      evaluation0.numFalseNegatives(120);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@data";
      evaluation0.m_ClassNames = stringArray0;
      double[] doubleArray0 = new double[2];
      evaluation0.matthewsCorrelationCoefficient(86);
      evaluation0.correct();
      evaluation0.numFalsePositives(1005);
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      DenseInstance denseInstance0 = new DenseInstance(2749);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)117;
      doubleArray0[2] = (double) (byte)117;
      doubleArray0[4] = (double) (byte)9;
      doubleArray0[5] = (double) (byte)117;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'j';
      evaluation0.num2ShortID(2736, charArray0, 15);
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("/O^X'$bAs2-=hVe)n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression2 = new ClassificationViaRegression();
      classificationViaRegression2.toString();
      double double0 = evaluation0.m_SumAbsErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      evaluation0.correlationCoefficient();
      testInstances0.setClassIndex((byte) (-17));
      String string0 = DefaultEditorKit.beginAction;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      JSONLoader jSONLoader0 = new JSONLoader();
      JSONLoader jSONLoader1 = new JSONLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, (-2434.7511691));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      KStar kStar0 = new KStar();
      KStar kStar1 = new KStar();
      kStar0.getCapabilities();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2), true, false);
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      String[] stringArray0 = testInstances0.getOptions();
      testInstances0.getRelationalClassFormat();
      LinearRegression linearRegression0 = new LinearRegression();
      AbstractClassifier.runClassifier(kStar0, stringArray0);
      double double1 = KStarConstants.EPSILON;
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      testInstances0.setSeed(0);
      testInstances0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      testInstances0.setNumNominalValues(42);
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '@';
      charArray0[2] = '=';
      charArray0[3] = 'Q';
      charArray0[4] = 'b';
      charArray0[5] = 'p';
      evaluation0.num2ShortID((-206797271), charArray0, 0);
      evaluation0.matthewsCorrelationCoefficient((-780));
      evaluation0.KBRelativeInformation();
      try { 
        Evaluation.handleCostOption("Mean: ", (-206797271));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = new Capabilities(inputMappedClassifier0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      textDirectoryLoader0.getDirectory();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.KBRelativeInformation();
      Evaluation.makeOptionString(inputMappedClassifier0, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.useNoPriors();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.toSummaryString();
      testInstances0.setSeed(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setOptions((String[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.toSummaryString();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{u!+M'A!}DF~f+<C}Ju";
      stringArray0[1] = ".arff";
      stringArray0[2] = " ";
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.SFPriorEntropy();
      evaluation0.pctCorrect();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "[l?O4Pjs=h[Y?|)N");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.falsePositiveRate((-2654));
      evaluation0.SFEntropyGain();
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[1];
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFEntropyGain();
      evaluation0.useNoPriors();
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      char[] charArray0 = new char[10];
      charArray0[2] = 'a';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.bsi");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      testInstances0.setNumNominalValues(42);
      charArray0[2] = 'a';
      evaluation0.num2ShortID(5, charArray0, 2);
      evaluation0.matthewsCorrelationCoefficient(4);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedRecall();
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.precision(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      testInstances1.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR1;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setOptions(testInstances1.DEFAULT_WORDS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = zeroR0.getOptions();
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      zeroR0.getOptions();
      wrapperSubsetEval0.toString();
      testInstances1.listOptions();
      testInstances0.setNumNominalValues(2865);
      evaluation0.KBRelativeInformation();
      CostMatrix costMatrix0 = new CostMatrix(7);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.toClassDetailsString();
      evaluation0.toMatrixString(".bsi");
      SMOreg sMOreg0 = new SMOreg();
      try { 
        Evaluation.evaluateModel((Classifier) sMOreg0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMOreg:
         // 
         // -C <double>
         // \tThe complexity constant C.
         // \t(default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither.
         // \t(default 0=normalize)
         // -I <classname and parameters>
         // \tOptimizer class used for solving quadratic optimization problem
         // \t(default weka.classifiers.functions.supportVector.RegSMOImproved)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to optimizer ('-I') weka.classifiers.functions.supportVector.RegSMOImproved:
         // 
         // -T <double>
         // \tThe tolerance parameter for checking the stopping criterion.
         // \t(default 0.001)
         // -V
         // \tUse variant 1 of the algorithm when true, otherwise use variant 2.
         // \t(default true)
         // -P <double>
         // \tThe epsilon for round-off error.
         // \t(default 1.0e-12)
         // -L <double>
         // \tThe epsilon parameter in epsilon-insensitive loss function.
         // \t(default 1.0e-3)
         // -W <double>
         // \tThe random number seed.
         // \t(default 1)
         // 
         // Options specific to kernel ('-K') weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getOptions();
      testInstances1.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.enableAllClasses();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.weightedTruePositiveRate();
      evaluation0.pctUnclassified();
      evaluation0.toClassDetailsString("\tSets model input file. In case the filename ends with '.xml',\n");
      evaluation0.toSummaryString(false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = BorderLayout.BEFORE_FIRST_LINE;
      double double0 = evaluation0.m_SumPriorAbsErr;
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      LogitBoost logitBoost1 = new LogitBoost();
      evaluation0.toCumulativeMarginDistributionString();
      JRip jRip0 = new JRip();
      CSVLoader cSVLoader0 = new CSVLoader();
      DenseInstance denseInstance0 = new DenseInstance(6);
      evaluation0.KBRelativeInformation();
      testInstances0.setNumRelationalString(600);
      evaluation0.meanAbsoluteError();
      evaluation0.toSummaryString(true);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 1, (Random) mockRandom0, (Object[]) costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegression0.toString();
      evaluation0.SFPriorEntropy();
      evaluation0.relativeAbsoluteError();
      testInstances0.setNoClass(false);
      Double double0 = new Double((-1));
      evaluation0.falsePositiveRate((-2));
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      double double1 = evaluation0.m_SumSqrClass;
      FileSystemHandling.createFolder(evoSuiteFile0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.errorRate();
      BayesNet bayesNet0 = new BayesNet();
      String string0 = XML.DTD_ELEMENT;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.pctIncorrect();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource(" ");
        fail("Expecting exception: ExceptionInInitializerError");
      
      } catch(ExceptionInInitializerError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.ConverterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(2);
      evaluation0.falsePositiveRate(117);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.SFEntropyGain();
      evaluation0.toMatrixString();
      double double0 = evaluation0.m_Incorrect;
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(classifier0, false);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(3234);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3234
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(6);
      evaluation0.falsePositiveRate((-2654));
      evaluation0.SFEntropyGain();
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      int[] intArray0 = new int[4];
      intArray0[3] = 7;
      evaluation0.getRevision();
      evaluation0.getHeader();
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0, intArray0, (-2));
      evaluation0.toCumulativeMarginDistributionString();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed(0);
      testInstances0.setOptions((String[]) null);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      evaluation0.toSummaryString(false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(6);
      evaluation0.falsePositiveRate((-2654));
      ZeroR zeroR0 = new ZeroR();
      String string0 = ScrollPaneConstants.UPPER_LEFT_CORNER;
      evaluation0.getDiscardPredictions();
      double double0 = evaluation0.m_ConfLevel;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      double double1 = evaluation0.m_Correct;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class complexity | order 0         ");
      evaluation0.m_NumFolds = 114;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      LogitBoost logitBoost0 = new LogitBoost();
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, false);
      evaluation0.truePositiveRate(0);
      try { 
        evaluation0.evaluateModel((Classifier) logitBoost0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      evaluation0.SFMeanPriorEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader1.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(937, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      String[] stringArray0 = testInstances1.getOptions();
      testInstances1.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.enableAllClasses();
      testInstances1.setClassType((-1));
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      LinearRegression linearRegression0 = new LinearRegression();
      AbstractClassifier.runClassifier(randomForest0, stringArray0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.pctUnclassified();
      evaluation0.toSummaryString(true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.weightedTruePositiveRate();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed((-2));
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNoClass(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.KBMeanInformation();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(6);
      char[] charArray0 = new char[10];
      charArray0[2] = 'a';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.bsi");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@data";
      evaluation0.m_ClassNames = stringArray0;
      evaluation0.avgCost();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3416.10947553746;
      doubleArray0[1] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(3416.10947553746, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3416
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed((-2));
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.toCumulativeMarginDistributionString();
      double double0 = evaluation0.m_SumSqrErr;
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed(0);
      testInstances0.setNumNominal(0);
      testInstances0.setOptions((String[]) null);
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.bsi");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      evaluation0.meanPriorAbsoluteError();
      int int0 = 2000;
      testInstances0.setNumNominal(2000);
      evaluation0.m_ClassIsNominal = false;
      char[] charArray0 = new char[6];
      charArray0[2] = 'a';
      charArray0[3] = '[';
      charArray0[5] = 'a';
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      testInstances0.setSeed((-14));
      testInstances0.setOptions((String[]) null);
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setOptions((String[]) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      testInstances0.setNoClass(false);
      evaluation0.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-14);
      int int0 = 15;
      evaluation0.falsePositiveRate(15);
      evaluation0.SFEntropyGain();
      evaluation0.sizeOfPredictedRegions();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 35;
      intArray0[3] = (-1);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@data", instances0, (-1), (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@relation";
      stringArray0[4] = "Loglikelihood for normal estimator: ";
      stringArray0[5] = ".arff";
      stringArray0[6] = "Loglikelihood for normal estimator: ";
      stringArray0[7] = "@relation";
      stringArray0[8] = "@data";
      testInstances0.setOptions(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR;
      double[] doubleArray0 = evaluation0.getClassPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 1, (-132.00831883));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      double double0 = KStarConstants.FLOOR1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.toString();
      ZeroR zeroR1 = new ZeroR();
      zeroR0.getCapabilities();
      String[] stringArray0 = zeroR1.getOptions();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      zeroR0.getOptions();
      testInstances0.listOptions();
      evaluation0.matthewsCorrelationCoefficient((-2));
      double double1 = evaluation0.m_ConfLevel;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.m_TotalCost;
      Object object0 = Image.UndefinedProperty;
      try { 
        evaluation0.evaluateModel((Classifier) zeroR0, instances0, (Object[]) stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("1^)");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.meanOrMode(0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Version.MAJOR = 13;
      evaluation0.correlationCoefficient();
      int[] intArray0 = new int[1];
      testInstances0.setClassIndex(13);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      intArray0[0] = 13;
      evaluation0.makeDistribution(100.0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("1^)");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.SFSchemeEntropy();
      testInstances0.setNumNominal(497);
      double double0 = evaluation0.m_Correct;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Version.MAJOR = 21;
      evaluation0.setPriors(instances0);
      evaluation0.correlationCoefficient();
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_CoverageStatisticsAvailable = false;
      double double0 = evaluation0.m_TotalCoverage;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setClassType(3403);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumNominal(26);
      ZeroR zeroR0 = new ZeroR();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureReversedArcs();
      Evaluation.makeOptionString(zeroR0, false);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.pctUnclassified();
      MockRandom mockRandom0 = new MockRandom(5);
      Object object0 = Image.UndefinedProperty;
      Object object1 = Image.UndefinedProperty;
      Object object2 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, (Instances) null, (-3184), (Random) mockRandom0, (Object[]) wrapperSubsetEval0.TAGS_EVALUATION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pSB}QdQ}=/0T>65]=?");
      testInstances0.setMultiInstance(false);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      Null null0 = new Null();
      testInstances0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation0.equals(null0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.totalCost();
      evaluation0.SFMeanSchemeEntropy();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1456206972));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setSeed((-2952));
      testInstances0.setRelationalClassFormat(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double double0 = Evaluation.MIN_SF_PROB;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(101);
      testInstances0.toString();
      Utils.log2 = (-4123.386843210165);
      Evaluation.handleCostOption("", 7);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (-4123.386843210165);
      doubleArray0[6] = (double) 5;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 81;
      intArray0[4] = 5;
      intArray0[5] = 3;
      intArray0[6] = 3854;
      intArray0[7] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(912.3874716, doubleArray0, intArray0, 2);
      // Undeclared exception!
      try { 
        instances0.add(937, (Instance) sparseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 937, Size: 20
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(1699);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      double double1 = evaluation0.m_Correct;
      evaluation0.m_NumFolds = 114;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      gaussianProcesses0.getCapabilities();
      LogitBoost logitBoost0 = new LogitBoost();
      gaussianProcesses0.getRevision();
      AbstractClassifier.makeCopy(gaussianProcesses0);
      evaluation0.toCumulativeMarginDistributionString();
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, true);
      evaluation0.truePositiveRate(0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.totalCost();
      try { 
        evaluation0.evaluateModelOnce((Classifier) logitBoost0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "1^)");
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("1^)");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Version.MAJOR = 13;
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setOptions(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.m_SumErr = (-4211.173619471);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.toString();
      ZeroR zeroR1 = new ZeroR();
      zeroR1.getCapabilities();
      String[] stringArray0 = zeroR0.getOptions();
      wrapperSubsetEval0.toString();
      testInstances0.listOptions();
      testInstances0.setNumNominalValues(11);
      evaluation0.matthewsCorrelationCoefficient(1358);
      evaluation0.KBRelativeInformation();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      double double0 = evaluation0.m_TotalCost;
      Object object0 = Image.UndefinedProperty;
      try { 
        evaluation1.evaluateModel((Classifier) zeroR0, instances0, (Object[]) stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      testInstances0.setClassIndex(2424);
      testInstances0.setNumRelationalString((-1991));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "@data";
      stringArray0[2] = "The max number of instances in a leaf.";
      testInstances0.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.getClassPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1991);
      doubleArray0[1] = (double) (-1991);
      doubleArray0[2] = (double) (-1991);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2424;
      doubleArray0[5] = (double) (-1991);
      doubleArray0[6] = (-132.00831883);
      doubleArray0[7] = (double) (-1991);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 1, 0.22499999403953552);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -497500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      evaluation0.falsePositiveRate((-855));
      evaluation0.SFEntropyGain();
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      evaluation0.getClassPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFEntropyGain();
      evaluation0.useNoPriors();
      evaluation0.SFPriorEntropy();
      evaluation0.numTruePositives(108);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(1699);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = evaluation0.m_Correct;
      evaluation0.m_NumFolds = 114;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.toCumulativeMarginDistributionString();
      JRip jRip0 = new JRip();
      instances0.add((Instance) binarySparseInstance0);
      Evaluation.makeOptionString((Classifier) null, false);
      evaluation0.truePositiveRate(0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.totalCost();
      MockRandom mockRandom0 = new MockRandom(81);
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, (-2847), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 13);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      double double1 = evaluation0.m_Correct;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      LogitBoost logitBoost0 = new LogitBoost();
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, false);
      evaluation0.truePositiveRate(0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_CoverageStatisticsAvailable = false;
      double double0 = evaluation0.m_TotalCoverage;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setClassType(3403);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumNominal(26);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      zeroR0.getOptions();
      evaluation0.toClassDetailsString();
      testInstances0.listOptions();
      testInstances0.setNumNominalValues(11);
      evaluation0.matthewsCorrelationCoefficient(1358);
      evaluation0.KBRelativeInformation();
      evaluation0.areaUnderPRC(1111);
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.toSummaryString("\n\n=== Clustering stats for training data ===\n\n", false);
      evaluation0.toMatrixString();
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_CoverageStatisticsAvailable = false;
      double double0 = evaluation0.m_TotalCoverage;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setClassType(3403);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumNominal(26);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.falsePositiveRate((-217));
      evaluation0.SFEntropyGain();
      evaluation0.sizeOfPredictedRegions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vNN.~");
      testInstances0.setWordSeparators("-$/\"[$A");
      evaluation0.getClassPriors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getHeader();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.falseNegativeRate((-5084));
      try { 
        Evaluation.handleCostOption("T_", 7);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegression0.buildClassifier(instances0);
      testInstances0.toString();
      int int0 = 13;
      Version.MAJOR = 13;
      evaluation0.correlationCoefficient();
      testInstances0.setClassIndex(Version.MAJOR);
      boolean boolean0 = true;
      Evaluation.makeOptionString(classificationViaRegression0, boolean0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, instances0.ARFF_DATA);
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      JSONLoader jSONLoader0 = new JSONLoader();
      double double0 = KStarConstants.LOG2;
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.meanAbsoluteError();
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.matthewsCorrelationCoefficient(int0);
      Evaluation.evaluateModel((Classifier) classificationViaRegression0, testInstances0.DEFAULT_WORDS);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.getHeader();
      evaluation0.matthewsCorrelationCoefficient((-4694));
      evaluation0.KBRelativeInformation();
      evaluation0.meanAbsoluteError();
      evaluation0.toSummaryString(true);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.rootMeanSquaredError();
      evaluation0.totalCost();
      MockRandom mockRandom0 = new MockRandom(1L);
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 2, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFSchemeEntropy();
      Version.MAJOR = 108;
      testInstances0.setNumNominal((-1728504457));
      double double1 = evaluation0.m_Correct;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      LogitBoost logitBoost0 = new LogitBoost();
      JRip jRip0 = new JRip();
      Evaluation.makeOptionString(jRip0, false);
      evaluation0.truePositiveRate(0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.numTrueNegatives(2);
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      evaluation0.m_WithClass = (double) 5;
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = BorderLayout.BEFORE_FIRST_LINE;
      double double0 = evaluation0.m_SumPriorAbsErr;
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.getHeader();
      evaluation0.matthewsCorrelationCoefficient((-4694));
      evaluation0.meanAbsoluteError();
      evaluation0.toSummaryString(true);
      costSensitiveClassifier0.getCostMatrix();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("/O^X'$bAs2-=hVe)n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression2 = new ClassificationViaRegression();
      classificationViaRegression2.toString();
      double double0 = evaluation0.m_SumAbsErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.equals(linearRegression0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.getRevision();
      binarySparseInstance0.setDataset(instances0);
      evaluation0.updatePriors(binarySparseInstance0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.errorRate();
      BayesNet bayesNet0 = new BayesNet();
      String string0 = XML.DTD_ELEMENT;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      evaluation0.m_WithClass = (double) 5;
      Evaluation.getGlobalInfo(classifier0);
      testInstances0.setNumNominal(2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = BorderLayout.BEFORE_FIRST_LINE;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.equals(byteArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      binarySparseInstance0.getRevision();
      binarySparseInstance0.setDataset(instances0);
      evaluation0.updatePriors(binarySparseInstance0);
      evaluation0.getHeader();
      JSONLoader jSONLoader0 = new JSONLoader();
      testInstances0.setNumNominalValues(9);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.matthewsCorrelationCoefficient(5);
      evaluation0.toSummaryString(".json.gz", false);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.correct();
      evaluation2.weightedFalseNegativeRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation1.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 0.125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("/O^X'$bAs2-=hVe)n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression2 = new ClassificationViaRegression();
      classificationViaRegression2.toString();
      double double0 = evaluation0.m_SumAbsErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      evaluation0.correlationCoefficient();
      testInstances0.setClassIndex((byte) (-17));
      String string0 = JColorChooser.CHOOSER_PANELS_PROPERTY;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.toSummaryString(false);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.rootMeanSquaredError();
      evaluation0.totalCost();
      MockRandom mockRandom0 = new MockRandom((-1));
      evaluation0.areaUnderROC((-2));
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialUpdateable0, instances0, 12, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
