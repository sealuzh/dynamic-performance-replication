/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:47:17 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 1697.048387;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1697.048387, 0.0, 1697.048387, (-971.56));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince54Integrator0.sanityChecks(expandableStatefulODE0, 0.0);
      dormandPrince54Integrator0.getMinReduction();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1697.048387;
      doubleArray0[1] = 1697.048387;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1697.048387;
      doubleArray1[1] = (double) (-1117);
      doubleArray1[2] = 0.2;
      doubleArray1[3] = 0.2;
      doubleArray1[4] = (double) (-1117);
      doubleArray1[5] = 1697.048387;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(true, (-1117), doubleArray0, 0.2, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1117.93568;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1117.93568, 1117.93568, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getSafety();
      dormandPrince54Integrator0.mainSetDimension = (-1178);
      dormandPrince54Integrator0.setSafety((-1683.4479884));
      dormandPrince54Integrator0.getOrder();
      assertEquals((-1683.4479884), dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(503.01024704, 503.01024704, 292.2600451, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) eventFilter0, 292.2600451, 503.01024704, (-431));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(292.2600451, 292.2600451, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setStepSizeControl(1.1934680816813702E125, 10.0, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(0.2, 0.0, (-431), (-2.4090696463777446E241));
      dormandPrince54Integrator2.resetInternalState();
      dormandPrince54Integrator0.getOrder();
      double double0 = 0.2;
      DormandPrince54Integrator dormandPrince54Integrator3 = new DormandPrince54Integrator(0.2, 292.2600451, doubleArray0, doubleArray0);
      dormandPrince54Integrator3.getMaxGrowth();
      dormandPrince54Integrator0.setSafety(503.01024704);
      dormandPrince54Integrator3.setMaxGrowth((-5253.388176475134));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator2.integrate(expandableStatefulODE0, (double) (-431));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-721.9573184610431), 1.0, (-721.9573184610431), (-721.9573184610431));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(41).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-721.9573184610431));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-721.9573184610431), 1.0, (-721.9573184610431), (-721.9573184610431));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-721.9573184610431));
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1.0);
  }
}
