/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:32:27 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MAX_CODE_POINT;
      int int1 = Byte.BYTES;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-3231));
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-408.85139));
      constantPoolGen0.toString();
      int int0 = Float.SIZE;
      // Undeclared exception!
      try { 
        Type.getArgumentTypes(":H~TeUdTAp;Zpj%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :H~TeUdTAp;Zpj%
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(3);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3, 2497);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2497
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupLong(1793L);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(256, (-2214));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2214), 256);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2214
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(1302.5924833578);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFloat((-245.009F));
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(2567.304871101347);
      int int0 = constantPoolGen0.addInterfaceMethodref("EN>eyp=8W~le|0|W:%h", "EN>eyp=8W~le|0|W:%h", "EN>eyp=8W~le|0|W:%h");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.getFinalConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(272, 116);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ObjectType objectType0 = Type.THROWABLE;
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 64;
      ObjectType objectType0 = Type.OBJECT;
      constantPoolGen0.addClass(objectType0);
      objectType0.isCastableTo((Type) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("&");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_2;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_2;
      constantArray0[3] = (Constant) constantUtf8_0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantClass constantClass0 = new ConstantClass(256);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass1;
      constantUtf8_2.toString();
      constantArray0[7] = (Constant) constantUtf8_1;
      constantPoolGen0.lookupLong(2);
      constantPoolGen0.addClass(objectType0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1)CONSTANT_MethodHandle[15](reference_kind = 155, reference_index = 46)\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constantUtf8_1, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass(47);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(211, 211);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(211, 9);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(244);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("brIu;BSeGDaEJb+");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addInteger(244);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(216, 216);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(1302.5924833578);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-644.8F));
      ConstantFloat constantFloat1 = new ConstantFloat((-644.8F));
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("interface");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat1);
      constantPoolGen0.lookupInterfaceMethodref("interface", "interface", ":");
      constantPoolGen0.addFloat((-644.8F));
      int int0 = constantPoolGen0.addDouble((-1));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 227;
      constantPoolGen0.toString();
      constantPoolGen0.addUtf8(":oUU %o+18d^7+");
      constantPoolGen0.lookupFieldref(":oUU %o+18d^7+", "Class '", ":oUU %o+18d^7+");
      constantPoolGen0.addFloat(1);
      int int0 = constantPoolGen0.lookupFloat(3121.0906F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(8, 1204);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantInteger constantInteger0 = new ConstantInteger(8);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1840, 1840);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1840
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = new ConstantLong(1427L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(137, 46);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":fK0&'hH`{3i1_Gn");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[5] = (Constant) constantUtf8_1;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupLong(4L);
      constantPoolGen0.lookupInteger((-1));
      int int0 = constantPoolGen0.addDouble(4L);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(137, 46);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(46, 237);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[1], constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 137, reference_index = 46)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.adjustSize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = Member.DECLARED;
      ConstantClass constantClass0 = new ConstantClass(1);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantClass cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.addLong(1085L);
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-644.8F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("interface");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      ObjectType objectType1 = Type.STRING;
      objectType0.accessibleTo(objectType1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(136);
      constantFloat1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayType arrayType0 = new ArrayType("<Unknown>", 136);
      ArrayType arrayType1 = new ArrayType("Unknown constant type ", 1);
      assertEquals(1, arrayType1.getDimensions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("", "SQ38hs3o$/3", "SQ38hs3o$/3");
      constantPoolGen0.lookupDouble((-1));
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      String string0 = "aDN";
      constantPoolGen0.lookupUtf8("aDN");
      // Undeclared exception!
      try { 
        constantPoolGen1.setConstant((-1), constantInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      aALOAD0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1400L);
      int int0 = Long.BYTES;
      InstructionList instructionList0 = new InstructionList(pUSH0);
      constantPoolGen0.lookupNameAndType("<return address targeting ", "<return address targeting ");
      int int1 = constantPoolGen0.lookupLong(1400L);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      AALOAD aALOAD0 = new AALOAD();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2853L);
      pUSH0.getInstructionList();
      constantPoolGen0.addDouble((-1.452428225787319));
      int int0 = Character.MAX_RADIX;
      ObjectType objectType0 = new ObjectType("1 ~");
      constantPoolGen0.addLong(2853L);
      constantPoolGen0.lookupNameAndType("~?r*go.`c]g~)lG7?6", "1 ~");
      constantPoolGen0.adjustSize();
      ObjectType objectType1 = Type.THROWABLE;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(36, 36);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "\n";
      String string1 = "(\"{8*!!CH]d2~C;^9Vv#@=ow6Dd#)";
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      aALOAD0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1407L);
      constantPoolGen0.addDouble(1382.0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      constantPoolGen0.lookupDouble(2847.2403209042623);
      int int0 = constantPoolGen0.lookupNameAndType("", "?RL^0");
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2252);
      constantMethodType0.clone();
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":z%_t");
      constantArray0[1] = (Constant) constantUtf8_0;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addString(":z%_t");
      constantPoolGen0.addString(":z%_t");
      constantPoolGen0.lookupInteger(2);
      int int0 = constantPoolGen0.lookupFloat((-2927.9646F));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      int int0 = (-2840);
      ConstantInteger constantInteger0 = new ConstantInteger((-2840));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2106185883), 106);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ClassPath classPath0 = new ClassPath("w3");
      ClassPath classPath1 = new ClassPath(classPath0, "`T\"lBc0pg`");
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      ConstantFloat constantFloat0 = new ConstantFloat((-2840));
      ConstantDouble constantDouble0 = new ConstantDouble((-2106185883));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(0, 0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2106185883
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(4);
      ConstantLong constantLong0 = new ConstantLong(4);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong(1L);
      constantArray0[2] = (Constant) constantLong2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantString0.getBytes(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = 1280;
      ConstantString constantString0 = new ConstantString(1280);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-170), 1280);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(46, 46);
      ConstantFloat constantFloat0 = new ConstantFloat(1280);
      ConstantDouble constantDouble0 = new ConstantDouble(1280);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1280
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addInteger(1);
      constantPoolGen0.lookupInteger(237);
      constantPoolGen0.getConstant(8);
      int int0 = new Integer((-1));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = null;
      constantArray0[1] = null;
      constantArray0[2] = null;
      constantArray0[3] = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant((Constant) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)42);
      ObjectType objectType0 = Type.OBJECT;
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantArray0[2], constantPoolGen0);
      String string0 = "t-oEH>}Zh[\\uMDtu-&";
      // Undeclared exception!
      try { 
        constantInteger0.accept((org.apache.bcel.classfile.Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = new ConstantLong(1427L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(137, 46);
      ConstantInteger constantInteger0 = new ConstantInteger((-1073741823));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantArray0[3] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":fK0&'hH`{3i1_Gn");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(":fK0&'hH`{3i1_Gn");
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong(4L);
      int int1 = constantPoolGen0.lookupInteger((-1));
      assertTrue(int1 == int0);
      
      int int2 = constantPoolGen0.addDouble(0.0);
      assertEquals(4, int2);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(156);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-257), 46);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat((-257));
      constantArray0[4] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      int int0 = constantPoolGen0.addNameAndType("", "");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((-4265));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getFinalConstantPool();
      int int0 = 116;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-4265), 116);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      constantFieldref1.setClassIndex(248);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4265
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-2958L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
      int int0 = 233;
      NEWARRAY nEWARRAY0 = new NEWARRAY();
      // Undeclared exception!
      try { 
        nEWARRAY0.getType();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 0
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "1 ~";
      AALOAD aALOAD0 = new AALOAD();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2853L);
      int int0 = Pattern.MULTILINE;
      constantPoolGen0.lookupDouble((-1241.748786102329));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupUtf8((String) null);
      ConstantDouble constantDouble0 = new ConstantDouble(8);
      constantPoolGen0.addInteger((-1));
      constantDouble0.setBytes(2853L);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-150), (-150));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-150), 118);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString(118);
      constantArray0[3] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -150
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addDouble(2.0);
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.index;
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFieldref("<\"~54/KcSYamC_g4", "<\"~54/KcSYamC_g4", "<\"~54/KcSYamC_g4");
      constantPoolGen0.lookupNameAndType("<\"~54/KcSYamC_g4", "<\"~54/KcSYamC_g4");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addDouble(149.362);
      constantPoolGen1.getFinalConstantPool();
      AALOAD aALOAD0 = new AALOAD();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      constantPoolGen0.addFieldref("<\"~54/KcSYamC_g4", "<\"~54/KcSYamC_g4", "<\"~54/KcSYamC_g4");
      assertEquals(5, constantPoolGen0.getSize());
      
      BIPUSH bIPUSH0 = new BIPUSH();
      constantPoolGen1.adjustSize();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(256, 4);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen2.index;
      Constant constant0 = constantNameAndType0.copy();
      constantPoolGen2.lookupInterfaceMethodref("3s911)mlG<OB#b", "<\"~54/KcSYamC_g4", "3s911)mlG<OB#b");
      int int2 = Long.SIZE;
      constantPoolGen1.lookupInteger((byte)68);
      constantPoolGen2.setConstant(4, constant0);
      assertEquals(1, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(137, 137);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("NEW.gevType() returning a non-refXrence type?!");
      int int0 = (-810);
      constantMethodHandle0.setReferenceIndex((-810));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.getConstantPool();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(137, 137);
      constantPoolGen0.addString("NEW.gevType() returning a non-refXrence type?!");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(138, 64);
      int int1 = 234;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(137, 234);
      constantFieldref1.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.DECLARED;
      constantPoolGen0.addString("u");
      int int1 = Character.MAX_CODE_POINT;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int2 = Pattern.UNIX_LINES;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      try { 
        constantPool0.getConstantString(213, (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 213 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-94);
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen0.addClass(objectType0);
      String string0 = constantPool0.toString();
      int int0 = constantPoolGen0.index;
      constantPoolGen0.lookupDouble(2.0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupClass(string0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"1)CONSTANT_Utf8[1](\"java/lang/Class\")
         // 2)CONSTANT_Class[7](name_index = 1)
         // 3)null
         // 4)null
         // 5)null
         // 6)null
         // 7)null
         // 8)null
         // 9)null
         // 10)null
         // 11)null
         // 12)null
         // 13)null
         // 14)null
         // 15)null
         // 16)null
         // 17)null
         // 18)null
         // 19)null
         // 20)null
         // 21)null
         // 22)null
         // 23)null
         // 24)null
         // 25)null
         // 26)null
         // 27)null
         // 28)null
         // 29)null
         // 30)null
         // 31)null
         // 32)null
         // 33)null
         // 34)null
         // 35)null
         // 36)null
         // 37)null
         // 38)null
         // 39)null
         // 40)null
         // 41)null
         // 42)null
         // 43)null
         // 44)null
         // 45)null
         // 46)null
         // 47)null
         // 48)null
         // 49)null
         // 50)null
         // 51)null
         // 52)null
         // 53)null
         // 54)null
         // 55)null
         // 56)null
         // 57)null
         // 58)null
         // 59)null
         // 60)null
         // 61)null
         // 62)null
         // 63)null
         // 64)null
         // 65)null
         // 66)null
         // 67)null
         // 68)null
         // 69)null
         // 70)null
         // 71)null
         // 72)null
         // 73)null
         // 74)null
         // 75)null
         // 76)null
         // 77)null
         // 78)null
         // 79)null
         // 80)null
         // 81)null
         // 82)null
         // 83)null
         // 84)null
         // 85)null
         // 86)null
         // 87)null
         // 88)null
         // 89)null
         // 90)null
         // 91)null
         // 92)null
         // 93)null
         // 94)null
         // 95)null
         // 96)null
         // 97)null
         // 98)null
         // 99)null
         // 100)null
         // 101)null
         // 102)null
         // 103)null
         // 104)null
         // 105)null
         // 106)null
         // 107)null
         // 108)null
         // 109)null
         // 110)null
         // 111)null
         // 112)null
         // 113)null
         // 114)null
         // 115)null
         // 116)null
         // 117)null
         // 118)null
         // 119)null
         // 120)null
         // 121)null
         // 122)null
         // 123)null
         // 124)null
         // 125)null
         // 126)null
         // 127)null
         // 128)null
         // 129)null
         // 130)null
         // 131)null
         // 132)null
         // 133)null
         // 134)null
         // 135)null
         // 136)null
         // 137)null
         // 138)null
         // 139)null
         // 140)null
         // 141)null
         // 142)null
         // 143)null
         // 144)null
         // 145)null
         // 146)null
         // 147)null
         // 148)null
         // 149)null
         // 150)null
         // 151)null
         // 152)null
         // 153)null
         // 154)null
         // 155)null
         // 156)null
         // 157)null
         // 158)null
         // 159)null
         // 160)null
         // 161)null
         // 162)null
         // 163)null
         // 164)null
         // 165)null
         // 166)null
         // 167)null
         // 168)null
         // 169)null
         // 170)null
         // 171)null
         // 172)null
         // 173)null
         // 174)null
         // 175)null
         // 176)null
         // 177)null
         // 178)null
         // 179)null
         // 180)null
         // 181)null
         // 182)null
         // 183)null
         // 184)null
         // 185)null
         // 186)null
         // 187)null
         // 188)null
         // 189)null
         // 190)null
         // 191)null
         // 192)null
         // 193)null
         // 194)null
         // 195)null
         // 196)null
         // 197)null
         // 198)null
         // 199)null
         // 200)null
         // 201)null
         // 202)null
         // 203)null
         // 204)null
         // 205)null
         // 206)null
         // 207)null
         // 208)null
         // 209)null
         // 210)null
         // 211)null
         // 212)null
         // 213)null
         // 214)null
         // 215)null
         // 216)null
         // 217)null
         // 218)null
         // 219)null
         // 220)null
         // 221)null
         // 222)null
         // 223)null
         // 224)null
         // 225)null
         // 226)null
         // 227)null
         // 228)null
         // 229)null
         // 230)null
         // 231)null
         // 232)null
         // 233)null
         // 234)null
         // 235)null
         // 236)null
         // 237)null
         // 238)null
         // 239)null
         // 240)null
         // 241)null
         // 242)null
         // 243)null
         // 244)null
         // 245)null
         // 246)null
         // 247)null
         // 248)null
         // 249)null
         // 250)null
         // 251)null
         // 252)null
         // 253)null
         // 254)null
         // 255)null
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.DECLARED;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 1);
      int int1 = Pattern.COMMENTS;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("h", "h", ";");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1, 5);
      try { 
        constantPool0.constantToString(5, (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Utf8' at index 5 and got CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2853L);
      pUSH0.getInstructionList();
      constantPoolGen0.addDouble((-1.452428225787319));
      constantPoolGen0.addFloat(1246.5176F);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      int int0 = Character.MAX_RADIX;
      constantPoolGen0.addLong(2853L);
      constantPoolGen0.lookupNameAndType("~?r*go.`c]g~)lG7?6", "1 ~");
      constantPoolGen0.adjustSize();
      ObjectType objectType0 = Type.THROWABLE;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 252);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantLong cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.BYTES;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-4616189618054758400L));
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int1 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.addMethodref("#1GhI@Z", "l~pdNV`O", "h");
      constantPoolGen0.lookupFieldref("^Y^ls$4#$RrXjA&%Unknown constant type ", "l~pdNV`O", "^Y^ls$4#$RrXjA&%Unknown constant type ");
      int int2 = Double.MIN_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addUtf8("h");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 8);
      constantFieldref0.copy();
      int int3 = Pattern.COMMENTS;
      int int4 = constantPoolGen0.getSize();
      assertEquals(9, int4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(139, 46);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.UNICODE_CASE;
      String string0 = "NEW.gevType() returning a non-refXrence type?!";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("NEW.gevType() returning a non-refXrence type?!");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(46, 46);
      constantPoolGen0.toString();
      constantPoolGen0.addInterfaceMethodref("", "", "NEW.gevType() returning a non-refXrence type?!");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(139, 36);
      constantFieldref0.setClassIndex(36);
      Constant.setComparator((BCELComparator) null);
      Constant constant0 = constantFieldref0.copy();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen3.addConstant(constant0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      Integer integer0 = new Integer(4);
      constantPoolGen0.getConstantPool();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1112, 4);
      constantPoolGen0.setConstant(4, constantMethodref0);
      constantPoolGen0.lookupMethodref("", "", "");
      int int0 = constantPoolGen0.addNameAndType("%", "&");
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      int int0 = Member.DECLARED;
      constantPoolGen0.addString("Sl");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("Sl", "Sl", "Sl");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 250);
      constantMethodHandle0.setReferenceIndex(1638);
      Constant[] constantArray0 = new Constant[17];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.lookupNameAndType("S;bLNi2~)s4.HH&S;bLNi2~)s4.HH&[m", "\n");
      constantPoolGen2.addInterfaceMethodref("\n", "Sl", "Sl");
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen3.addMethodref("S;bLNi2~)s4.HH&S;bLNi2~)s4.HH&[m", "@3C", "S;bLNi2~)s4.HH&S;bLNi2~)s4.HH&[m");
      constantPoolGen1.addMethodref("", "", "Unexpecte4 constant type: ");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-15), (-2202));
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen(constantArray0);
      constantPoolGen5.getConstantPool();
      constantPoolGen5.addFieldref("\n", "Unexpecte4 constant type: ", "S;bLNi2~)s4.HH&S;bLNi2~)s4.HH&[m");
      constantPoolGen2.addInterfaceMethodref("\n", "Sl", "Sl");
      constantPoolGen0.getFinalConstantPool();
      assertEquals(6, constantPoolGen0.getSize());
  }
}
