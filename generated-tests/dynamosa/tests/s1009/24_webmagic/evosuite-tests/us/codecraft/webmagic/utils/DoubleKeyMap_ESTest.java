/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 12:33:29 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3867));
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, (Object) hashMap0, integer0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer1 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0, (Object) hashMap1);
      assertEquals((-3867), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, HashMap<String, Object>>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Object, Map<Object, Object>>, Map<String, String>> hashMap0 = new HashMap<HashMap<Object, Map<Object, Object>>, Map<String, String>>();
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<String, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, Integer>();
      Map<String, String> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<Object, Object>>, String, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Map<Object, Object>>, String, String>(hashMap0, class0);
      Map<String, String> map1 = doubleKeyMap1.remove(hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put((String) null, "", "");
      Map<String, String> map0 = doubleKeyMap0.remove((String) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>((Map<Integer, Map<String, String>>) null);
      Integer integer0 = new Integer(4030);
      doubleKeyMap0.put(integer0, "f#9/qX@Y5:4Oq", "X2N ");
      Map<String, String> map0 = doubleKeyMap0.get(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(836);
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      Integer integer1 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Map<String, Map<Integer, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Integer, Object>>(map0);
      Map<Integer, Object> map1 = doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, String>();
      HashMap<Object, Map<Map<Integer, String>, HashMap<String, String>>> hashMap0 = new HashMap<Object, Map<Map<Integer, String>, HashMap<String, String>>>();
      DoubleKeyMap<Object, Map<Integer, String>, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, HashMap<String, String>>(hashMap0);
      Map<Map<Integer, String>, HashMap<String, String>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, Object>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap0.put(map1, (Integer) null, (Object) doubleKeyMap2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = doubleKeyMap1.put((Object) "", (Object) doubleKeyMap0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Object>, HashMap<Object, Object>>> hashMap0 = new HashMap<String, Map<HashMap<Object, Object>, HashMap<Object, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, HashMap<Object, Object>>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, (HashMap<Object, Object>) null, (HashMap<Object, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>((Map<HashMap<Object, Object>, Map<Object, String>>) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = doubleKeyMap0.get(hashMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, String, Integer>();
      Integer integer0 = doubleKeyMap0.get((Map<String, String>) null, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<String, String>> hashMap0 = new HashMap<Map<Object, Object>, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, String>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(0, 200.0F);
      HashMap<Object, Map<Map<Object, Object>, HashMap<String, Object>>> hashMap2 = new HashMap<Object, Map<Map<Object, Object>, HashMap<String, Object>>>();
      DoubleKeyMap<Object, Map<Object, Object>, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, HashMap<String, Object>>(hashMap2);
      HashMap<String, Object> hashMap3 = doubleKeyMap1.get((Object) doubleKeyMap0, (Map<Object, Object>) hashMap1);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, HashMap<Integer, Object>>();
      Map<HashMap<Object, Object>, HashMap<Integer, Object>> map0 = doubleKeyMap0.get((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Object object0 = new Object();
      Map<String, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(898);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, integer0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, "", (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Object>, String, HashMap<String, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, String, HashMap<String, String>>((Map<Map<String, Object>, Map<String, HashMap<String, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-3867));
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, (Object) hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-3867));
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, (Object) integer0, integer0);
      Integer integer1 = doubleKeyMap0.put((Map<Object, Object>) hashMap0, (Object) hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Map<Integer, HashMap<Map<Object, Object>, Map<Object, Object>>>> hashMap0 = new HashMap<String, Map<Integer, HashMap<Map<Object, Object>, Map<Object, Object>>>>(614);
      DoubleKeyMap<String, Integer, HashMap<Map<Object, Object>, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Map<Object, Object>, Map<Object, Object>>>(hashMap0);
      Integer integer0 = new Integer(614);
      HashMap<Map<Object, Object>, Map<Object, Object>> hashMap1 = new HashMap<Map<Object, Object>, Map<Object, Object>>();
      doubleKeyMap0.put("(hF*1fpRk1*", integer0, hashMap1);
      HashMap<Map<Object, Object>, Map<Object, Object>> hashMap2 = doubleKeyMap0.get("(hF*1fpRk1*", integer0);
      assertEquals(0, hashMap2.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>();
      String string0 = doubleKeyMap1.get(hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }
}
