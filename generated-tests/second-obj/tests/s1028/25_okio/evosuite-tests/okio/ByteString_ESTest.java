/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:32:41 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Set;
import java.util.function.Consumer;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.endsWith(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byte[] byteArray1 = new byte[7];
      byteArray1[2] = (byte)0;
      byteString1.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha512(realBufferedSource0.buffer, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.lastIndexOf(byteString1, 62);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString0.rangeEquals(57, byteString1, (-1551), 101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      byteString0.sha512();
      byte[] byteArray0 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {(byte)30, (byte)102, (byte) (-100), (byte)72, (byte)112, (byte)54, (byte) (-25)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)96);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-30);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.request((byte)0);
      realBufferedSink0.buffer.writeLong((byte)0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.startsWith(byteArray0);
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)64;
      byteArray0[0] = (byte)64;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.substring((int) (byte)0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString((long) (byte)0);
      byteString1.internalArray();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"8wda");
      MockPrintStream mockPrintStream1 = new MockPrintStream("\"8wda");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      mockPrintStream2.append('');
      byteString1.write(mockPrintStream1);
      byteString1.startsWith(byteString0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("not attached to a buffer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString1.asByteBuffer();
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertSame(byteString3, byteString0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      deflater0.deflate(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.internalArray();
      ByteString byteString1 = ByteString.of(byteArray0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = byteString0.compareTo(byteString2);
      assertEquals((-1), int0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("fromIndex=%s toIndex=%s");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.append('O');
      byteString2.sha1();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = ByteString.decodeHex("");
      ByteString byteString2 = byteString0.md5();
      ByteString byteString3 = byteString0.sha1();
      int int0 = byteString3.compareTo(byteString1);
      String string0 = byteString0.utf8;
      Charset.defaultCharset();
      int int1 = byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byteString2.base64Url();
      ByteString byteString4 = ByteString.of(byteArray0, (int) (byte)0, 0);
      assertEquals(0, byteString4.size());
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.indexOf(byteString0, (int) (byte)0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.EMPTY.sha256();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 443, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=443 byteCount=26
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      ByteString byteString0 = ByteString.encodeUtf8("MBkipMf");
      byteString0.lastIndexOf(byteArray0, (int) (byte)3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteString0.getByte(770);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 770
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      Buffer buffer0 = new Buffer();
      int int0 = 3394;
      byteString1.indexOf(byteArray0, 3394);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.endsWith(byteString1);
      Object object0 = new Object();
      Object object1 = new Object();
      byteString1.equals(object1);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1136), 1060);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-1136 byteCount=1060
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      ByteString byteString0 = ByteString.encodeUtf8("X>sh(&/YQK5JzA");
      byteString0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = ByteString.decodeBase64("X>sh(&/YQK5JzA");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)105;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("a969", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString.codePointIndexToCharIndex("", 2900);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      String string0 = "";
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte)12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)51;
      byteArray0[0] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)51, (int) (byte)51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString.codePointIndexToCharIndex("9WsN[dNw{Gkt~;", (byte)12);
      String string0 = "l4";
      // Undeclared exception!
      try { 
        Charset.forName("9WsN[dNw{Gkt~;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9WsN[dNw{Gkt~;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      deflater0.deflate(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString((long) (byte)0);
      byte[] byteArray1 = realBufferedSource0.readByteArray();
      ByteString.of(byteArray1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      ByteString byteString0 = ByteString.encodeUtf8("X>sh(&/YQK5JzA");
      byteString0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        byteString0.substring((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Inflater inflater0 = new Inflater(true);
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertNotNull(gzipSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, byteString0.size());
      
      String string0 = byteString0.base64();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      
      ByteString byteString0 = ByteString.encodeUtf8("X>sh(&/YQK5JzA");
      assertNotNull(byteString0);
      assertEquals(14, byteString0.size());
      
      String string0 = byteString0.hex();
      assertNotNull(string0);
      assertEquals("589e796868666f59594b954a7a49", string0);
      assertEquals(14, byteString0.size());
      
      ByteString byteString1 = ByteString.decodeBase64("X>sh(&/YQK5JzA");
      assertNull(byteString1);
      
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      boolean boolean0 = byteString0.rangeEquals((-4730), (byte[]) null, 467, (-4730));
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("/rJXO_*Q=>x");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/rJXO_*Q=>x", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("rJXO_*Q=>x", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/rJXO_*Q=>x", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("rJXO_*Q=>x", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteString0;
      objectArray0[1] = (Object) byteString0;
      objectArray0[2] = (Object) byteString0;
      PrintStream printStream0 = mockPrintStream0.format("/rJXO_*Q=>x", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/rJXO_*Q=>x", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(11L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("rJXO_*Q=>x", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        byteString0.write(printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(8, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)65, (byte)65, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = byteString0.sha512();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(8, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)65, (byte)65, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)65, (byte)65, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      int int1 = byteString1.lastIndexOf(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(8, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)65, (byte)65, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertNotNull(byteBuffer0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertEquals(8, byteString0.size());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.remaining());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)65, (byte)65, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteString byteString0 = ByteString.encodeString("dMn~z4S", charset0);
      assertNotNull(byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(7, byteString0.size());
      
      ByteBuffer byteBuffer0 = charset0.encode("Z1nnZ.m0Z{%Y");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.limit());
      
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(12, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(12, byteString1.size());
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(7, byteString0.size());
      assertEquals(7, byteString2.size());
      
      boolean boolean1 = byteString2.startsWith(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(7, byteString0.size());
      assertEquals(7, byteString2.size());
      
      int int0 = byteString2.indexOf(byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(7, byteString0.size());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(12, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(12, byteString1.size());
      assertEquals(7, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)37;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(5, byteString0.size());
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)53, (byte) (-91), (byte)37}, byteArray0);
      
      byteStringArray0[0] = byteString0;
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertEquals("[hex=6b6b95a565]", string0);
      assertEquals(5, byteString0.size());
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)53, (byte) (-91), (byte)37}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = ByteString.encodeUtf8("SHA-1");
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertEquals(5, byteString1.size());
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("[hex=aaaaaa]", string0);
      assertNotSame(byteString0, byteString1);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        byteString0.substring((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)3;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)3}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)3}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[0] = (byte)3;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)3;
      ByteString byteString2 = ByteString.decodeBase64("");
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0, byteString2.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("offset=%s > size=%s");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ByteString byteString3 = byteString1.toAsciiUppercase();
      assertNotNull(byteString3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)3}, byteArray0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteString byteString0 = ByteString.encodeString("dMn~z4S", charset0);
      assertNotNull(byteString0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(7, byteString0.size());
      
      ByteBuffer byteBuffer0 = charset0.encode("Z1nnZ.m0Z{%Y");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(12, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.position());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteString1.size());
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(7, byteString0.size());
      assertEquals(7, byteString2.size());
      
      boolean boolean1 = byteString2.startsWith(byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(7, byteString0.size());
      assertEquals(7, byteString2.size());
      
      int int0 = byteString2.compareTo(byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(1, int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(7, byteString0.size());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.position());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteString1.size());
      assertEquals(7, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      assertNotNull(byteString1);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString2 = realBufferedSource0.readByteString((long) (byte)0);
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      
      byte[] byteArray1 = byteString2.internalArray();
      assertNotNull(byteArray1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {}, byteArray1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"8wda");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("\"8wda");
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      assertNotNull(mockPrintStream2);
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      PrintStream printStream0 = mockPrintStream2.append('');
      assertNotNull(printStream0);
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertNotSame(mockPrintStream2, mockPrintStream1);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertSame(mockPrintStream2, printStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream2);
      assertNotSame(printStream0, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      assertNotSame(mockPrintStream1, printStream0);
      
      byteString2.write(mockPrintStream1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      assertNotSame(mockPrintStream1, printStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      
      boolean boolean0 = byteString2.startsWith(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(0, byteString2.size());
      
      String string0 = byteString0.EMPTY.base64Url();
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertEquals("", string0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      String string1 = byteString0.string(charset0);
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteString0.equals((Object)byteString2));
      assertEquals("\uFFFD9\uFFFD\uFFFD^kK\r2U\uFFFD\uFFFD\uFFFD`\u0018\uFFFD\uFFFD\uFFFD\u0007\t", string1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(20, byteString0.size());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertSame(charset0, charset1);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      byte[] byteArray2 = byteString0.internalArray();
      assertNotNull(byteArray2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString0, byteString1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      
      byte[] byteArray3 = byteString2.toByteArray();
      assertNotNull(byteArray3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {}, byteArray3);
      
      boolean boolean1 = byteString2.endsWith(byteArray3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(boolean1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {}, byteArray3);
      
      ByteString byteString3 = byteString2.hmacSha1(byteString1);
      assertNotNull(byteString3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString3.size());
      assertEquals(0, byteString2.size());
      
      int int0 = byteString3.compareTo(byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString3.size());
      assertEquals(0, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertEquals("[size=0]", string0);
      assertEquals(0, byteString0.size());
      
      ByteString byteString1 = ByteString.encodeUtf8("ds/iC'/^wk~MWYe");
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertEquals(15, byteString1.size());
      
      // Undeclared exception!
      try { 
        byteString0.substring((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[1] = (byte)12;
      byteArray1[4] = (byte)12;
      byteString1.EMPTY.hashCode();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      boolean boolean0 = byteString1.endsWith(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)12, (byte)12}, byteArray1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("E$9X");
      assertNotNull(mockPrintStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)11;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte[] byteArray2 = byteString1.internalArray();
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      ByteString byteString2 = ByteString.of(byteArray0);
      assertNotNull(byteString2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(2, byteString2.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotNull(byteString3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertSame(byteString3, byteString2);
      assertEquals(2, byteString2.size());
      assertEquals(2, byteString3.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      int int0 = byteString3.compareTo(byteString2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString0));
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertSame(byteString3, byteString2);
      assertEquals(2, byteString2.size());
      assertEquals(2, byteString3.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("base64 == null");
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PrintStream printStream0 = mockPrintStream0.append('7');
      assertNotNull(printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No deadline");
      assertNotNull(mockFileOutputStream0);
      
      String string0 = "q3UDW73Y";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("q3UDW73Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: q
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)0}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)0}, byteArray0);
      
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertSame(byteString2, byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)0}, byteArray0);
      
      ByteString byteString3 = byteString0.sha512();
      assertNotNull(byteString3);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertEquals(3, byteString0.size());
      assertEquals(64, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)0}, byteArray0);
      
      boolean boolean0 = byteString2.EMPTY.equals(byteString0);
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(boolean0);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertSame(byteString2, byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)0}, byteArray0);
      
      ByteString byteString4 = byteString0.hmacSha1(byteString3);
      assertNotNull(byteString4);
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertEquals(3, byteString0.size());
      assertEquals(64, byteString3.size());
      assertEquals(20, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)0}, byteArray0);
      
      ByteString byteString5 = ByteString.encodeUtf8("MBkip=V");
      assertNotNull(byteString5);
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString0));
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString0);
      assertEquals(7, byteString5.size());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("MBkip=V");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      boolean boolean0 = byteString1.endsWith(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)12, (byte)0, (byte)12, (byte)12, (byte)12}, byteArray1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      String string0 = byteString1.string(charset0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals("_w\uFFFD\uFFFD9\u0004 ZG\uFFFDc\uFFFDb]\uFFFDX\uFFFD\uFFFD\uFFFDx", string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockFile mockFile0 = new MockFile("E$9X", "_w\uFFFD\uFFFD9\u0004 ZG\uFFFDc\uFFFDb]\uFFFDX\uFFFD\uFFFD\uFFFDx");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/E$9X/_w\uFFFD\uFFFD9\u0004 ZG\uFFFDc\uFFFDb]\uFFFDX\uFFFD\uFFFD\uFFFDx", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/E$9X", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("_w\uFFFD\uFFFD9\u0004 ZG\uFFFDc\uFFFDb]\uFFFDX\uFFFD\uFFFD\uFFFDx", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("E$9X");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('G');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      byteString0.write(printStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(byteString0, byteString1);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("E$9X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: $
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      ByteString byteString0 = ByteString.encodeUtf8("MBkipMf");
      assertNotNull(byteString0);
      assertEquals(7, byteString0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("a<,;:@]7$Frd{1~d'Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.decodeHex("");
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      ByteString byteString1 = byteString0.md5();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0, byteString0.size());
      assertEquals(16, byteString1.size());
      
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertSame(byteString1, byteString2);
      assertSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0, byteString0.size());
      assertEquals(16, byteString1.size());
      assertEquals(16, byteString2.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      ByteString byteString3 = ByteString.of(byteArray0);
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertEquals(5, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)15, (byte)15}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("not attahed to abffer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: not attahed to abffer
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("\\^6U4z\"Yp5FP*Z}S ");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(17, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(17, byteBuffer0.capacity());
      assertEquals(17, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=17 cap=17]", byteBuffer0.toString());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=17 lim=17 cap=17]", byteBuffer0.toString());
      assertEquals(17, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(17, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(17, byteBuffer0.limit());
      assertEquals(17, charBuffer0.capacity());
      assertEquals(17, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\\^6U4z\"Yp5FP*Z}S ", charBuffer0.toString());
      assertEquals(17, charBuffer0.limit());
      assertEquals(17, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      
      ByteBuffer byteBuffer1 = charset1.encode(charBuffer0);
      assertNotNull(byteBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertSame(charset0, charset1);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertSame(charset1, charset0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=17 lim=17 cap=17]", byteBuffer0.toString());
      assertEquals(17, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(17, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(17, byteBuffer0.limit());
      assertEquals(17, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(17, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(17, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(17, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.position());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=17 cap=17]", byteBuffer1.toString());
      assertEquals(17, byteBuffer1.capacity());
      assertEquals(17, byteBuffer1.limit());
      
      // Undeclared exception!
      try { 
        ByteString.encodeString("charset == null", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-1786L));
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      
      BufferedSink bufferedSink1 = realBufferedSink0.emit();
      assertNotNull(bufferedSink1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      
      BufferedSink bufferedSink2 = realBufferedSink0.write(byteString0);
      assertNotNull(bufferedSink2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink2);
      assertNotSame(buffer1, buffer0);
      assertSame(bufferedSink2, bufferedSink0);
      assertSame(bufferedSink2, realBufferedSink0);
      assertSame(bufferedSink2, bufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      
      try { 
        realBufferedSource0.readByteString(2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(1, byteString0.size());
      assertEquals(0, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString2 = ByteString.of(byteArray0);
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(1, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      String string0 = byteString1.string(charset0);
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals("", string0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertEquals(1, byteString0.size());
      assertEquals(0, byteString1.size());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString3 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertNotNull(byteString3);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString1));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertEquals(1, byteString0.size());
      assertEquals(0, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater((byte)51, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = byteString0.substring(15);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(5, byteString1.size());
      
      int int0 = byteString1.indexOf(byteString0, (int) (byte)0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(5, byteString1.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DeflaterSink(");
      assertNotNull(mockFileOutputStream0);
      
      Pipe pipe0 = new Pipe(50L);
      assertNotNull(pipe0);
      
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-124), (byte)50, (byte) (-97), (byte)99, (byte)55}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (byte) (-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -124
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      int int0 = deflater0.deflate(byteArray0);
      assertEquals(2, int0);
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte)63, (byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      
      byte[] byteArray1 = byteString0.internalArray();
      assertNotNull(byteArray1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString1, byteString0);
      assertEquals(4, byteString1.size());
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte)63, (byte)0}, byteArray0);
      
      boolean boolean0 = byteString1.endsWith(byteArray1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      assertEquals(4, byteString1.size());
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte)63, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      ByteString byteString2 = realBufferedSource0.readByteString();
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0, byteString2.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      String string0 = byteString2.string(charset0);
      assertNotNull(string0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals("", string0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0, byteString2.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(2, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(2L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertSame(charset0, charset1);
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fy}eFuIojU");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.decodeHex("");
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 2697, 2697);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteString byteString0 = ByteString.encodeString("z!_57,qpxV|13qr", charset0);
      assertNotNull(byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(15, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(4, options0.size());
      
      ByteString byteString1 = options0.get(1);
      assertNotNull(byteString1);
      assertSame(byteString1, byteString0);
      assertEquals(4, options0.size());
      assertEquals(15, byteString1.size());
      
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(15, byteString0.size());
      assertEquals(4, options0.size());
      assertEquals(15, byteString1.size());
      
      MockFile mockFile0 = new MockFile("z!_57,qpxV|13qr", "z!_57,qpxV|13qr");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/z!_57,qpxV|13qr/z!_57,qpxV|13qr", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/z!_57,qpxV|13qr", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("z!_57,qpxV|13qr", mockFile0.getName());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)122;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)63, (byte)39, (byte)122}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertNotNull(gzipSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Deflater deflater0 = gzipSink0.deflater();
      assertNotNull(deflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      
      ByteString byteString1 = ByteString.encodeUtf8("");
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertEquals(0, byteString1.size());
      
      ByteString byteString2 = ByteString.decodeBase64("");
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0, byteString2.size());
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("[hex=abac]", string0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)12}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("C1w=Q<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: w
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = byteString0.base64Url();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("AAAA", string0);
      assertNotSame(byteString0, byteString1);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(byteString0, byteString1);
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString2 = hashingSource1.hash();
      assertNotNull(byteString2);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString3 = hashingSink0.hash();
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString3.size());
      
      ByteBuffer byteBuffer0 = byteString0.EMPTY.asByteBuffer();
      assertNotNull(byteBuffer0);
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertEquals(3, byteString0.size());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString4 = hashingSource1.hash();
      assertNotNull(byteString4);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString1));
      assertTrue(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString0));
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString4.size());
      
      ByteString byteString5 = ByteString.encodeUtf8("ZN6I");
      assertNotNull(byteString5);
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString2));
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString2);
      assertEquals(4, byteString5.size());
      
      ByteString byteString6 = byteString3.md5();
      assertNotNull(byteString6);
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString4));
      assertFalse(byteString6.equals((Object)byteString3));
      assertNotSame(byteString3, byteString6);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString5);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString4);
      assertNotSame(byteString6, byteString3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString3.size());
      assertEquals(16, byteString6.size());
      
      String string1 = byteString3.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteString3.equals((Object)byteString6));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals("[hex=cf89e9957eefb8bdf954685ad66d8aa7d66ae4a5ab5795dc89f4a969d96ce9ce47dad99c5d85f6baff8998d6877eec6f69b999bd47497a89a598967af967da9e]", string1);
      assertNotSame(byteString3, byteString6);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString3.size());
      
      ByteString byteString7 = ByteString.encodeUtf8("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]");
      assertNotNull(byteString7);
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString0));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString2));
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString0);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertEquals(134, byteString7.size());
      
      String string2 = byteString7.toString();
      assertNotNull(string2);
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString0));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[size=134 text=[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36\u2026]", string2);
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString0);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertEquals(134, byteString7.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString8 = realBufferedSource0.readByteString();
      assertNotNull(byteString8);
      assertFalse(byteString8.equals((Object)byteString1));
      assertFalse(byteString8.equals((Object)byteString4));
      assertFalse(byteString8.equals((Object)byteString3));
      assertFalse(byteString8.equals((Object)byteString7));
      assertFalse(byteString8.equals((Object)byteString5));
      assertFalse(byteString8.equals((Object)byteString2));
      assertFalse(byteString8.equals((Object)byteString6));
      assertFalse(byteString8.equals((Object)byteString0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(byteString8, byteString1);
      assertNotSame(byteString8, byteString4);
      assertNotSame(byteString8, byteString3);
      assertNotSame(byteString8, byteString7);
      assertNotSame(byteString8, byteString5);
      assertNotSame(byteString8, byteString2);
      assertNotSame(byteString8, byteString6);
      assertNotSame(byteString8, byteString0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0, byteString8.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString9 = hashingSink0.hash();
      assertNotNull(byteString9);
      assertFalse(byteString9.equals((Object)byteString2));
      assertFalse(byteString9.equals((Object)byteString8));
      assertFalse(byteString9.equals((Object)byteString1));
      assertFalse(byteString9.equals((Object)byteString0));
      assertFalse(byteString9.equals((Object)byteString7));
      assertFalse(byteString9.equals((Object)byteString6));
      assertTrue(byteString9.equals((Object)byteString3));
      assertFalse(byteString9.equals((Object)byteString4));
      assertFalse(byteString9.equals((Object)byteString5));
      assertNotSame(byteString9, byteString3);
      assertNotSame(byteString9, byteString2);
      assertNotSame(byteString9, byteString8);
      assertNotSame(byteString9, byteString1);
      assertNotSame(byteString9, byteString0);
      assertNotSame(byteString9, byteString7);
      assertNotSame(byteString9, byteString6);
      assertNotSame(byteString9, byteString4);
      assertNotSame(byteString9, byteString5);
      assertEquals(64, byteString9.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString10 = byteString7.sha512();
      assertNotNull(byteString10);
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString7.equals((Object)byteString8));
      assertFalse(byteString7.equals((Object)byteString9));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString0));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(byteString10.equals((Object)byteString3));
      assertFalse(byteString10.equals((Object)byteString2));
      assertFalse(byteString10.equals((Object)byteString5));
      assertFalse(byteString10.equals((Object)byteString8));
      assertFalse(byteString10.equals((Object)byteString6));
      assertFalse(byteString10.equals((Object)byteString9));
      assertFalse(byteString10.equals((Object)byteString7));
      assertFalse(byteString10.equals((Object)byteString4));
      assertFalse(byteString10.equals((Object)byteString0));
      assertFalse(byteString10.equals((Object)byteString1));
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString7, byteString8);
      assertNotSame(byteString7, byteString9);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString10);
      assertNotSame(byteString7, byteString0);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertNotSame(byteString10, byteString3);
      assertNotSame(byteString10, byteString2);
      assertNotSame(byteString10, byteString5);
      assertNotSame(byteString10, byteString8);
      assertNotSame(byteString10, byteString6);
      assertNotSame(byteString10, byteString9);
      assertNotSame(byteString10, byteString7);
      assertNotSame(byteString10, byteString4);
      assertNotSame(byteString10, byteString0);
      assertNotSame(byteString10, byteString1);
      assertEquals(134, byteString7.size());
      assertEquals(64, byteString10.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteString byteString11 = ByteString.encodeUtf8("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]");
      assertNotNull(byteString11);
      assertFalse(byteString11.equals((Object)byteString5));
      assertFalse(byteString11.equals((Object)byteString2));
      assertFalse(byteString11.equals((Object)byteString0));
      assertFalse(byteString11.equals((Object)byteString3));
      assertFalse(byteString11.equals((Object)byteString10));
      assertFalse(byteString11.equals((Object)byteString4));
      assertFalse(byteString11.equals((Object)byteString8));
      assertFalse(byteString11.equals((Object)byteString1));
      assertFalse(byteString11.equals((Object)byteString9));
      assertTrue(byteString11.equals((Object)byteString7));
      assertFalse(byteString11.equals((Object)byteString6));
      assertNotSame(byteString11, byteString5);
      assertNotSame(byteString11, byteString2);
      assertNotSame(byteString11, byteString0);
      assertNotSame(byteString11, byteString7);
      assertNotSame(byteString11, byteString3);
      assertNotSame(byteString11, byteString10);
      assertNotSame(byteString11, byteString4);
      assertNotSame(byteString11, byteString8);
      assertNotSame(byteString11, byteString1);
      assertNotSame(byteString11, byteString9);
      assertNotSame(byteString11, byteString6);
      assertEquals(134, byteString11.size());
      
      String string3 = byteString9.utf8;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u03C3\uFFFD5~\uFE3D\uFFFDT(P\uFFFDm\uFFFD\u0007\uFFFD \uFFFD\u0005\u000BW\u0015\u0703\uFFFD\uFFFD!\uFFFDl\uFFFD\uFFFDG\uFFFD\uFFFD<]\uFFFD\uFFFD\uFFFD\uFFFD\u0018\u0487~\uFFFD/c\uFFFD1\uFFFDGAz\uFFFD\uFFFD82z\uFFFD'\uFFFD>", string3);
      
      ByteString byteString12 = realBufferedSource0.readByteString();
      assertNotNull(byteString12);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString12.equals((Object)byteString3));
      assertFalse(byteString12.equals((Object)byteString11));
      assertFalse(byteString12.equals((Object)byteString2));
      assertFalse(byteString12.equals((Object)byteString0));
      assertFalse(byteString12.equals((Object)byteString6));
      assertFalse(byteString12.equals((Object)byteString9));
      assertFalse(byteString12.equals((Object)byteString4));
      assertFalse(byteString12.equals((Object)byteString1));
      assertFalse(byteString12.equals((Object)byteString10));
      assertFalse(byteString12.equals((Object)byteString5));
      assertTrue(byteString12.equals((Object)byteString8));
      assertFalse(byteString12.equals((Object)byteString7));
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString12, byteString3);
      assertNotSame(byteString12, byteString11);
      assertNotSame(byteString12, byteString2);
      assertNotSame(byteString12, byteString0);
      assertNotSame(byteString12, byteString8);
      assertNotSame(byteString12, byteString6);
      assertNotSame(byteString12, byteString9);
      assertNotSame(byteString12, byteString4);
      assertNotSame(byteString12, byteString1);
      assertNotSame(byteString12, byteString10);
      assertNotSame(byteString12, byteString5);
      assertNotSame(byteString12, byteString7);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString12.size());
      
      // Undeclared exception!
      try { 
        HashingSink.hmacSha256(hashingSink0, byteString12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-123);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)19, (byte)23, (byte) (-123)}, byteArray0);
      
      try { 
        ByteString.read(byteArrayInputStream0, (byte)23);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 4485;
      int int1 = ByteString.codePointIndexToCharIndex("\r", 4485);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      int int2 = 72;
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString1.size());
      
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)100}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)11;
      byteArray1[2] = (byte)100;
      byteArray1[5] = (byte)100;
      String string0 = byteString0.base64Url();
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("C2Q=", string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)100}, byteArray0);
      
      Buffer buffer1 = buffer0.write(byteArray1);
      assertNotNull(buffer1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(buffer0, buffer1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)100, (byte)11, (byte)0, (byte)100, (byte)0}, byteArray1);
      
      ByteString byteString1 = byteString0.sha512();
      assertNotNull(byteString1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)100}, byteArray0);
      
      ByteString byteString2 = buffer0.readByteString();
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(7, byteString2.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string1 = byteString1.toString();
      assertNotNull(string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals("[hex=4ac8a7947daa7df8e9fa7f86bcf6fab76897a7a89ad67964ba4766b9694ae6469d65786fb6996566daeb6d5aa5fed4967ecc9bf7cb7a9bf6bb898649c59d675b]", string1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertEquals(2, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)11, (byte)100}, byteArray0);
      
      MockFile mockFile0 = new MockFile((String) null, "");
      assertNotNull(mockFile0);
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      MockFile mockFile1 = new MockFile(mockFile0, "u0rKTL7uG<`K#s");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/u0rKTL7uG<`K#s", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals("u0rKTL7uG<`K#s", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio", mockFile1.getParent());
      
      MockFile mockFile2 = new MockFile("MD5", "MD5");
      assertNotNull(mockFile2);
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.exists());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertFalse(mockFile2.canExecute());
      assertEquals("MD5", mockFile2.getName());
      assertTrue(mockFile2.isFile());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.canWrite());
      assertFalse(mockFile2.canRead());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals(0L, mockFile2.length());
      assertEquals(0L, mockFile2.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5/MD5", mockFile2.toString());
      assertFalse(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5", mockFile2.getParent());
      
      File file0 = mockFile2.getCanonicalFile();
      assertNotNull(file0);
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotSame(mockFile2, file0);
      assertNotSame(mockFile2, mockFile1);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(file0, mockFile2);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertFalse(mockFile2.exists());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertFalse(mockFile2.canExecute());
      assertEquals("MD5", mockFile2.getName());
      assertTrue(mockFile2.isFile());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.canWrite());
      assertFalse(mockFile2.canRead());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals(0L, mockFile2.length());
      assertEquals(0L, mockFile2.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5/MD5", mockFile2.toString());
      assertFalse(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5", mockFile2.getParent());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5/MD5", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("MD5", file0.getName());
      
      boolean boolean1 = byteString0.equals(mockFile2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertTrue(mockFile2.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(mockFile2, file0);
      assertNotSame(mockFile2, mockFile1);
      assertNotSame(mockFile2, mockFile0);
      assertEquals(2, byteString0.size());
      assertFalse(mockFile2.exists());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertFalse(mockFile2.canExecute());
      assertEquals("MD5", mockFile2.getName());
      assertTrue(mockFile2.isFile());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.canWrite());
      assertFalse(mockFile2.canRead());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals(0L, mockFile2.length());
      assertEquals(0L, mockFile2.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5/MD5", mockFile2.toString());
      assertFalse(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/MD5", mockFile2.getParent());
      assertArrayEquals(new byte[] {(byte)11, (byte)100}, byteArray0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile2, " {");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  {
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString2 = byteString1.sha1();
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = byteString2.base64Url();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals("hovtOH6rxHG7uBu2k2UlpAGN1Jk=", string0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString3 = byteString1.toAsciiUppercase();
      assertNotNull(byteString3);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString4 = new ByteString(byteArray0);
      assertNotNull(byteString4);
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertEquals(2, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString5 = byteString4.sha512();
      assertNotNull(byteString5);
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString1));
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString1);
      assertEquals(2, byteString4.size());
      assertEquals(64, byteString5.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      boolean boolean2 = byteString0.equals(byteString4);
      assertFalse(byteString0.equals((Object)byteString5));
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString5));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertEquals(2, byteString0.size());
      assertEquals(2, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("hovtOH6rxHG7uBu2k2UlpAGN1Jk=");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      boolean boolean3 = mockPrintStream0.checkError();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(boolean3);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      
      boolean boolean4 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      MockPrintStream mockPrintStream2 = new MockPrintStream("hovtOH6rxHG7uBu2k2UlpAGN1Jk=");
      assertNotNull(mockPrintStream2);
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byteString2.write(mockPrintStream2);
      assertFalse(byteString0.equals((Object)byteString5));
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(mockPrintStream2, mockPrintStream1);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString1);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString6 = byteString4.sha512();
      assertNotNull(byteString6);
      assertTrue(byteString6.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString4));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString5));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertNotSame(byteString6, byteString5);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString4);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString3);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString6);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertEquals(64, byteString6.size());
      assertEquals(2, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertNotNull(hashingSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString7 = hashingSink0.hash();
      assertNotNull(byteString7);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString7.equals((Object)byteString0));
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString7, byteString0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString7.size());
      
      String string1 = byteString7.toString();
      assertNotNull(string1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString7.equals((Object)byteString0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[hex=d49d8cd98faab6a4e98aa998ecf8467e]", string1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString7, byteString0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString7.size());
      
      ByteString byteString8 = hashingSink0.hash();
      assertNotNull(byteString8);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString8.equals((Object)byteString5));
      assertFalse(byteString8.equals((Object)byteString4));
      assertFalse(byteString8.equals((Object)byteString6));
      assertFalse(byteString8.equals((Object)byteString1));
      assertFalse(byteString8.equals((Object)byteString0));
      assertTrue(byteString8.equals((Object)byteString7));
      assertFalse(byteString8.equals((Object)byteString2));
      assertFalse(byteString8.equals((Object)byteString3));
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString8, byteString7);
      assertNotSame(byteString8, byteString5);
      assertNotSame(byteString8, byteString4);
      assertNotSame(byteString8, byteString6);
      assertNotSame(byteString8, byteString1);
      assertNotSame(byteString8, byteString0);
      assertNotSame(byteString8, byteString2);
      assertNotSame(byteString8, byteString3);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString8.size());
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertNotNull(hashingSink1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString9 = hashingSink1.hash();
      assertNotNull(byteString9);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString9.equals((Object)byteString5));
      assertFalse(byteString9.equals((Object)byteString3));
      assertFalse(byteString9.equals((Object)byteString0));
      assertFalse(byteString9.equals((Object)byteString8));
      assertFalse(byteString9.equals((Object)byteString1));
      assertFalse(byteString9.equals((Object)byteString4));
      assertFalse(byteString9.equals((Object)byteString2));
      assertFalse(byteString9.equals((Object)byteString6));
      assertFalse(byteString9.equals((Object)byteString7));
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString9, byteString5);
      assertNotSame(byteString9, byteString3);
      assertNotSame(byteString9, byteString0);
      assertNotSame(byteString9, byteString8);
      assertNotSame(byteString9, byteString1);
      assertNotSame(byteString9, byteString4);
      assertNotSame(byteString9, byteString2);
      assertNotSame(byteString9, byteString6);
      assertNotSame(byteString9, byteString7);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString9.size());
      
      ByteString byteString10 = byteString9.md5();
      assertNotNull(byteString10);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString9.equals((Object)byteString5));
      assertFalse(byteString9.equals((Object)byteString3));
      assertFalse(byteString9.equals((Object)byteString0));
      assertFalse(byteString9.equals((Object)byteString8));
      assertFalse(byteString9.equals((Object)byteString1));
      assertFalse(byteString9.equals((Object)byteString4));
      assertFalse(byteString9.equals((Object)byteString2));
      assertFalse(byteString9.equals((Object)byteString6));
      assertFalse(byteString9.equals((Object)byteString7));
      assertFalse(byteString10.equals((Object)byteString2));
      assertFalse(byteString10.equals((Object)byteString4));
      assertFalse(byteString10.equals((Object)byteString9));
      assertFalse(byteString10.equals((Object)byteString3));
      assertFalse(byteString10.equals((Object)byteString7));
      assertFalse(byteString10.equals((Object)byteString5));
      assertFalse(byteString10.equals((Object)byteString8));
      assertFalse(byteString10.equals((Object)byteString0));
      assertFalse(byteString10.equals((Object)byteString1));
      assertFalse(byteString10.equals((Object)byteString6));
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString9, byteString5);
      assertNotSame(byteString9, byteString10);
      assertNotSame(byteString9, byteString3);
      assertNotSame(byteString9, byteString0);
      assertNotSame(byteString9, byteString8);
      assertNotSame(byteString9, byteString1);
      assertNotSame(byteString9, byteString4);
      assertNotSame(byteString9, byteString2);
      assertNotSame(byteString9, byteString6);
      assertNotSame(byteString9, byteString7);
      assertNotSame(byteString10, byteString2);
      assertNotSame(byteString10, byteString4);
      assertNotSame(byteString10, byteString9);
      assertNotSame(byteString10, byteString3);
      assertNotSame(byteString10, byteString7);
      assertNotSame(byteString10, byteString5);
      assertNotSame(byteString10, byteString8);
      assertNotSame(byteString10, byteString0);
      assertNotSame(byteString10, byteString1);
      assertNotSame(byteString10, byteString6);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString9.size());
      assertEquals(16, byteString10.size());
      
      int int0 = byteString7.lastIndexOf(byteString8, (int) (byte)12);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString10));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString7.equals((Object)byteString0));
      assertTrue(byteString7.equals((Object)byteString8));
      assertFalse(byteString7.equals((Object)byteString9));
      assertFalse(byteString8.equals((Object)byteString9));
      assertFalse(byteString8.equals((Object)byteString5));
      assertFalse(byteString8.equals((Object)byteString10));
      assertFalse(byteString8.equals((Object)byteString4));
      assertFalse(byteString8.equals((Object)byteString6));
      assertFalse(byteString8.equals((Object)byteString1));
      assertFalse(byteString8.equals((Object)byteString0));
      assertTrue(byteString8.equals((Object)byteString7));
      assertFalse(byteString8.equals((Object)byteString2));
      assertFalse(byteString8.equals((Object)byteString3));
      assertEquals(0, int0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString10);
      assertNotSame(byteString7, byteString8);
      assertNotSame(byteString7, byteString2);
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString7, byteString0);
      assertNotSame(byteString7, byteString9);
      assertNotSame(byteString8, byteString7);
      assertNotSame(byteString8, byteString9);
      assertNotSame(byteString8, byteString5);
      assertNotSame(byteString8, byteString10);
      assertNotSame(byteString8, byteString4);
      assertNotSame(byteString8, byteString6);
      assertNotSame(byteString8, byteString1);
      assertNotSame(byteString8, byteString0);
      assertNotSame(byteString8, byteString2);
      assertNotSame(byteString8, byteString3);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString7.size());
      assertEquals(16, byteString8.size());
      
      int int1 = byteString6.lastIndexOf(byteString4, (int) (byte)12);
      assertFalse(byteString6.equals((Object)byteString8));
      assertFalse(byteString6.equals((Object)byteString10));
      assertFalse(byteString6.equals((Object)byteString9));
      assertTrue(byteString6.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString7));
      assertFalse(byteString6.equals((Object)byteString4));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString8));
      assertFalse(byteString4.equals((Object)byteString10));
      assertFalse(byteString4.equals((Object)byteString5));
      assertFalse(byteString4.equals((Object)byteString7));
      assertFalse(byteString4.equals((Object)byteString9));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString6));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(byteString6, byteString8);
      assertNotSame(byteString6, byteString5);
      assertNotSame(byteString6, byteString10);
      assertNotSame(byteString6, byteString9);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString7);
      assertNotSame(byteString6, byteString4);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString3);
      assertNotSame(byteString4, byteString8);
      assertNotSame(byteString4, byteString10);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString7);
      assertNotSame(byteString4, byteString9);
      assertNotSame(byteString4, byteString6);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertEquals(64, byteString6.size());
      assertEquals(2, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString2 = byteString1.sha1();
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      String string0 = byteString1.base64Url();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals("X3ft_TkEIFpHiWOVYl3QWKmWnXg=", string0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString3 = byteString1.toAsciiUppercase();
      assertNotNull(byteString3);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString4 = new ByteString(byteArray0);
      assertNotNull(byteString4);
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString0));
      assertEquals(2, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      ByteString byteString5 = byteString4.sha512();
      assertNotNull(byteString5);
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString0));
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString0);
      assertEquals(2, byteString4.size());
      assertEquals(64, byteString5.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      boolean boolean2 = byteString1.equals(byteString3);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString5);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Expected leading [0-9a-fA-F] character but was 0x");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      boolean boolean3 = mockPrintStream1.checkError();
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(boolean3);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }
}
