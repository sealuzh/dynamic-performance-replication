/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:40 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RE2.match("Lm", "Lm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RE2.quoteMeta("anynotn}> ");
      assertEquals("anynotn\\}> ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("uUPZ-8");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.Parser$1");
      int[] intArray0 = rE2_0.findSubmatchIndex("com.google.re2j.Parser$1");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 4);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("uUPZ-8");
      assertNotNull(rE2_0);
      assertEquals("uUPZ-8", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("uUPZ-8", (-234));
      assertNotNull(list0);
      assertEquals("uUPZ-8", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("anynotn} -> ");
      assertNotNull(rE2_0);
      assertEquals("anynotn} -> ", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("anynotn} -> ", "anynotn} -> ");
      assertEquals("anynotn} -> ", string0);
      assertNotNull(string0);
      assertEquals("anynotn} -> ", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("ax7=PNI3|Gp~,");
      assertNotNull(rE2_0);
      assertEquals("ax7=PNI3|Gp~,", rE2_0.toString());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        rE2_0.match("ax7=PNI3|Gp~,", 3077, 3077, 3077, intArray0, 3077);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      RE2 rE2_0 = new RE2("Ri?!18SM%/>e<");
      assertNotNull(rE2_0);
      assertEquals("Ri?!18SM%/>e<", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(intArray0);
      assertEquals("Ri?!18SM%/>e<", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("anynotnl -> ");
      assertNotNull(rE2_0);
      assertEquals("anynotnl -> ", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("anynotnl -> ");
      assertNotNull(stringArray0);
      assertEquals("anynotnl -> ", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("N]dfvZ75c537");
      assertNotNull(rE2_0);
      assertEquals("N]dfvZ75c537", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("N]dfvZ75c537");
      assertTrue(boolean0);
      assertEquals("N]dfvZ75c537", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", (-234));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("^mC{rH+#cx/2e|");
      assertNotNull(rE2_0);
      assertEquals("^mC{rH+#cx/2e|", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("^mC{rH+#cx/2e|", 114);
      assertNotNull(list0);
      assertEquals("^mC{rH+#cx/2e|", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[19];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 13);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(13, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("D#");
      assertNotNull(rE2_0);
      assertEquals("D#", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
      assertEquals("D#", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = new RE2("y");
      assertNotNull(rE2_0);
      assertEquals("y", rE2_0.toString());
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(byteArray1);
      assertEquals("y", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("e&*P?>'$kgQ^");
      assertNotNull(rE2_0);
      assertEquals("e&*P?>'$kgQ^", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("e&*P?>'$kgQ^");
      assertNull(stringArray0);
      assertEquals("e&*P?>'$kgQ^", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compile("BxtBu>:y");
      assertNotNull(rE2_0);
      assertEquals("BxtBu>:y", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("BxtBu>:y", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-4366));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Km*Y");
      assertNotNull(rE2_0);
      assertEquals("Km*Y", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("Km*Y");
      assertNull(intArray0);
      assertEquals("Km*Y", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("com.google.re2j.Prog$1");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Prog$1", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 1387);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("com.google.re2j.Prog$1", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[20];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 8);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("com.google.re2j.RE2", 2882);
      assertNotNull(list0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("^B1");
      assertNotNull(rE2_0);
      assertEquals("^B1", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("^B1", (-543));
      assertNull(list0);
      assertEquals("^B1", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("l");
      assertNotNull(rE2_0);
      assertEquals("l", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 466);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("l", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[1];
      boolean boolean0 = rE2_0.match("", 755, 31, 31, intArray0, 31);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("v;A-6`61z{A w");
      assertNotNull(rE2_0);
      assertEquals("v;A-6`61z{A w", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("v;A-6`61z{A w");
      assertArrayEquals(new int[] {0, 13}, intArray0);
      assertNotNull(intArray0);
      assertEquals("v;A-6`61z{A w", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("OzcSTd");
      assertNotNull(rE2_0);
      assertEquals("OzcSTd", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 9);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("OzcSTd", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 2004);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("ORd?_uXJWI\"u~Z?6eo");
      assertNotNull(rE2_0);
      assertEquals("ORd?_uXJWI\"u~Z?6eo", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("ORd?_uXJWI\"u~Z?6eo", 64);
      assertNull(list0);
      assertEquals("ORd?_uXJWI\"u~Z?6eo", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.find("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("v;A-6`61z{A w");
      assertNotNull(rE2_0);
      assertEquals("v;A-6`61z{A w", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("Linear_B", (-4366));
      assertNull(list0);
      assertEquals("v;A-6`61z{A w", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(",T^R");
      assertNotNull(rE2_0);
      assertEquals(",T^R", rE2_0.toString());
      
      String string0 = rE2_0.find(",T^R");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(",T^R", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("anynotn} -> ");
      assertNotNull(rE2_0);
      assertEquals("anynotn} -> ", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("anynotn} -> ", "anynotn} -> ");
      assertEquals("anynotn} -> ", string0);
      assertNotNull(string0);
      assertEquals("anynotn} -> ", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("'$\"A$o{O");
      assertNotNull(rE2_0);
      assertEquals("'$\"A$o{O", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("p9W6", 476);
      assertNull(list0);
      assertEquals("'$\"A$o{O", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-1479));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("anynotnl -> ");
      assertNotNull(rE2_0);
      assertEquals("anynotnl -> ", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("anynotnl -> ", string0);
      assertNotNull(string0);
      assertEquals("anynotnl -> ", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|H");
      assertNotNull(rE2_0);
      assertEquals("|H", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("|H", 16);
      assertNotNull(list0);
      assertEquals("|H", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = new RE2("|U`");
      assertNotNull(rE2_0);
      assertEquals("|U`", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("|U`", "|U`");
      assertEquals("|U`||U`U|U``|U`", string0);
      assertNotNull(string0);
      assertEquals("|U`", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = 62;
      int int1 = rE2_0.cond;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 0, intArray0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = RE2.LITERAL;
      assertEquals(2, int0);
      
      int[] intArray0 = new int[10];
      boolean boolean0 = rE2_0.match("", 2, 2, 2, intArray0, 62);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 62);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = new RE2("s6wl$.^xhBV");
      assertNotNull(rE2_0);
      assertEquals("s6wl$.^xhBV", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals("s6wl$.^xhBV", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|U`");
      assertNotNull(rE2_0);
      assertEquals("|U`", rE2_0.toString());
      
      rE2_0.prefixUTF8 = null;
      assertEquals("|U`", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("|U`", "|U`");
      assertEquals("|U`||U`", string0);
      assertNotNull(string0);
      assertEquals("|U`", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.cond;
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      rE2_0.prefixRune = 0;
      assertEquals("", rE2_0.toString());
      
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-31);
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)44, (byte)44, (byte) (-54), (byte) (-31)}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = rE2_0.match("", 0, 0, 44, (int[]) null, 44);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 44);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }
}
