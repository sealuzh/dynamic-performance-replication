/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:22:17 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      inflater0.end();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      hashingSource0.toString();
      Buffer buffer1 = realBufferedSource0.buffer();
      inflaterSource0.timeout();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      ByteString byteString0 = null;
      segmentedByteString0.rangeEquals((-2848), (ByteString) null, (-2848), 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.decodeHex("");
      segmentedByteString0.rangeEquals((-1939), byteString0, (-2635), 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.rangeEquals((-471), (byte[]) null, 0, (-1939));
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (-2848));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString1.substring((-928), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.equals((Object) null);
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-2351L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(2026);
      buffer0.size = (long) 2026;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2026);
      segmentedByteString0.base64Url();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2026);
      segmentedByteString1.rangeEquals(2026, (byte[]) null, 2026, 2026);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = buffer0.writeLongLe(1);
      buffer0.size = (long) 1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.base64Url();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.rangeEquals(1, (byte[]) null, 1, 1);
      segmentedByteString0.write(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)16;
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, 1, (-1764));
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer0.writeLongLe(1);
      buffer0.size = (long) 1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.endsWith(byteArray0);
      byteArray0[0] = (byte)39;
      segmentedByteString0.rangeEquals((-1273), byteArray0, (-1517), 1944);
      segmentedByteString0.base64Url();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString1.base64();
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 1;
      buffer0.writeLongLe(1);
      buffer0.size = (long) 1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.base64Url();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.hashCode();
      segmentedByteString1.toAsciiLowercase();
      buffer0.writeDecimalLong(0L);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(1, (byte[]) null, 1, (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = buffer0.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      segmentedByteString0.endsWith(byteArray0);
      segmentedByteString0.rangeEquals(31, byteArray0, (int) (byte)20, (-971));
      segmentedByteString0.base64Url();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, (-971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-971
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = buffer0.writeLongLe(51);
      buffer0.size = (long) 51;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 51);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.endsWith(byteArray0);
      byteArray0[0] = (byte)39;
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, (-1273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=51 offset=0 byteCount=-1273
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = buffer0.writeLongLe(1);
      buffer0.size = (long) 1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)39;
      segmentedByteString0.endsWith(byteArray0);
      byteArray0[0] = (byte)39;
      segmentedByteString0.rangeEquals((-1273), byteArray0, (-1517), 1943);
      segmentedByteString0.base64Url();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      ByteString[] byteStringArray0 = new ByteString[13];
      byteStringArray0[0] = (ByteString) segmentedByteString1;
      segmentedByteString0.endsWith(byteArray0);
      ByteString byteString0 = new ByteString((byte[]) null);
      segmentedByteString1.endsWith((ByteString) segmentedByteString0);
      int int0 = 31;
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer1, (byte)39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=39
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = buffer0.writeLongLe((-2351L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      ByteString byteString0 = ByteString.encodeUtf8("vQBZ@T^7c;dQ");
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      MockFile mockFile0 = new MockFile("x#4?K6oS");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      segmentedByteString0.write(mockPrintStream0);
      byteString0.indexOf(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        segmentedByteString0.equals(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      segmentedByteString0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(1L);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-2351L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeLongLe(0L);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer2, 1);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = (ByteString) segmentedByteString1;
      byteStringArray0[1] = (ByteString) segmentedByteString1;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      byteStringArray0[3] = (ByteString) segmentedByteString0;
      byteStringArray0[4] = (ByteString) segmentedByteString1;
      byteStringArray0[5] = (ByteString) segmentedByteString1;
      byteStringArray0[6] = (ByteString) segmentedByteString0;
      byteStringArray0[7] = (ByteString) segmentedByteString1;
      byteStringArray0[8] = (ByteString) segmentedByteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 1);
      assertTrue(segmentedByteString2.equals((Object)segmentedByteString1));
      
      boolean boolean0 = segmentedByteString0.equals(byteStringArray0[0]);
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-2342L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      buffer0.selectPrefix(options0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = segmentedByteString1.rangeEquals(31, byteArray0, (-768), (-768));
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString1.size());
      assertTrue(segmentedByteString1.equals((Object)segmentedByteString0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(38);
      buffer0.size = (long) 38;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 38);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      byteStringArray0[3] = (ByteString) segmentedByteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[5] = (byte)20;
      boolean boolean0 = segmentedByteString0.rangeEquals(0, (ByteString) segmentedByteString0, (int) (byte)0, 38);
      assertEquals(38, segmentedByteString0.size());
      assertTrue(boolean0);
  }
}
