/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:47:02 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.sql.Timestamp;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ,, pos 1, json : , actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      // Undeclared exception!
      try { 
        JSON.parseObject(", property ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLabel");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : applyLabel
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parse((Object) "");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "{c$i~X&rx@y";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{c$i~X&rx@y");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{c$i~X&rx@y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      defaultJSONParser0.checkListResolve((Collection) null);
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.checkListResolve((Collection) null);
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      Object object0 = defaultJSONParser0.getObject("[long");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",`DiO>Oi2v_M5D3");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",`DiO>Oi2v_M5D3");
      defaultJSONParser0.resolveReference(",`DiO>Oi2v_M5D3");
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertEquals(12, mapDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/?1_");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '(';
      charArray0[2] = '5';
      charArray0[3] = 'U';
      charArray0[4] = 'x';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2661));
      String string0 = defaultJSONParser0.getInput();
      assertEquals("x(5Ux", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.getExtraProcessors();
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~A,7F2V(%aqbd~ZV");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~A,7F2V(%aqbd~ZV");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~A,7F2V(%aqbd~ZV");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName com.alibaba.fastjson.parser.DefaultJSONParser@2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLabel");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      HashMap<ChronoLocalDate, Properties> hashMap0 = new HashMap<ChronoLocalDate, Properties>();
      defaultJSONParser0.checkMapResolve(hashMap0, "[long");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/lang/Object;", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m#n/%DwEf*L]ri&");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : m#n/%DwEf*L]ri&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.handleResovleTask("");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      Class<DecimalFormat> class0 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.setDateFormat("?<$~?");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c");
      Feature feature0 = Feature.InternFieldNames;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("G");
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/lang/Object;", parserConfig0);
      HashMap<ChronoLocalDate, Properties> hashMap0 = new HashMap<ChronoLocalDate, Properties>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "(I)Ljava/lang/Object;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S56VHe&G':MO");
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 11, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", xroperty ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , xroperty 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      defaultJSONParser0.getExtraTypeProviders();
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{c$i-~X&rx@y");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{c$i-~X&rx@y");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      HashMap<ChronoLocalDate, Properties> hashMap0 = new HashMap<ChronoLocalDate, Properties>();
      defaultJSONParser0.checkMapResolve(hashMap0, hashMap0);
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~A,7F2V(%aqbd~ZV");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~A,7F2V(%aqbd~ZV");
      Feature feature0 = Feature.SupportAutoType;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[lonc");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "[lonc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [lonc
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ", parserConfig0, 3538);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Feature feature0 = Feature.UseBigDecimal;
      defaultJSONParser1.config(feature0, false);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{4E", parserConfig0);
      Hashtable<RenderingHints.Key, Byte> hashtable0 = new Hashtable<RenderingHints.Key, Byte>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 4pos 1, json : {4E
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.jva.awt.Insets[top=17,left=6,bottom=-1254,right=108].java.awt.BufferCpabilities@1f0ef37");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "$.jva.awt.Insets[top=17,left=6,bottom=-1254,right=108].java.awt.BufferCpabilities@1f0ef37", (Object) "$.jva.awt.Insets[top=17,left=6,bottom=-1254,right=108].java.awt.BufferCpabilities@1f0ef37");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.jva.awt.Insets[top=17,left=6,bottom=-1254,right=108].java.awt.BufferCpabilities@1f0ef37");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getExtraTypeProviders();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5pjvoi5fVUzzT");
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.parse((Object) feature0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 2, json : 5pjvoi5fVUzzT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-3626));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) mapDeserializer0);
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext(parseContext0, (Object) null, (Object) properties0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[long");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-3626));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.close();
      defaultJSONParser0.checkListResolve((Collection) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "(I)Ljava/lang/Object;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (I)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.$");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      defaultJSONParser0.setConfig(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H|+WlQ@\".7e0");
      defaultJSONParser0.setContext((Object) "H|+WlQ@\".7e0", (Object) "H|+WlQ@\".7e0");
      defaultJSONParser0.popContext();
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.setResolveStatus((-1113));
      assertEquals((-1113), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Na");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("oEz0JB$8g");
      // Undeclared exception!
      try { 
        JSON.parseObject("Na");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : Na
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/lang/Object;", parserConfig0);
      int int0 = 6;
      MockDate mockDate0 = new MockDate(69, 6, 2);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(defaultJSONParser_ResolveTask0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~A,7F2V(%aqbd~ZV");
      defaultJSONParser0.getDateFormat();
      HashMap<ChronoLocalDate, Properties> hashMap0 = new LinkedHashMap<ChronoLocalDate, Properties>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) imageCapabilities0, (Object) imageCapabilities0);
      imageCapabilities0.clone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 1003);
      HashMap<ChronoLocalDate, Properties> hashMap1 = new HashMap<ChronoLocalDate, Properties>();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "~A,7F2V(%aqbd~ZV");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask(hashMap1);
      defaultJSONParser0.setResolveStatus(1003);
      assertEquals(1003, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6Dm( arui]*9hk:");
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 3, json : 6Dm( arui]*9hk:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "[long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~A,7F2V(%aqbd~ZV");
      defaultJSONParser0.getDateFormat();
      LinkedHashMap<ChronoLocalDate, Properties> linkedHashMap0 = new LinkedHashMap<ChronoLocalDate, Properties>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) imageCapabilities0, (Object) imageCapabilities0);
      imageCapabilities0.clone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 1003);
      HashMap<ChronoLocalDate, Properties> hashMap0 = new HashMap<ChronoLocalDate, Properties>();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "~A,7F2V(%aqbd~ZV");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      defaultJSONParser_ResolveTask0.ownerContext = parseContext1;
      defaultJSONParser0.handleResovleTask(hashMap0);
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      defaultJSONParser0.setResolveStatus(1003);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) defaultJSONParser_ResolveTask0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ~A,7F2V(%aqbd~ZV
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{c$i~X&rx@y");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{c$i~X&rx@y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{c$i~X&rx@y");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{c$i~X&rx@y");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 11, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",I)Ljava/lan}WObject!");
      Dimension dimension0 = new Dimension(0, 0);
      defaultJSONParser0.setContext((Object) ",I)Ljava/lan}WObject!", (Object) dimension0);
      Object object0 = defaultJSONParser0.getObject(",I)Ljava/lan}WObject!");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("NaN");
      defaultJSONParser1.parse((Object) "NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("?<$~?");
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("?<$~?");
      defaultJSONParser2.accept(1, 0);
      assertNotSame(defaultJSONParser2, defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getContext();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      LinkedHashMap<Insets, DecimalFormat> linkedHashMap0 = new LinkedHashMap<Insets, DecimalFormat>();
      Locale locale0 = Locale.CHINA;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~A,7F2V(%&aqbd]ZV");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Properties properties0 = new Properties();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("]+", parserConfig0);
      defaultJSONParser0.accept(1);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~A,7F2V(%aqbd~ZV");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      DateFormat dateFormat1 = defaultJSONParser0.getDateFormat();
      assertSame(dateFormat1, dateFormat0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".nPYj$vTTop");
      defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "){iUVT<Yi7#+f O71AY";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("){iUVT<Yi7#+f O71AY");
      defaultJSONParser0.checkListResolve((Collection) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ){iUVT<Yi7#+f O71AY
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("c");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", fieldName ", parserConfig0);
      Hashtable<RenderingHints.Key, Byte> hashtable0 = new Hashtable<RenderingHints.Key, Byte>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 12, json : , fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Na");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "Na", (Object) "Na");
      parseContext0.toString();
      defaultJSONParser0.resolveReference("$");
      List<ExtraTypeProvider> list0 = new Stack<ExtraTypeProvider>();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "$", (Object) parserConfig0);
      parseContext0.toString();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraProcessors();
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[long");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long", parserConfig0, 59);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", treeMap0);
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..", parserConfig0, 2075);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) "..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ", parserConfig0, 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = '.';
      charArray0[4] = '4';
      charArray0[5] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "null,";
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Float> class0 = Float.TYPE;
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      parserConfig0.putDeserializer(class0, jSONPDeserializer0);
      parserConfig0.addDeny("null,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null,", parserConfig0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      defaultJSONParser0.parseObject((Type) class0, (Object) parameterizedTypeImpl0);
      parserConfig0.setAsmEnable(true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<ChronoLocalDate, Properties> hashMap0 = new HashMap<ChronoLocalDate, Properties>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[long", 13);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "[long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long", parserConfig0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}$Kf;zi");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Kf;zi");
      // Undeclared exception!
      try { 
        JSON.parseObject("}$Kf;zi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }$Kf;zi
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long");
      Type[] typeArray0 = new Type[8];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Object object0 = new Object();
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ", parserConfig0, 15);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      Byte byte0 = new Byte((byte)39);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.Byte, property pos
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",`DiO>Oi2v_M5D3");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]6O0}-N", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]6O0}-N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9)Ljava/lan}W/bjet!");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : ,9)Ljava/lan}W/bjet!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";B{7Jez]{UzFf>");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;B{7Jez]{UzFf>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..", parserConfig0, 2075);
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }
}
