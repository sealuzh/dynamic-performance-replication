/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:53:32 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.function.ToDoubleFunction;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      boolean boolean0 = linkedHashTreeMap0.containsKey((Object) null);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      int int0 = linkedHashTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer(1498);
      linkedHashTreeMap0.remove((Object) integer0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_Node0.setValue("lS;\"`f@3|_k+Yw,");
      linkedHashTreeMap_Node0.toString();
      String string0 = linkedHashTreeMap_Node0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Integer>();
      linkedHashTreeMap_Node0.next = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.add((LinkedHashTreeMap.Node<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, (-94), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Object object0 = new Object();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(object0);
      assertEquals((-1), linkedHashTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      String string0 = linkedHashTreeMap_Node2.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node1, linkedHashTreeMap_AvlBuilder0, 1, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlBuilder0.root();
      assertFalse(linkedHashTreeMap_Node4.equals((Object)linkedHashTreeMap_Node2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      int int0 = linkedHashTreeMap0.size();
      assertEquals(0, int0);
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_KeySet0);
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap0);
      boolean boolean1 = linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap_EntrySet0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.contains("5kzS]'<?");
      linkedHashTreeMap_KeySet0.clear();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_AvlIterator0.next();
      Integer integer0 = new Integer((-834));
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      Integer integer1 = new Integer((-834));
      Integer.sum(1541, 3570);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge(integer0, "", biFunction0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      predicate0.test("key == null");
      Predicate<Object> predicate1 = predicate0.negate();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Predicate<Object> predicate2 = predicate1.negate();
      linkedHashTreeMap_KeySet0.removeIf(predicate2);
      Object object0 = new Object();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1555).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge("PWJRH%r/Tv", "PWJRH%r/Tv", biFunction0);
      linkedHashTreeMap0.keySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.retainAll(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap_EntrySet1.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap1.new EntrySet();
      assertTrue(linkedHashTreeMap_EntrySet2.equals((Object)linkedHashTreeMap_EntrySet1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 7);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_NodeArray0[0], "key == null", 0, linkedHashTreeMap_NodeArray0[1], linkedHashTreeMap_Node0);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node3.first();
      linkedHashTreeMap_NodeArray0[6] = linkedHashTreeMap_Node5;
      Map.Entry.comparingByValue();
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap0.remove((Object) "", (Object) "");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.parallelStream();
      boolean boolean0 = linkedHashTreeMap_KeySet0.remove("JG$78|2R 87ffAh");
      assertEquals((-1), linkedHashTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) null, linkedHashTreeMap_KeySet0);
      linkedHashTreeMap0.size = (-1939);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node0, abstractMap_SimpleImmutableEntry0, 4, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node2, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 7);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "key == null", 2373, linkedHashTreeMap_NodeArray0[1], linkedHashTreeMap_Node1);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node6;
      Map.Entry.comparingByValue();
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      String string0 = "";
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.parallelStream();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.remove("J<G$78|2R 87ffAXh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 6);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingDouble((ToDoubleFunction<? super Integer>) toDoubleFunction0);
      LinkedHashTreeMap.Node<Object, Integer>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Integer>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-1478));
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.root();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.keySet();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge("^vi", "^vi", biFunction0);
      linkedHashTreeMap0.threshold = 31;
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-377), (-377)).when(comparator0).compare(anyString() , anyString());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 7);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "key == null", 2373, linkedHashTreeMap_NodeArray0[1], linkedHashTreeMap_Node1);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node3;
      linkedHashTreeMap_Node3.parent = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node4;
      linkedHashTreeMap_Node4.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node5;
      linkedHashTreeMap_Node4.first();
      Map.Entry.comparingByValue();
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap0.remove((Object) "key == null", (Object) "key == null");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.parallelStream();
      linkedHashTreeMap_KeySet0.remove("J<G$78|2R 87ffAXh");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>(comparator1);
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains("J<G$78|2R 87ffAXh");
      try { 
        Integer.parseUnsignedInt("key == null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"key == null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      Integer integer0 = new Integer((-1499));
      Integer integer1 = new Integer((-1499));
      Map.Entry.comparingByValue();
      Integer integer2 = new Integer((-1499));
      Integer.remainderUnsigned((-1499), 14);
      Object object0 = new Object();
      Integer.divideUnsigned(1981, (-1499));
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node2);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("4jp7SS", object0);
      Object object1 = new Object();
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.containsValue(linkedHashTreeMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Object, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0, 1489, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Integer>[]) linkedHashTreeMap_NodeArray0);
      linkedHashTreeMap_KeySet0.spliterator();
      linkedList0.sort(comparator1);
      linkedHashTreeMap_KeySet0.containsAll(linkedList0);
      linkedHashTreeMap_KeySet0.clear();
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-177));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, String>();
      linkedHashTreeMap_Node4.last();
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_NodeArray0[1]);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Integer>();
      linkedHashTreeMap2.size();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap3.findByEntry(linkedHashTreeMap_Node0);
      assertNull(linkedHashTreeMap_Node5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.height = 2;
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap1.keySet();
      Integer integer0 = new Integer((-649));
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>();
      Integer integer1 = linkedHashTreeMap_Node2.key;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node1, "P", 43, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      // Undeclared exception!
      linkedHashTreeMap_Node0.left.first();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replaceAll(biFunction0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.removeInternalByKey("[@{/qVMKSdS<*D");
      assertNull(linkedHashTreeMap_Node0);
      
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)linkedHashTreeMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_Node0, object0);
      boolean boolean0 = linkedHashTreeMap_Node1.equals(abstractMap_SimpleEntry0);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean1 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>(linkedHashTreeMap_Node1, "wX%4K", (-2062), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node2;
      linkedHashTreeMap_Node2.equals(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      LinkedHashTreeMap.AvlBuilder<Object, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Set<Object> set0 = linkedHashTreeMap1.keySet();
      assertNotNull(set0);
      
      linkedHashTreeMap_AvlBuilder0.reset((-1));
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer((-4045));
      Integer integer1 = new Integer((-1048));
      linkedHashTreeMap_Node1.setValue(integer0);
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.merge((Integer) null, "", biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node0.last();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      Set<Integer> set0 = linkedHashTreeMap0.keySet();
      Integer integer0 = new Integer((-649));
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = linkedHashTreeMap0.merge(integer0, integer0, biFunction0);
      Integer integer1 = new Integer((-649));
      Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      linkedHashTreeMap0.merge((Integer) object0, linkedHashTreeMap_Node1, biFunction1);
      Integer.valueOf((-649));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) set0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(comparator1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.negate();
      predicate4.test(set0);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate2.or(predicate5);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.removeIf(predicate3);
      linkedHashTreeMap_Node0.equals(object0);
      Object object1 = new Object();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add(object2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>();
      Integer integer0 = new Integer(0);
      linkedHashTreeMap1.put("", integer0);
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.computeIfPresent("u9U.", biFunction0);
      linkedHashTreeMap1.forEach(biConsumer0);
      linkedHashTreeMap1.get(linkedHashTreeMap0);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      linkedHashTreeMap_AvlBuilder0.reset((-2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge("PWJRH%r/Tv", "PWJRH%r/Tv", biFunction0);
      linkedHashTreeMap0.keySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.retainAll(linkedHashTreeMap_EntrySet0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap0.new EntrySet();
      Integer integer0 = new Integer(882);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_EntrySet0.add(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      linkedHashTreeMap_EntrySet0.parallelStream();
      linkedHashTreeMap0.modCount = 374;
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node2, linkedHashTreeMap_EntrySet0, (-45), linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node5;
      Integer integer0 = new Integer((-45));
      linkedHashTreeMap_Node2.left = linkedHashTreeMap_Node2;
      linkedHashTreeMap_Node3.value = integer0;
      linkedHashTreeMap_EntrySet0.clear();
      linkedHashTreeMap_Node0.value = linkedHashTreeMap_Node3.value;
      linkedHashTreeMap1.values();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node3, false);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find(linkedHashTreeMap_EntrySet0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$EntrySet is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      linkedHashTreeMap_EntrySet0.parallelStream();
      linkedHashTreeMap0.modCount = 374;
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node2, linkedHashTreeMap_EntrySet0, (-45), linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node5;
      Integer integer0 = new Integer((-45));
      linkedHashTreeMap_Node2.left = linkedHashTreeMap_Node5;
      linkedHashTreeMap_Node3.value = integer0;
      linkedHashTreeMap_EntrySet0.clear();
      linkedHashTreeMap_Node0.value = linkedHashTreeMap_Node3.value;
      linkedHashTreeMap1.values();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node3, false);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find(linkedHashTreeMap_EntrySet0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$EntrySet is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      linkedHashTreeMap_EntrySet0.parallelStream();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      linkedHashTreeMap1.threshold = 0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(374);
      Integer integer1 = new Integer(0);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node2;
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node1, false);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 20);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node3;
      linkedHashTreeMap_Node0.toString();
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Object>[]) linkedHashTreeMap_NodeArray0);
      Object object0 = new Object();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = null;
      try {
        linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node5, "c(n>-)8e|[vj8=%]J", 528, (LinkedHashTreeMap.Node<Object, Object>) null, linkedHashTreeMap_Node5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      Integer integer0 = new Integer((-1499));
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.isEmpty();
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer((-1499));
      Integer.remainderUnsigned((-1499), 14);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      Object object0 = new Object();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap2.new EntrySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("4jp7SS", true);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("4jp7SS", object0);
      linkedHashTreeMap0.find("4jp7SS", true);
      linkedHashTreeMap1.entrySet();
      Object object1 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object1, linkedHashTreeMap_Node1);
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-26);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.isEmpty();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("com.google.gson.internal.LinkedHashTreeMap", true);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(linkedHashTreeMap_Node1);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node1, "com.google.gson.internal.LinkedHashTreeMap", 338, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap0.putIfAbsent("com.google.gson.internal.LinkedHashTreeMap", linkedHashTreeMap_KeySet0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = linkedHashTreeMap1.table;
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>();
      linkedHashTreeMap_Node3.setValue("l3Z)4,2G>183Nd/");
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_Node0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
      linkedHashTreeMap_Node0.equals(abstractMap_SimpleEntry0);
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node0.last();
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 20);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node3;
      linkedHashTreeMap_NodeArray0[10] = linkedHashTreeMap_Node3;
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Object>[]) linkedHashTreeMap_NodeArray0);
      Map.Entry.comparingByValue();
      Object object0 = new Object();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node5);
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node2);
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator2 = new LinkedHashTreeMap.AvlIterator<String, String>();
      Integer integer0 = new Integer((-454));
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node6.first();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node6.last();
      assertSame(linkedHashTreeMap_Node8, linkedHashTreeMap_Node7);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      Stream<Map.Entry<String, Integer>> stream0 = (Stream<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.parallelStream();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      linkedHashTreeMap1.threshold = 0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(0);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      Object object0 = new Object();
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = linkedHashTreeMap1.merge(object0, integer0, biFunction0);
      linkedHashTreeMap0.find(linkedHashTreeMap_Node0, false);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node3;
      Integer integer2 = new Integer((-4));
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer2).when(biFunction1).apply(any() , anyInt());
      linkedHashTreeMap1.compute((Object) null, biFunction1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node2;
      BiFunction<Object, Integer, Integer> biFunction2 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(biFunction2).apply(any() , anyInt());
      linkedHashTreeMap1.replaceAll(biFunction2);
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node2;
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node1, false);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      Integer integer3 = new Integer(851);
      BiFunction<Object, Object, Integer> biFunction3 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge(stream0, integer3, biFunction3);
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap2.clear();
      assertEquals(0, linkedHashTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Object>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.isEmpty();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap0.find("", true);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node2, "", 1555, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      linkedHashTreeMap0.putIfAbsent("", linkedHashTreeMap_KeySet0);
      linkedHashTreeMap0.find("", true);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_KeySet0.remove((Object) null);
      LinkedHashTreeMap.AvlIterator<Integer, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<Integer, String>();
      linkedHashTreeMap_AvlIterator1.next();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.merge("", (Object) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      linkedHashTreeMap0.isEmpty();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Object object0 = new Object();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node2);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("4jp7SS", object0);
      linkedHashTreeMap0.entrySet();
      Object object1 = new Object();
      linkedHashTreeMap0.find("4jp7SS", true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet1.remove(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.keySet();
      Integer integer0 = new Integer((-1499));
      Integer integer1 = new Integer((-1499));
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      linkedHashTreeMap1.isEmpty();
      Map.Entry.comparingByValue();
      Integer integer2 = new Integer((-1499));
      Integer.remainderUnsigned((-1499), 14);
      linkedHashTreeMap1.remove((Object) integer2, (Object) linkedHashTreeMap_Node1);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      Object object0 = new Object();
      Integer.divideUnsigned(1981, (-1499));
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap2.new EntrySet();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap0.find("4jp7SS", true);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("4jp7SS", object0);
      linkedHashTreeMap0.find("4jp7SS", true);
      linkedHashTreeMap1.entrySet();
      Object object1 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object1, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node2.value = (Object) abstractMap_SimpleImmutableEntry1;
      linkedHashTreeMap1.find("4jp7SS", false);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet1.remove(linkedHashTreeMap_Node4);
      assertEquals(1, linkedHashTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      Stream<Map.Entry<String, Integer>> stream0 = (Stream<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.parallelStream();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(374);
      Integer integer1 = new Integer(12);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap_Node2.parent = linkedHashTreeMap_Node1;
      Object object0 = new Object();
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = linkedHashTreeMap1.merge(object0, integer1, biFunction0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node4;
      Integer integer3 = new Integer(374);
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer3).when(biFunction1).apply(any() , anyInt());
      linkedHashTreeMap1.compute(linkedHashTreeMap_Node3, biFunction1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node2;
      BiFunction<Object, Integer, Integer> biFunction2 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer2).when(biFunction2).apply(any() , anyInt());
      linkedHashTreeMap1.replaceAll(biFunction2);
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node2;
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node1, false);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      Integer integer4 = new Integer(851);
      BiFunction<Object, Object, Integer> biFunction3 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge(stream0, integer4, biFunction3);
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      assertFalse(linkedHashTreeMap_AvlBuilder1.equals((Object)linkedHashTreeMap_AvlBuilder0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      linkedHashTreeMap_Node0.value = "7 B?\"6*";
      linkedHashTreeMap_AvlIterator0.next();
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      Integer.toUnsignedLong(1);
      Integer.sum(1, 3570);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge(integer0, "7 B?\"6*", biFunction0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      predicate0.test("key == null");
      Predicate<Object> predicate1 = predicate0.negate();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Predicate<Object> predicate2 = predicate1.negate();
      linkedHashTreeMap_KeySet0.removeIf(predicate2);
      Object object0 = new Object();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 1555, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap1.size = 2769;
      linkedHashTreeMap_Node2.last();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      Integer.valueOf(2769);
      Integer integer1 = new Integer(1);
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge("7 B?\"6*", integer1, biFunction1);
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      linkedHashTreeMap_EntrySet0.parallelStream();
      linkedHashTreeMap1.threshold = 0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(0);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap_Node2.parent = linkedHashTreeMap_Node1;
      Object object0 = new Object();
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.find(linkedHashTreeMap1, false);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node3;
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node2;
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.replaceAll(biFunction1);
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node2.parent;
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node1, false);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-26);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.isEmpty();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("com.google.gson.internal.LinkedHashTreeMap", true);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(linkedHashTreeMap_Node1);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node1, "com.google.gson.internal.LinkedHashTreeMap", 338, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap0.putIfAbsent("com.google.gson.internal.LinkedHashTreeMap", linkedHashTreeMap_KeySet0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap0.find("com.google.gson.internal.LinkedHashTreeMap", true);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node4.equals(linkedHashTreeMap_Node3);
      String string0 = "";
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      boolean boolean0 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node0);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Integer integer0 = new Integer(763);
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      Integer integer1 = new Integer(763);
      Integer.sum((-1047), 794);
      Object object1 = new Object();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      linkedHashTreeMap_AvlBuilder1.reset(763);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder2 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node1);
      Object object2 = new Object();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap.AvlIterator<Integer, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Integer, Object>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap4 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder3 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      linkedHashTreeMap_AvlBuilder2.add(linkedHashTreeMap_Node5);
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node5);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap5.new KeySet();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap6 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap4);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap3.new KeySet();
      linkedHashTreeMap4.entrySet();
      assertEquals(0, linkedHashTreeMap4.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.isEmpty();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      linkedHashTreeMap1.keySet();
      int int0 = 1981;
      Integer integer0 = new Integer(1981);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("com.google.gson.internal.LinkedHashTreeMap", true);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(linkedHashTreeMap_Node1);
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node1, "com.google.gson.internal.LinkedHashTreeMap", (-26), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap0.putIfAbsent("com.google.gson.internal.LinkedHashTreeMap", linkedHashTreeMap_KeySet0);
      linkedHashTreeMap0.find("com.google.gson.internal.LinkedHashTreeMap", true);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      Object object0 = new Object();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }
}
