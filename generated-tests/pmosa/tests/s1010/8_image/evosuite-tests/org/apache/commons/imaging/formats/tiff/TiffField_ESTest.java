/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:01:34 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)19, (byte)19, fieldTypeFloat0, (byte)19, (byte)19, byteArray0, byteOrder0, (byte)19);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(19L, tiffElement0.offset);
      assertEquals(19, tiffField0.getTag());
      assertEquals(19, tiffField0.getSortHint());
      assertEquals(19, tiffField0.getDirectoryType());
      assertNotNull(tiffElement0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-69);
      byte byte0 = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1081, 1081, fieldTypeByte0, 1L, 1L, byteArray0, byteOrder0, (byte)1);
      String string0 = "e,U=";
      MockFile mockFile0 = new MockFile("e,U=", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): 1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(10, 10, fieldTypeRational0, 10, 10, byteArray0, byteOrder0, 10);
      tiffField0.getIntArrayValue();
      assertEquals(80, tiffField0.getBytesLength());
      assertEquals(10, tiffField0.getSortHint());
      assertEquals(10, tiffField0.getOffset());
      assertEquals(10L, tiffField0.getCount());
      assertEquals(10, tiffField0.getTag());
      assertEquals(10, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2655, 2655, fieldTypeRational0, 2655, 2655, byteArray0, byteOrder0, 59933);
      tiffField0.getFieldType();
      tiffField0.getFieldType();
      tiffField0.getFieldType();
      tiffField0.getIntArrayValue();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Lorg.apache.commons.imaging.common.RationalNumber;@736feb5f
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeFloat0, 11, 11, byteArray0, byteOrder0, 11);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "0.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(2848, "L{/E");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = 1;
      TiffField tiffField0 = new TiffField((-3167), 2848, fieldTypeAscii0, 206L, 206L, (byte[]) null, byteOrder0, 1);
      tiffField0.isLocalValue();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-3167), (-3167));
      tiffField_OversizeValueElement0.getElementDescription();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      tiffField_OversizeValueElement0.getElementDescription(true);
      tiffField0.getByteOrder();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1), (-1), fieldTypeFloat0, (-1), (-1), byteArray0, byteOrder0, (-1));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-1), (-1));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getTag());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Float", string0);
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)62;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (-2099), fieldTypeRational0, 0L, 0L, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getTagName();
      assertEquals("GPSVersionID", string0);
      
      tiffField0.dump();
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-2099), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational((-2147029537), "BlackLevelDeltaV");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)125;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-2147029537), (-2147029537), fieldTypeRational0, 4L, (-2147029537), byteArray0, byteOrder0, (byte)125);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals((-2147029537), tiffField0.getOffset());
      assertEquals(125, tiffField0.getSortHint());
      assertEquals(32, tiffField0.getBytesLength());
      assertEquals((-2147029537), tiffField0.getTag());
      assertEquals(0, int1);
      assertEquals((-2147029537), tiffField0.getDirectoryType());
      assertEquals(4L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(835, "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-114);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1551, 835, fieldTypeAscii0, 1551, (-1087L), byteArray0, byteOrder0, (byte)15);
      fieldTypeAscii0.getValue(tiffField0);
      assertEquals(835, tiffField0.getDirectoryType());
      assertEquals(1551L, tiffField0.getCount());
      assertEquals(1551, tiffField0.getBytesLength());
      assertEquals(15, tiffField0.getSortHint());
      assertEquals(1551, tiffField0.getTag());
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)55;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField1 = new TiffField(1551, 1551, fieldTypeAscii0, 0L, (-1033L), byteArray1, byteOrder1, 0);
      tiffField1.toString();
      String string0 = tiffField1.getDescriptionWithoutValue();
      assertEquals("1551 (0x60f: Unknown Tag): ", string0);
      
      tiffField1.getByteArrayValue();
      assertEquals((-1033), tiffField1.getOffset());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-41);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1695), 1342, fieldTypeLong0, 1941, 0L, byteArray0, byteOrder0, 0);
      fieldTypeLong0.getValue(tiffField0);
      ByteOrder.nativeOrder();
      TiffField tiffField1 = new TiffField(1941, 1941, fieldTypeLong0, 1941, 1941, byteArray0, byteOrder0, 1882);
      tiffField1.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField1.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte) (-63);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("*i@");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(1253, 50, fieldTypeShort0, (byte)18, (-2362), byteArray0, byteOrder0, (-2362));
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeShort0, 3694L, 0, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getSortHint();
      assertEquals(0, tiffField0.getTag());
      assertEquals(7388, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, int0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(3694L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)0, 751, fieldTypeLong0, 4L, (-1012L), byteArray0, byteOrder0, 50);
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x0)", string0);
      
      tiffField0.dump();
      tiffField0.getIntValueOrArraySum();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(4L, tiffField0.getCount());
      assertEquals((-1012), tiffField0.getOffset());
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(751, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField((byte)79, (-1655), fieldTypeShort0, (byte)79, (-1L), byteArray0, byteOrder0, (-121));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(79, tiffField0.getTag());
      assertEquals(158, tiffField0.getBytesLength());
      assertEquals(79L, tiffField0.getCount());
      assertEquals((-1655), tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-121), tiffField0.getSortHint());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(96, "");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-46);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, (-1687), fieldTypeShort0, 206L, (-1695L), byteArray0, byteOrder0, 1);
      tiffField0.getIntValueOrArraySum();
      MockFile mockFile0 = new MockFile("XYMI`VP^dAy", "The list of suffixes must not be null");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(744, 744, fieldTypeFloat0.LONG, 744, 34224L, byteArray0, byteOrder0, (-2693));
      tiffField0.getIntArrayValue();
      assertEquals(744, tiffField0.getDirectoryType());
      assertEquals(744, tiffField0.getTag());
      assertEquals(744L, tiffField0.getCount());
      assertEquals(34224, tiffField0.getOffset());
      assertEquals((-2693), tiffField0.getSortHint());
      assertEquals(2976, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[4] = (byte)0;
      Short short0 = new Short((byte)45);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      fieldTypeShort0.writeData(short0, byteOrder0);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2, 131, fieldTypeShort0, (byte)18, 131, byteArray0, byteOrder1, (byte)0);
      Object object0 = new Object();
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("2 (0x2: Unknown Tag): ", string0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(131, tiffField0.getOffset());
      assertEquals(18L, tiffField0.getCount());
      assertArrayEquals(new int[] {4621, 3992, 0, 0}, intArray0);
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(131, tiffField0.getDirectoryType());
      assertEquals(36, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)2;
      TiffField tiffField0 = new TiffField(34, (-2355), fieldTypeByte0, 0L, 34, byteArray0, byteOrder0, 2323);
      tiffField0.getValue();
      tiffField0.getDescriptionWithoutValue();
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@4c432e75 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)19, (byte)19, fieldTypeFloat0, (byte)19, (byte)19, byteArray0, byteOrder0, (byte)19);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField((byte)0, 2136904910, fieldTypeLong0, (-1483L), (-1483L), byteArray0, byteOrder0, (-2355));
      assertEquals((-1483L), tiffField0.getCount());
      assertEquals((-5932), tiffField0.getBytesLength());
      
      TiffField tiffField1 = new TiffField(50, 2136904910, fieldTypeLong0, (byte)0, (-250L), byteArray0, byteOrder0, (-2106965087));
      tiffField1.getDoubleArrayValue();
      assertEquals((-2106965087), tiffField1.getSortHint());
      assertEquals(50, tiffField1.getTag());
      assertEquals((-250), tiffField1.getOffset());
      assertEquals(2136904910, tiffField1.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(323, 17, fieldTypeLong0, 3712L, 3712L, byteArray0, byteOrder0, 17);
      tiffField0.getDoubleArrayValue();
      assertEquals(3712, tiffField0.getOffset());
      assertEquals(14848, tiffField0.getBytesLength());
      assertEquals(17, tiffField0.getDirectoryType());
      assertEquals(3712L, tiffField0.getCount());
      assertEquals(323, tiffField0.getTag());
      assertEquals(17, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)50;
      byteArray0[0] = (byte) (-45);
      byteArray0[5] = (byte)62;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)50, 29, fieldTypeRational0, (byte)62, (-1L), byteArray0, byteOrder1, 709);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      tiffField0.getDoubleArrayValue();
      tiffField0.getFieldType();
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(62L, tiffField0.getCount());
      assertEquals(709, tiffField0.getSortHint());
      assertEquals(29, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getTag());
      assertEquals(496, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)19, (byte)19, fieldTypeFloat0, (byte)19, 2267L, byteArray0, byteOrder1, (byte)19);
      TiffField tiffField1 = new TiffField(49, 62, fieldTypeFloat0, (byte)19, (-72L), byteArray0, byteOrder0, (byte)19);
      tiffField1.getDoubleArrayValue();
      assertEquals(19, tiffField1.getSortHint());
      assertEquals(62, tiffField1.getDirectoryType());
      assertEquals(49, tiffField1.getTag());
      
      tiffField0.dump();
      assertEquals(76, tiffField0.getBytesLength());
      assertEquals(2267, tiffField0.getOffset());
      assertEquals(19L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(29, 0, fieldTypeFloat0, 709, (-1659L), byteArray0, byteOrder1, 2136904910);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      tiffField0.getDoubleArrayValue();
      TiffField tiffField1 = new TiffField((-1385), 264, (FieldType) null, (-1L), 255L, byteArray0, byteOrder0, (byte)19);
      tiffField1.getFieldType();
      assertEquals(264, tiffField1.getDirectoryType());
      
      tiffField0.getFieldTypeName();
      assertEquals(709L, tiffField0.getCount());
      assertEquals(29, tiffField0.getTag());
      assertEquals((-1659), tiffField0.getOffset());
      assertEquals(2136904910, tiffField0.getSortHint());
      assertEquals(2836, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(751, 3, fieldTypeByte0, 50, (byte)0, byteArray0, byteOrder0, (-2122));
      tiffField0.getTagName();
      tiffField0.dump();
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@1c98b728 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte1 = new FieldTypeByte((byte) (-106), "m");
      TiffField tiffField0 = new TiffField(2147164698, (byte) (-106), fieldTypeByte1, 2267L, (-786L), byteArray0, byteOrder0, 1);
      TiffField tiffField1 = new TiffField(62, 62, fieldTypeByte1, 1718L, (-2355), byteArray0, byteOrder0, 1);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@1c99f10f for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-2147029537), "[mcl");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      TiffField tiffField0 = new TiffField((-2147029537), (-2147029537), fieldTypeDouble0, 2904L, (-2147029537), byteArray0, byteOrder0, 50);
      tiffField0.getDoubleArrayValue();
      tiffField0.dump();
      assertEquals(23232, tiffField0.getBytesLength());
      assertEquals((-2147029537), tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-2147029537), tiffField0.getTag());
      assertEquals((-2147029537), tiffField0.getDirectoryType());
      assertEquals(2904L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1475), 50, fieldTypeByte0, 1L, (-3), byteArray0, byteOrder0, 2);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(50, int0);
      assertEquals(2, tiffField0.getSortHint());
      assertEquals((-3), tiffField0.getOffset());
      assertEquals((-1475), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-2147029537), (-2139062142), fieldTypeFloat0, 1079, (-2147029537), byteArray0, byteOrder0, (-2139062142));
      tiffField0.getSortHint();
      TiffField tiffField1 = new TiffField((-2147029537), 65535, fieldTypeLong0, (-1L), 65535, byteArray0, byteOrder0, 3);
      FieldTypeFloat fieldTypeFloat1 = new FieldTypeFloat((-1981), "iXynI\"?K yfN%oR)");
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)17;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)17, (byte)17, fieldTypeFloat0, (byte)17, (byte)19, byteArray0, byteOrder0, (byte)17);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)17;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)17, 2146725623, fieldTypeLong0, 960L, (byte)17, byteArray0, byteOrder0, (byte)17);
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x11)", string0);
      
      TiffField tiffField1 = new TiffField((byte)17, 1094, fieldTypeLong0, (-48L), 1094, byteArray0, byteOrder0, 1765);
      assertEquals(1765, tiffField1.getSortHint());
      assertEquals(17, tiffField1.getTag());
      
      String string1 = tiffField0.getValueDescription();
      assertEquals(17, tiffField0.getOffset());
      assertEquals(2146725623, tiffField0.getDirectoryType());
      assertEquals(3840, tiffField0.getBytesLength());
      assertNotNull(string1);
      assertEquals(960L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte) (-8);
      TiffField tiffField0 = new TiffField(2, 0, fieldTypeRational0, 50, 0L, byteArray0, byteOrder0, 2142825332);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertArrayEquals(new double[] {6.768804454907781}, doubleArray0, 0.01);
      
      tiffField0.dump();
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals(2142825332, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(113, "RmQM\"T&@qkt");
      TiffField tiffField0 = new TiffField(4, 272, fieldTypeShort0, 1072L, 1984L, byteArray0, byteOrder0, 104);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(1984, tiffField0.getOffset());
      assertArrayEquals(new double[] {14392.0}, doubleArray0, 0.01);
      assertEquals(2144, tiffField0.getBytesLength());
      assertEquals(4, tiffField0.getTag());
      assertEquals(272, tiffField0.getDirectoryType());
      assertEquals(1072L, tiffField0.getCount());
      assertEquals(104, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(15, 50, fieldTypeAscii0, (byte)19, 15, byteArray0, byteOrder0, 50);
      TiffField tiffField1 = new TiffField((byte)19, 1655, fieldTypeFloat0, (byte)19, 50, byteArray0, byteOrder0, (byte)19);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1kE]7");
      tiffField0.dump((PrintWriter) mockPrintWriter0, "nDe[qK:RboO%");
      tiffField1.dump();
      assertEquals(1655, tiffField1.getDirectoryType());
      assertEquals(76, tiffField1.getBytesLength());
      assertEquals(19, tiffField1.getSortHint());
      
      String string0 = tiffField0.getStringValue();
      assertNotNull(string0);
      
      int int0 = tiffField0.getSortHint();
      assertEquals(50, int0);
      assertEquals(15, tiffField0.getTag());
      assertEquals(15, tiffField0.getOffset());
      assertEquals(19L, tiffField0.getCount());
  }
}
