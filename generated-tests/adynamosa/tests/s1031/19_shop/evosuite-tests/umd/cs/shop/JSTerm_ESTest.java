/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 01:57:33 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader(".");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(", ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isConstant();
      jSSubstitution0.removeAll(jSTerm1);
      jSTerm1.standardizerTerm();
      String string0 = "(^$H>=";
      StringReader stringReader0 = new StringReader("(^$H>=");
      StringReader stringReader1 = new StringReader(", ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(", ");
      jSSubstitution0.removeAll(jSTerm0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.plus = (-3);
      StringReader stringReader2 = new StringReader(", ");
      StringReader stringReader3 = new StringReader("(xHAj\"=");
      StringReader stringReader4 = new StringReader(", ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      jSTerm0.cloneT();
      JSJshopVars.backquote = (-1225);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis((-2L));
      streamTokenizer0.lowerCaseMode(true);
      jSTerm1.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isConstant();
      jSTerm0.toStr();
      StringReader stringReader1 = new StringReader("bhP&8p[[$}");
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      StringReader stringReader2 = new StringReader(">");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.print();
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      StringReader stringReader3 = new StringReader("elements");
      StringReader stringReader4 = new StringReader("elements");
      jSTerm2.listIterator();
      jSTerm1.removeAllElements();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.parallelStream();
      StringReader stringReader5 = new StringReader("");
      jSTerm1.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis(0L);
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.isEval();
      jSTerm2.isVariable();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.trimToSize();
      streamTokenizer0.ordinaryChar(4126);
      jSTerm0.toStr();
      jSTerm0.isEval();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      streamTokenizer0.ordinaryChars((-994), (-994));
      jSTerm1.makeEval(true);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm5.matches(jSTerm4);
      jSTerm0.cloneT();
      jSTerm4.cloneT();
      JSTerm jSTerm6 = jSTerm1.call();
      assertTrue(jSTerm1.isEval());
      
      jSTerm6.call();
      jSTerm6.applySubstitutionT(jSSubstitution0);
      assertEquals("[[bk0]]", jSSubstitution0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm5));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isConstant();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      StringReader stringReader1 = new StringReader("bhP&8p[[$}");
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSTerm4);
      jSTerm1.matches(jSTerm4, jSSubstitution1);
      jSTerm2.isEval();
      jSTerm3.print();
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader1 = new StringReader("bhP&8p[[$}");
      StringReader stringReader2 = new StringReader("bhP&8p[[$}");
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      jSTerm2.isEval();
      jSTerm0.print();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      StringReader stringReader3 = new StringReader("40.0");
      StringReader stringReader4 = new StringReader("expected '('");
      jSTerm1.removeAllElements();
      StringReader stringReader5 = new StringReader("!^2");
      jSTerm4.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(=c*o-wL~dv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      StringReader stringReader1 = new StringReader("bhP&8p[[$}");
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm2.isEval();
      jSTerm3.print();
      jSTerm1.isGround();
      JSTerm jSTerm6 = jSTerm2.cloneT();
      StringReader stringReader2 = new StringReader("bhP&8p[[$}");
      JSJshopVars.exclamation = (-115);
      StringReader stringReader3 = new StringReader("bhP&8p[[$}");
      StringReader stringReader4 = new StringReader("2");
      jSTerm2.makeEval(false);
      jSTerm4.call();
      jSTerm2.cloneT();
      jSTerm2.spliterator();
      jSTerm4.matches(jSTerm6, jSSubstitution0);
      assertEquals("[bhP&8p[[$}, [bhP&8p[[$}]]", jSTerm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm4));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      StringReader stringReader1 = new StringReader("bhP&8p[[$}");
      StringReader stringReader2 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm3.cloneT();
      jSTerm1.matches(jSTerm4);
      jSTerm6.matches(jSTerm2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.isGround();
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StringReader stringReader1 = new StringReader(", ");
      jSTerm1.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm2.listIterator((-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(w%=c*o-wL~dv");
      JSJshopVars.lessT = 62;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.isGround();
      jSTerm1.toStr();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader1 = new StringReader(", ");
      jSTerm1.equals(jSTerm2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = null;
      try {
        streamTokenizer1 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(=c*o-wL~dv");
      JSJshopVars.lessT = 62;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader(", ");
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm0.standardizerTerm();
      JSJshopVars.semicolon = 2357;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm1, jSSubstitution1);
      jSTerm2.isEval();
      stringReader0.mark(2357);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.print();
      jSTerm2.isGround();
      jSTerm2.cloneT();
      JSTerm jSTerm5 = jSTerm0.cloneT();
      jSTerm5.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      jSTerm0.addElement("(");
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSTerm1.makeVariable();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3, jSSubstitution1);
      jSTerm3.isEval();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm1.print();
      jSTerm2.isGround();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSTerm jSTerm6 = jSTerm4.cloneT();
      jSTerm0.call();
      jSTerm4.matches(jSTerm5, jSSubstitution2);
      jSTerm3.ensureCapacity((-1653));
      jSTerm3.retainAll(jSTerm6);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm4.equals(jSTerm3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm8 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm7.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("expecting");
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      Object object0 = new Object();
      jSTerm2.lastElement();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isFunction();
      stringReader0.skip(1244L);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      StringReader stringReader2 = new StringReader("expecting");
      StringReader stringReader3 = new StringReader("?");
      System.setCurrentTimeMillis(2L);
      jSTerm1.standardizerTerm();
      jSTerm1.print();
      StringReader stringReader4 = new StringReader("(ANO<Ynk/;k1QQV+#");
      JSTerm jSTerm4 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      jSTerm2.print();
      boolean boolean0 = jSTerm2.equals(jSTerm3);
      assertEquals(1, jSTerm0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeEval(false);
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      StringReader stringReader1 = new StringReader(":o:E9=,+");
      stringReader1.markSupported();
      jSTerm2.equals(jSTerm3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.makeEval(false);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm2.addElement(jSTerm1);
      jSTerm0.addElement(jSTerm2);
      jSTerm0.isFunction();
      stringReader0.skip((-1191L));
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.isEmpty();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("p");
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      stringReader0.read();
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      int int0 = 538;
      jSTerm0.setSize(538);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.addElement(stringBuffer0);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      jSTerm0.addElement("(");
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm1.makeEval(false);
      jSTerm2.clonePF();
      jSTerm2.addElement(jSTerm0);
      jSTerm3.isGround();
      assertEquals(1, jSTerm0.size());
      
      jSTerm1.toStr();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm3.equals(jSTerm4);
      jSTerm2.equals(jSTerm1);
      jSTerm1.print();
      JSTerm jSTerm5 = jSTerm2.call();
      assertEquals(10, jSTerm5.capacity());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(")");
      jSTerm0.addElement(")");
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("() )", stringBuffer0.toString());
      
      JSJshopVars.exclamation = 3012;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader(")");
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.print();
      jSSubstitution1.removeAllElements();
      jSTerm1.isEmpty();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.equals(jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertTrue(jSTerm4.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm5 = jSTerm0.parseList(streamTokenizer0);
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isVariable());
      assertEquals("[nil]", jSTerm5.toString());
      assertFalse(jSTerm5.isFunction());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(")n$<Yc!>O)cTA?/,(Z");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.addElement((Object) null);
      jSTerm0.isEmpty();
      jSTerm2.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "_%hj:b)}P<]xIYXNx)");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      StringReader stringReader0 = new StringReader("_%hj:b)}P<]xIYXNx)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis(0L);
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.isEval();
      jSTerm2.isVariable();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.trimToSize();
      streamTokenizer0.ordinaryChar(4126);
      jSTerm0.toStr();
      jSTerm0.isEval();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.makeEval(true);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.reset();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm3.isEval();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm1.isGround();
      jSTerm3.cloneT();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.equals(jSTerm5);
      jSTerm4.isVariable();
      jSTerm0.isEval();
      jSTerm1.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis(0L);
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.isEval();
      Stream stream0 = jSTerm0.stream();
      jSTerm2.isVariable();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm3.setElementAt(stream0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm2.isFunction());
      
      jSTerm0.listIterator();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      StringReader stringReader1 = new StringReader(" . ");
      StringReader stringReader2 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader(" . ");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer2);
      boolean boolean0 = jSTerm4.equals(jSTerm0);
      boolean boolean1 = jSTerm1.isGround();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.print();
      jSTerm2.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.equals(jSTerm2);
      jSTerm0.cloneT();
      jSTerm2.applySubstitutionT(jSSubstitution2);
      assertTrue(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.call();
      jSTerm1.print();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      StringReader stringReader1 = new StringReader("S <97NY4#s2[0u{S");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm3);
      jSTerm2.cloneT();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("/PaUg7p/>]?Sf48");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(", ");
      jSTerm0.isEmpty();
      jSTerm1.toStr();
      System.setCurrentTimeMillis((-1191L));
      jSTerm1.call();
      jSTerm1.makeEval(true);
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm3.ensureCapacity(239);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.percent = 288;
      boolean boolean0 = jSTerm4.equals(jSTerm2);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader(", ");
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MI8f.s3[$H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.isConstant();
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm4.makeConstant();
      jSTerm4.cloneT();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm5.isFunction());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StringReader stringReader1 = new StringReader("bk0 40tn/Yd2nX~aq");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("bk0 40tn/Yd2nX~aq");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(4956L);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      StringReader stringReader2 = new StringReader("bk0 40tn/Yd2nX~aq");
      stringReader2.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(,  )", stringBuffer0.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader(", ");
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSEvaluate");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution2);
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StringReader stringReader1 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("bk0 40tn/Yd2nX~aq");
      System.setCurrentTimeMillis(1295L);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.matches(jSTerm2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-1416L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-1));
      jSTerm1.call();
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%P%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.print();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(626);
      StringReader stringReader0 = new StringReader("");
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StringReader stringReader1 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.addElement(jSTerm1);
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([[]] )", stringBuffer0.toString());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2355);
      jSTerm0.get(465);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(862);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.setSize(2356);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.setSize(2356);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.setSize(2356);
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "(";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.setSize(1);
      jSTerm0.toStr();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.remove((-1794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1794
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" U}1\">G#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-3));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm2);
      assertFalse(jSSubstitution0.fail());
      
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.isEval();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm5.isVariable());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.setSize(465);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAll(jSTerm0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "?J ";
      StringReader stringReader0 = new StringReader("?J ");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar(125);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.setSize(465);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.percent = 1708;
      JSJshopVars.colon = 1708;
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      System.setCurrentTimeMillis(1307L);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aaD/B");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MI8f.s3[$H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.isGround();
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.call();
      assertFalse(jSTerm3.isEval());
      
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      StringReader stringReader0 = new StringReader("aaD/B");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, jSTerm1.size());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      stringReader0.markSupported();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.print();
      streamTokenizer0.ordinaryChars((-4322), 0);
      jSTerm1.call();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bk0 40tn/Yd2nX~aq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis(0L);
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.isEval();
      Stream stream0 = jSTerm0.stream();
      jSTerm2.isVariable();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm3.setElementAt(stream0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      System.setCurrentTimeMillis((-4951L));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = (-4951L);
      System.setCurrentTimeMillis((-4951L));
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "? ";
      StringReader stringReader0 = new StringReader("? ");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("bhP&8p[[$}");
      jSTerm0.addElement("bhP&8p[[$}");
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      System.setCurrentTimeMillis((-1191L));
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.makeEval(false);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm2.addElement(jSTerm1);
      jSTerm2.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.print();
      // Undeclared exception!
      try { 
        jSTerm3.insertElementAt(jSTerm1, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      stringReader0.markSupported();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeConstant();
      jSTerm0.makeFunction();
      jSTerm2.makeFunction();
      jSTerm2.isFunction();
      StreamTokenizer streamTokenizer1 = null;
      try {
        streamTokenizer1 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(", ");
      jSTerm0.addElement(", ");
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(,  )", stringBuffer0.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("c*$A~^O6OUi-L)X/'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [c*AO6OUi-L], [nil]]", jSTerm1.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.stream();
      // Undeclared exception!
      try { 
        jSTerm1.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      stringReader0.markSupported();
      jSTerm0.isGround();
      jSTerm0.print();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.setElementAt(jSTerm0, (-1714));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1714
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clear();
      JSJshopVars.minus = 7;
      jSTerm0.remove((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2);
      JSJshopVars.apostrophe = 7;
      StringReader stringReader0 = new StringReader("Kt6\"6M\"w!|'VPX`6F4#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1761), 124);
      jSTerm1.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = (-349);
      JSJshopVars.colon = (-2489);
      boolean boolean0 = jSTerm0.isEval();
      jSTerm0.isConstant();
      boolean boolean1 = jSTerm0.isFunction();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      JSJshopVars.backquote = 2;
      JSJshopVars.interrogation = 535;
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.stream();
      // Undeclared exception!
      try { 
        jSTerm0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "failed substitution";
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      stringReader0.markSupported();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.print();
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.ordinaryChars(0, (-4322));
      jSTerm1.makeEval(true);
      jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      stringReader0.markSupported();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.print();
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.ordinaryChars((-4322), 0);
      jSTerm1.makeEval(false);
      jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.toStr();
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.skip(32);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      jSTerm1.toStr();
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.isVariable();
      jSTerm0.stream();
      jSTerm0.setSize(416);
      jSTerm0.makeConstant();
      jSTerm0.toStr();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      JSJshopVars.colon = 0;
      // Undeclared exception!
      try { 
        jSTerm1.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      stringReader0.markSupported();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.print();
      streamTokenizer0.ordinaryChar(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "umd.cs.shop.JSJshopVars");
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isVariable();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.isFunction();
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("~]tILSv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clear();
      JSJshopVars.minus = 7;
      jSTerm0.remove((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      JSJshopVars.apostrophe = 7;
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|>770q99=b`");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZU]xn~E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("00X:# br");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftBrac = (-1085);
      JSJshopVars.apostrophe = 485;
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
